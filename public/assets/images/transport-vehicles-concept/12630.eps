%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: S_1409.i047.054.S.m004.c10transport.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: ivan
%%CreationDate: 9/27/2014
%%BoundingBox: 0 0 920 420
%%HiResBoundingBox: 0 0 920 420
%%CropBox: 0 0 920 420
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.0 x256 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2014-09-27T21:22:51+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-09-27T21:22:51+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-09-27T21:22:51+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>120</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAeAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9FZluM7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FWmYKCzGgAqSewxQwG/nFxezTD7LuSvyrt+GZ8RQpxJGyoZJi7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FWU63rd1ZXqRQ8WXgGcMK7kn+GYuPGJDdyJzIKcWtzFcwJNEeS&#xA;OKj29jlJFGm0G1XAlCWV/FdT3CxHkkJVKjodjUj6cnKNAMIytF5Bm7FXYq7FXYq7FXYqxrU9evbX&#xA;Up4oGVoloArCoB4itOh65kwxAx3ceWQgqNt5pvVnLXCrJEeqKOJHuP7cJwitkDKeqf6fq1pf8hDy&#xA;DIAWVhQ7/flE4GPNujMFFuqsjKwBVgQwPQg5Fk88kCiRgpqoJ4n2zPDhLcKuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxVOfNUSrqKuOskYLfMEj9QynAdm3KN0utL+8tCTbylK9V6g/QdsslEHmw&#xA;EiOStc61qdwhjkmPA7FVAWvzpkRjiEmZK/RNSFjd8n/uZBxk9vBvoxyQ4guOVFmcckciB42DIwqr&#xA;A1BzDIcq2yQoJJoBuScCpb/iPSfUdDKRxNOXEkH5UrlvgyYeKEO/mqzFwiIjNCTSSU7U+QyQwGmP&#xA;ii05R0dA6MGRhVWG4IykhtXYEoPVNThsLcuxBlYUij7k/wBMnCBkWE5UGDySPJI0jmruSzHxJ3OZ&#xA;oDiLcKq9nd3FpOJYGo/SnUEHsRkZRBG6YkjknE+p61dwtF6aW6sCHbcMexG5JH3ZXHHEbthyEq+n&#xA;+Snu7ZZheoteqhC1D3B3XK8mp4TVM4afiF2s1PybJYwLL9aEnJuNOBXqCf5j4YcWo4zVIyYOEXaE&#xA;uvKms28YlWIXERHIPAeWx/yTRvwyUdRE7ckHBIJQysrFWBDA0IOxBGXNKrdTrPL6ixJCOKrwjBC/&#xA;CKV3J3OCIpMjajkkOxV2KuxV2Kq1o1os4N0jSQ0NVQ8TWm2598jK62ZRq91HJMXYq7FXYq7FXYqi&#xA;dQvpb26aeQUrsqjoFHQZGMaFMpSs2hskxdirsVVre9u7evoTPGD1Ck0+7ImIPNIkQuuNQvbheM07&#xA;uv8AKTt92IiBySZEofJMXYqirPU7602glKr3Q7r9xyEoA82UZEIt/M2qstAyIf5lUV/GuRGGLLxS&#xA;ls00s0hklcu56sxqcsApgTazChFabpl3qNytvbLVjuzH7KjxY5CcxEWWcIGRoPQdG8tafpihwvrX&#xA;X7U7jcH/ACR+zmty55T9zn48Ij70XBp0EYlaYJM8rl3dlA69t67ZCWUnltSY4wOe6TyeYvLOm3y8&#xA;L+2WC4U+oqSoQrIdjQH3pkhLjjuRYZHDKB+k0fIoHUfMFrqzUs5Ultoj1Rg1W8TQmmZWnxgC7suL&#xA;qDK6IIRNhrd3DAttHEJnrSImu1e1B1xyYIk2TSIZiBSYXmh22sWiveQfV7ylPVWnIEfrHscxxlOM&#xA;7Gw3HGJjcUWCatpF3pdz6NwKqd45R9lx7fxGbDHkExYcKeMxNFA5YwdiruuKqlybe3+uL9ttPgE9&#xA;0a0HJt1jX3Kg/TTMI6gmjyEjQ/Wsj6pRG5hGz7+75X9iC0+/hvrZbiH7DgFa+B6ZfiyGV3zDIgUC&#xA;ORROXMXYqvignmJEUbSFRVggLUH0YCQEgWswoVIbeebn6SF/TUu/EVoo6k+2AkDmkAlTwodirsVd&#xA;irsVdirsVdirsVWtIisiE/FIaIvcnATSDIA13rsKXYq7FVS3gluJ0ghXlLIwVFHcnASALKQLNPTt&#xA;F0iDS7NYI6GQ7zS92b+g7ZqcuUzNuyx4xEUj8qbHnv5k6tevoGswQsRCIXiaMU+Ja0etadRX6Mvz&#xA;YQMBPWmzs7L/AIXAdOJ5DZ+VFur9VKRpbyyCIO6F4oORKrEeQ5H7PEF92I4PxYI2HDp41uHX59bm&#xA;nKoTIHvN/j+3cWHqGheXtK0S2aCwhEfqEGWSg5uQKDkQB0/t6k5nQxxjyFNUsk5AcUjL3m2UafNa&#xA;jTZAXWO5hlE6ctuXEbAfiMpyRPH5EU2QI4fNkFjfQXkIliO/R0PVT4HMLJjMTRcqExIWEk15rLV/&#xA;q9pDKGYvToQBy/a3A6ZlYImFkhx8shOgGEXtnNZ3UttMKSRNxbwPgR7EZmxkJCw4sokGiogFiFUV&#xA;J2AHUnCxbZZI5CrgpIhoVOxBGOxCeTzjWfMet6TrmqQ3enT3y3DiVJYyeBjPLgTRSOlR9BzS6vLK&#xA;MhHhNRd32Z2RjyRlk8WIM+YPMfb5so8lWt3b+X7f63H6U0gMgiJqVVjVQ3vvm0w2RxEUZOnnhGE+&#xA;GJcYj15J7l7WmWjaZa3Zllu7gQW8ABfcBiT0pXtlWSZHINkIg82YWN5oMSMlnLBGqgF+JC1A7kml&#xA;cxJRmebkxlHokstl5Zmvri4mvVKSnkkaHjxY/aNaGuXCUwAAGoxgTdsclPozSxwylo6sgdSQHWtP&#xA;uOZA3G7QdlLJIdira8eQ5Eha/EQKkD2FRgVH6zFpEc0Y0yRpIygMvKuznsNv4nK8RkR6mzII36Uv&#xA;y1rdiriaAnr7YEhI5POWkRI4livEeOvNjaXAQAV61TanjXNXLXZAfp+wu5h2TdVKJ/zorD540LkV&#xA;AuHoaFo4WlFTvSsfLxy/LmyQ58JPlbrdHAaijESET1kYgfff2LUlj1fWVv7SC5WG2Vltmu0eFKst&#xA;KlGVC3xeH3448k8lSqiPIgff+hlm00sMjGRiYmuREjtdfw7c/wCcyHM5xUw1e50qdoDp9u0AWOko&#xA;JFC1Sen8a5VjjIXxG2zIYnkEGbeYW63BX9y7FFao3ZQCRTr3yfELphRq2UeQ9OEk81+4qIf3cX+s&#xA;wqx+hf15i6udDhcnTQ3tllhqVjqEcslnMJkhleCUrXaSM0Zd6dMwZRI5uVDJGYsG197cpbWskzfs&#xA;DYeJ7D78MI8RpM5ULed65ZS6jpV5Zq4WW5jdA7bgMw6nrmxzY+KBiOocXSZxiyxmd+E2u0vTYNPt&#xA;Ft4gK9ZHAoWagFTUk9AAKk0AAycRTjAUi8kljeu+Z7fTNUjsZdWtLee59P6vaPbSzS0kdYgWaOZQ&#xA;AZH2qo/A5j5s3B+P2t2PHxdPx8kTa3nnCHUriD65ZxCGNHLRW9wz8ZCwHICahqV7E5ijV8Z4av4f&#xA;tcg6YwiJ8gfNPbN76y0qa/lj+vXSKGtGS0uIolcEjk4Ek7uBt9lR0+kSOeRlwnYNU4cMOKO8vjX2&#xA;BF+etOJht9QoPUWkU5UUBqKqaVNN65bpJ84o1MNgWHglSGU0I3BHUHM1xG3d3cu7FnY1ZmNSSe5J&#xA;xAVJdb8tXWs32mPb3bwC1m5T20aF/rMfJWMTUZdjw8D1yrLiEiCejdiymIIHVmGm+Wru+t5ZA4hk&#xA;if0zFICDUAE18OvhjPMIlEcRISu4glt53hlHGSMlWHuMtBsW1kUp4UOxV2KuxVH2OjXV5ZXN3Eyc&#xA;LUcnUn4iACTQCp7d8rllESAerZHGSCe5AZY1uxV2KuxV2KuxVUa2P1UTMUMbsYylQW6V3XrTI3vS&#xA;a2tSVFRQqAKo6ACgySKbxV2KuxV2KvQvLxWw8qfWiBVY5bh/fjUj/hVGazP6slOdCXBiMvIl5l+W&#xA;es3xTWLITOqrcRzsAaEtLHxJr/zyzPyY48V06TszLLgIvzegPqSS6T9WlLvOH5Kx3FPck/PKRiqd&#xA;jk7U5LhR5pdl7Uk/mPWzpMVpIAD69zFFJXtGzAOR774QHG1GfgMfMpxgclhGsflxd3+t3WpRa7c2&#xA;yXLI62y+qwUoB3EygjkKgcdswcmiEpcXEXZY+0uHHwGEDtXLdPvK/l39BaebZrqS8ldi0kzlgDue&#xA;PGMs6rQGhp1zKhjrcmz3uBKUeUYiMe4PRdBmhfTo0jPxR1DrXcEkmv05g6iJEt3LwEGLHfPXmvT9&#xA;O8sa3c6jFJ9WsZordfQHN2Z+DIeJ4/tNv7ZVjyiErPJuOGWQcMRZYXZ3lteWsV1bOJIJlDxuKioP&#xA;sdxm4jISFjk6vJjlCRjIUQl915m0u11630Scul3dRiWFyv7o1ZlCc+zEocrlnjGYiTuW2GlySgZx&#xA;iTEcyybRtTi065Nw1v68lKR/Fx416no2SyQ4hVtUJ8Jtk195q0+2jR7VRcPN8Tqp4EbAVY0O+1Mx&#xA;o4CeezkSzAcmMazqceo3IuFtxA3Hi9Dy5EdyaLmTjhwircec+I28989+ZDp15p8EG8sEi3coHXiD&#xA;wC/7IM1c1vaOs8MgDmPV9o/a9H2F2SNREyl9MrgPfwyN/DZl9vPFcQRzxNyilUPGw7qwqDm0hISA&#xA;I5F53LjlCRjLaUTR+Cpkmt2KthmClQSFahK12NOmBWsKoXVNRg03T576c0igQse1T0C/7I7ZDJPh&#xA;iT3NmLHxyEe8sDt9Y1y6nS7uZ7i3tZwJUhF1a27+mwqOKS0O4+ySN/fNDk18pDbiB94eswdjwx5A&#xA;TLHKI4rHBM+7cbbfxefKll/deZvt2OqhU7RSXlqWp2q3MCvj2zDOpz9JH5h3ePS9n/xYxflGX6kR&#xA;Jf3xtSUvbsXXpAJXUbDh69PiLAf7rrSg+175ZHWZh1J+IcLN2bpchAqMY3/DCd19u/2JNNqnni2h&#xA;e6N6ZI4BzlMU8M/Fa05MkbOePiSKY/yhqB+P2tsexOzpGuKe/ft98WceZ9bu9P0u0urYqzzMoYtW&#xA;hBQtX4SudPE2AXzXXk49h3pdf+ZtRgfVggSllMkcNefRmYHl8Xtgdec8993XXmbUYn1IKEpaQwyR&#xA;V59ZGjDV+L/LOKnPPfdz+ZtREkqgJRLCO6H2/wC8dEY/tdKucV8efen2kanLNoEV/PT1GRmalaVD&#xA;EDrU5MBzo5axcR7mPfmrdaKdHsobC8a6kSUNdueXEsI2HJQQAATWgzRdrGZx+oV6hXyk9b7F5Mf5&#xA;s8M+L91K/wDTQeTz36gFYt2/m7DNDGHe+i5NT0i9U/IPWYbCDX5LtkWJolZ5ZePFaMq1qe/x7AZv&#xA;+z6GKyaAkfuD537QcUtcIgXKWKP+6k9Xt/OemW9pwngW5tSaqSyK45b1oW5j5ca5fPUxJscQcKOg&#xA;mBRMD5X+mq+1F2eteXr3jfRoDp5UhvTcseQ8a8SCO65lRJlC4m3ByxGORExw0wP8377TJYoE01zx&#xA;hLeqpYMVk5R7bEkGm++X4CTE2Q6btYVOFAiwTug/M/5kWr6Jez6JqkdveWwiEMZjDSTSM4EoVZRQ&#xA;IiHrx3PTpvptX2lzGM8vx1e+7L7BJ4ZZ4Exnvz2Ara66n37fdBP+Vqedv+rmf+keD/qnmt/lLUfz&#xA;vsH6np/9Dug/1P8A2U/1s2/L78wNRvdO1a61uSS6j09oSZY4lDKkoepKxhfhXhuaZu+ycuTMDxGz&#xA;06PH+0uiwaacRijwgg3uT3d7ILf84PK9lcLJbTyyGnxUjIXc/ZbmUzcT0E5CiHlTq+A7An3V+tjG&#xA;q+cLfX5r+1vr8fojUJzPJb8lQ/CaxCqh2HEKoynJ2ZExoxv5uHg7X1uHN4kJSjzr0g0PjGStZXuk&#xA;WtrHbWuoMlvEOMahiQB8zCTkseAwiIiNAfjvaNR2jlyzM5zJlLntX+8ULqLy7dahDqE92z3luFEM&#xA;vNhxCksNhCB1J7ZVPRxlMTMfUPx3uRh7d1OLDLDDIRjndih1Fc+C/tR0fmOCA0e4W5iJ241Eij3q&#xA;qKcyeAno4uLtAx+r1D7f0BH2OuWF47JGxRlFfj4io9qE5EwIc/T6uOUkAEe9HCRChcHko6ld+nyy&#xA;J2csC2GX3kObVL+W/wBSvDFNeOQsMahhGoUlFLE7kBRWgzSy7OOWUpzO8und3PQx9qhp448WDHxR&#xA;xnmduI0b26czX3Mg8u6bdaVp/wCj7iUTx25PoTgcaxtvQipoVNfopmfo8UscOA71yLru09bDVZPG&#xA;jHgMvqj594Pcfvt0nmry7GhY6hC1OysGP3DNh4E+4urlkAFsW1D80zHcGPT9Le4iH+7pZY4gfkKs&#xA;cqljyA7QkUCdi7EfgSfs/WjdC/Mazv74213GtmqxGRp3JEXIMoEas4Qk0Ynp2yQxzJrhkiBlzlVf&#xA;b+n7068veadI19bptOd2+qSelKHUof8AJYV/Zam3f2ymGQSuujkTxmNX1ROsaamp2MtjMoNvMB6n&#xA;xFW+FgwpQHuMlKAkKLATnGQMaYlJ+VtpPNFNdXLzyhj67sQDItOKLsvw8AB0zD/k7E5w7X1YFCVf&#xA;EoOT8nLJ1QC9kVlryI471Ykbcew2wfydiZfyxq/53+yk3F+TtlHSt47/ABqTy4/ZFeS/Z/a8cf5O&#xA;xL/LGr/nf7KSKt/yttbaR5ILp42d3BK0H+jyoUeH7P7SsRyw/wAnYmJ7X1Z5y+080xvPJMl1JAHv&#xA;7g2sIYG2eUyKSRRSOSnjx+WZHg1yJcDJOU/qjE/NRfyFcyIwl1OV3nVvrb/CPVkNeD/Y24E9MfCP&#xA;84tfAP5kPtQ7flzfs0rPrVw3rhVmB4fEqEFQfg/yRj4J/nFeAfzIfaih5EnqC2oysa8JN1+K2AAW&#xA;H7HYKPiw+F/SKOAfzIfajNO8rXVppdzp73800c7fC5ehiQNyCxjiVH+Vtvhjjq9yylZHDwx4e7dd&#xA;p3lG1tLyC5mjS7FvKkqwzlpI3aNOPKRZOdWatWpRa9FGVy04lEiRJ3tnjyTxzE8YjA8PDttY+HuR&#xA;2t+QtI8y3Ed/JY21pJFCbb0rYelEev7wqirVxz2JNPY5QdBj/FOdHtLUjr/sitsPy0s7TTorVY4x&#xA;LbzySpcJJIrSI7gpHOEC+oFVQu1O/jkxpQOUpCu7b597Vk1Mp3xwxzMq3l6iK/mk3w/BNLX8v9Lk&#xA;tVgd/TuEC8Z5JpCjFCD8QVQ3xUofiHzy3JKdUCf0utxaHGJ8XDH7a+VI23/KiaaxtLaDUS1nbTma&#xA;VTJIRMSFBBLIOnGg6jc7V6Y/jcHWV+e7nZdL4orhhGPdEUD9n2q2q/lBJfXkUnqwpZjj69pzk+IB&#xA;iTSTjyH01Pv2x/Nmqv7Gg9kxMrofM/qW/wDKj9DaeR5LSBonqVQSyBqmleTcDWnHagHU1r2xDDES&#xA;SY8/J3MNXrIQEI5JAR2+o/qU5vyL0hw6xwQRhgQrB2LKSOorHTb5ZPhwV9A+SBrNff8AfS/0x/Uu&#xA;tPJ03lhJLO1S25XH712HPgAzNRQpFeK1NAW+nM3S8IhQ5B12qOaWQzkblKtySfLqxHUfygtLq7nu&#xA;IrsW4k+JIY4/gDHrQFjxHtvmwOoEgOKIlXe04znx3wTq/t+1BXH5PW0CeodRYqABT0wCWJ/1vDDi&#xA;1EYfTEBc09RkFTnfX5/FBj8r7eiVvWqPt/B/bl/549zj+DPvHy/a7/lV9vT/AHtavL+QfZ+/H88e&#xA;5fByd4+X7XN+V8Hx0vWr+x8H9uP549y+DPvHy/a3/wAqvtuR/wBNbjTb4B1+/H89LuXwZ94+X7WQ&#xA;aLo19o+nLZWtzEV5F2klh5kE+HxKOuYWokcsrsj3N2Ljjz4T8OX2rLny/JdTNPcrZSzSUWRjbNug&#xA;NR/u3rsMx/A/pFkdzfDH7fnz/H3ts/LMdrq0mrIlsL50ETSpE6FkCooB/eMo+x2XDDCBLiskpMp8&#xA;AjHhAHv/AF/j7ibU/wAsbS9vJrlL2S2MtWMcY+AMdyQCTx398lOMybGSY+Ll4NZKERE48Uq6mG59&#xA;+/28/wBIRfykiqnLVZqAfH8I3PtvkPDyf6pk+bae0Of7rD/peX27/wBvwoflJHRK6rNUH4/hG4+/&#xA;5YPDyf6rk+antD/asP8ApeX2/jb4y3y9oFvolp9WtwnE7ySBaPI/Tm5qd8ujGh3nvLgzySnIk0B0&#xA;AFAJrkkOxVsAkgAVJ2AGKpufK+oi39SqF6V9Gp5fLpSuU+MLbfCNJXLBPCQJo2jJ3AcFT+OWggtZ&#xA;FKeFDsVdirsVdirsVR2lSsszR0JVxU0FaU75GSQm2Bk7FWaabNFLYwmMghUVSPAgUIOarLEiRt2O&#xA;MgxFInK2bsVdirGPMrA6goHVY1B+dSf45sNKPT8XC1B9SXwG0EcwmVjIV/clTQBvfLpXYpqFb2k+&#xA;oGW4mW3hUuU3YKK7n+mWXTDmotpGoqvIwGnsQT9wODxIrwFCEEEgihHUHJsWsVcASaDriqo0E6ry&#xA;aNlXxIIGCwmlPCh2KuxVfFE8sixoKu5oBgJpICdDy2np7zH1PED4a5T4zZ4aXyaPqKFv3RYKeqkG&#xA;vyHXLBkDDgKCybFMtD/Ri3DyX5Xio/dqwJBJ8QAemV5OKtmzHV7po3+GTeJdLKqFKERoGVeQNQaA&#xA;ZV66pn6LtMf09pP/AC0D7m/plfhS7mzxIoi6s7W8iVJ1EiV5LvT7iMjGRHJJiCx6Xy0V1KGJObWk&#xA;lWeSn2ablSR49syBm9Pm0nFv5J/+jdP9H0fq8fp0pTiP19a5j8Z727hCXr5V04BuTSEkniagUHbt&#xA;lnjlh4QY9qunPYXRiJ5IRyjfxHv75kQnxBonGig8mxdiq+OaWPl6bsnNSr8SRVT1Bp2wEWkFNrG8&#xA;EycHP71evuPHIkJBReKVa1vLi1k5wOVPcdj8xkJwEhuyjMx5JsnmmQAc7cMe5DEfwOYx0g728ak9&#xA;yZW+tWcsKu1Y2bqhBNPpAyiWEg03RzAhdqV6YdOe4hYFjQRt1FSaVwYoXKinJOo2GIO7u5d2LMxq&#xA;WO5JzZgU68m1JnJkSCP++k+z7Dux+WJNC1CZW9vFBHwjHuzd2PiTmMZW3AUq4EoDVNMS7j5IAtwv&#xA;2W8fY5ZCdMJRtDReXLfgPVlcv340A/EHJHMUDGjLHS7e0BI+OQ/7sI3p4DwyEpksoxARmQZJDrem&#xA;JEv1mFeK1pIg6CvQjMjHO9i1Tj1SmKGWVuMSM7eCgn9WWk01gNy288NPVjZK9OQIxBBUhFaKyrqU&#xA;XLvyA+ZU5DJ9LKHNlOYre7FWEZnOK7FXDriqIvrQWk/pCaOcUDc4jyXfsfcZGErFspRost0CeOXS&#xA;4Qp+KMcHHcEHMTKKk5GM7JhyXlxqOXWnemVs1lxcQ28LTTNwjWnJqE0qadsIBOwUml0UscsayRsH&#xA;RhVWHQ4kUoKX3mq6IWe3uZFYj4XUqzD7wDlkYS5hhKceRY/b6utlBfWcMSTQ3JKpK4bkFrQdx+z+&#xA;OXyx8RBPRpE6BCV5a1uxVVhhuXPKFHYr3QE0+7ASEgFMIdRKn07pSjj9qhH3jBSbRqujjkjBh4g1&#xA;GBK7FUyAAAA6dsxG9uZpZLYW/OkYbnSnelMMaBtZWRST3X1xHMUEDO9K86fDv75kCQaTErdEtrhb&#xA;qeS4VhIFABb/ACj2/wCByOWQrZMBunWUNrsVWSSpGPiPXoMkIkoJp0cqSD4T06jExIUG1+RS7FVC&#xA;9i9W0mjAqWQ8R702/HJRNFEhs60tYrWBYox0+03cnxOMpWVApUmhjmjaORQyN1BwA0pFpHY6XPBq&#xA;il0JhQsVk7HY8cvlMGLVGNFP8x252KsIzOcV2KuxV2KqkNxPA3KGRo2PUqSP1YCAeaQSFyXc63KX&#xA;JcvKjBuTktUjfeuAxFUt72mep+YnvbT6usPphiDIS3KtDWg2HfK4YqNtkslikqSedFKpIyqeqqxA&#xA;P3ZbQa7U8KHYq7FUZpdkLu6CN/dqOT/Lw+nITlQZRjZZSiIiBEUKo2AGwzFJchRvbKG7hKOBy/Yf&#xA;uDhjKixlG0n/AEBfRrzilXn4KSp+g5d4oa/DKFjn1AXC2xcq5YIQwBIJNO4yw1Vsd7plKiigeApm&#xA;G5DeKuxV2KtMyqpLGgGEC0EoWa6qAIyR4nvlscfewMu5QLMxqxJPvlgDBdA/CQE9O+CQsJiaKKlu&#xA;VQDj8RO+VRhbYZLoZhItRsR1GRlGkg2qZFLsVdirsVdirsVYRmc4rsVdirsVdirsVdirsVROn2Zu&#xA;7lYq0X7Tt4KMhOVBlEWWSJplgicBAhHiRU/ed8xzMt3CEn1LRmjnT6qpZJTQL/KevXwy2GTbdrlD&#xA;uTHSdNksxIZGDNJx2Hale/05XknbOEaTHK2bsVdiqEuNPjmu4bmvFojU7faA6ZMToUxMbNovIMnY&#xA;q7FXYqpywrJSpIp4ZKMqYmNqf1OP+Y5LxCjgd9Tj/mOPiFeB31OP+Y4+IV4HfU4/5jj4hXgXxQLG&#xA;SQSa+OCUrSI0q5Bk7FXYq7FXYq7FUu/5V/rP+/rf/gn/AOaMn+cj5o/Ky8nf8q/1n/f1v/wT/wDN&#xA;GP5yPmv5WXk7/lX+s/7+t/8Agn/5ox/OR81/Ky8nf8q/1n/f1v8A8E//ADRj+cj5r+Vl5O/5V/rP&#xA;+/rf/gn/AOaMfzkfNfysvJ3/ACr/AFn/AH9b/wDBP/zRj+cj5r+Vl5O/5V/rP+/rf/gn/wCaMfzk&#xA;fNfysvJ3/Kv9Z/39b/8ABP8A80Y/nI+a/lZeSP0nydqVnJI8ssJ5AAcWc9/dRkMmpie9lDTyCZ/o&#xA;K7/nj+9v6ZV4wbPCLv0Fd/zx/e39MfGC+EXfoK7/AJ4/vb+mPjBfCLv0Fd/zx/e39MfGC+EXfoK7&#xA;/nj+9v6Y+MF8Iu/QV3/PH97f0x8YL4Rd+grv+eP72/pj4wXwi79BXf8APH97f0x8YL4Rd+grv+eP&#xA;72/pj4wXwi79BXf88f3t/THxgvhF36Cu/wCeP72/pj4wXwi79BXf88f3t/THxgvhF36Cu/54/vb+&#xA;mPjBfCLv0Fd/zx/e39MfGC+EXfoK7/nj+9v6Y+MF8Iu/QV3/ADx/e39MfGC+EXfoK7/nj+9v6Y+M&#xA;F8Iu/QV3/PH97f0x8YL4Rd+grv8Anj+9v6Y+MF8Iu/QV3/PH97f0x8YL4Rd+grv+eP72/pj4wXwi&#xA;79BXf88f3t/THxgvhF36Cu/54/vb+mPjBfCL/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:3476670e-1aee-d04e-be44-a94e4f64f929</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:3476670e-1aee-d04e-be44-a94e4f64f929</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:D73BAA3FAD41E411A157D98225C10DAA</stRef:instanceID>
            <stRef:documentID>xmp.did:D73BAA3FAD41E411A157D98225C10DAA</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6C2C2C982E3CE4118693BC989B1A355E</stEvt:instanceID>
                  <stEvt:when>2014-09-15T00:45:54+08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D73BAA3FAD41E411A157D98225C10DAA</stEvt:instanceID>
                  <stEvt:when>2014-09-22T01:48:17+08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3476670e-1aee-d04e-be44-a94e4f64f929</stEvt:instanceID>
                  <stEvt:when>2014-09-27T21:22:51+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>920.000000</stDim:w>
            <stDim:h>420.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -420 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 420 li
920 420 li
920 0 li
cp
clp
920 420 mo
0 420 li
0 0 li
920 0 li
920 420 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.592157 .72549 .870588 rgb
f
599.758 204.857 mo
598.384 177.37 589.024 151.989 573.954 130.98 cv
570.403 126.031 566.534 121.328 562.379 116.894 cv
560.7 115.102 558.956 113.371 557.185 111.67 cv
538.495 93.7175 514.815 80.9236 488.412 75.6287 cv
484.588 74.8621 480.708 74.2585 476.78 73.8123 cv
471.579 73.2214 466.293 72.908 460.935 72.908 cv
452.116 72.908 443.492 73.739 435.128 75.3093 cv
424.288 77.3445 413.891 80.6326 404.096 85.0271 cv
356.221 106.507 322.719 154.284 321.959 209.976 cv
321.951 210.618 321.935 211.261 321.935 211.908 cv
321.935 231.546 326.016 250.23 333.363 267.167 cv
354.735 316.439 403.806 350.908 460.935 350.908 cv
462.807 350.908 464.668 350.861 466.523 350.786 cv
473.706 350.503 480.749 349.675 487.613 348.339 cv
551.616 335.896 599.935 279.55 599.935 211.908 cv
599.935 209.544 599.875 207.193 599.758 204.857 cv
cp
.792157 .878431 .988235 rgb
f
513.394 138.909 mo
512.127 140.667 506.637 139.931 504.727 138.909 cv
502.343 137.633 499.044 132.594 498.727 129.909 cv
498.238 125.763 501.914 114.419 506.06 114.909 cv
507.586 115.09 507.486 123.926 507.896 125.407 cv
509.163 129.978 516.167 135.061 513.394 138.909 cv
cp
444.062 215.411 mo
442.557 220.626 426.301 220.679 422.396 216.908 cv
421.002 215.562 420.976 210.478 422.396 209.159 cv
425.075 206.671 433.547 208.98 436.978 210.242 cv
439.037 210.997 444.669 213.304 444.062 215.411 cv
cp
400.062 215.411 mo
395.497 215.011 385.871 211.634 383.395 207.777 cv
382.737 206.753 382.341 203.519 383.395 202.908 cv
386.944 200.851 395.006 207.161 399.062 207.777 cv
401.287 208.115 405.887 207.199 408.062 207.777 cv
409.918 208.271 414.983 209.691 414.729 211.595 cv
414.228 215.351 403.836 215.742 400.062 215.411 cv
cp
599.884 204.857 mo
595.359 208.167 588.495 210.851 584.727 211.908 cv
581.838 212.718 575.47 213.124 572.727 211.908 cv
569.886 210.65 566.704 205.855 564.089 202.501 cv
563.363 201.572 562.678 200.745 562.06 200.144 cv
560.801 198.919 557.826 196.945 556.727 195.575 cv
554.954 193.367 551.602 188.402 551.394 185.575 cv
551.212 183.105 554.621 178.718 554.727 176.242 cv
554.867 172.97 551.289 166.849 551.394 163.575 cv
551.479 160.943 552.589 155.117 554.727 153.576 cv
556.349 152.406 560.799 154.11 562.727 153.576 cv
563.989 153.226 565.991 152.549 567.878 151.654 cv
570.193 150.557 572.335 149.133 572.727 147.576 cv
573.28 145.378 569.614 141.132 570.06 138.909 cv
570.456 136.939 572.078 133.633 574.08 130.98 cv
570.529 126.031 566.66 121.328 562.505 116.894 cv
561.672 117.921 560.982 118.905 560.527 119.784 cv
560.321 120.182 560.158 120.561 560.06 120.909 cv
559.097 124.34 564.774 131.992 562.727 134.909 cv
560.303 138.363 548.798 134.365 546.06 137.576 cv
544.438 139.478 547.828 145.808 546.06 147.576 cv
544.764 148.872 540.455 148.189 538.727 147.576 cv
535.49 146.426 530.613 141.21 528.062 138.909 cv
525.086 136.225 518.739 131.042 516.727 127.576 cv
514.819 124.289 511.02 116.304 512.727 112.909 cv
514.577 109.23 526.936 110.869 528.062 106.909 cv
528.974 103.702 523.169 97.4431 520.06 96.2419 cv
515.944 94.6521 506.882 101.06 502.727 99.5759 cv
500.275 98.6999 497.454 93.7751 496.06 91.5759 cv
494.06 88.4177 490.394 79.9998 488.538 75.6287 cv
484.714 74.8621 480.834 74.2585 476.906 73.8123 cv
477.317 79.6316 477.461 86.8103 476.06 89.9089 cv
473.408 95.7732 463.09 107.87 456.727 106.909 cv
450.735 106.004 447.563 91.1882 444.062 86.2419 cv
442.359 83.8357 437.889 78.4499 435.254 75.3093 cv
424.414 77.3445 414.017 80.6326 404.222 85.0271 cv
405.923 86.9207 407.253 88.8191 407.395 90.241 cv
407.721 93.5124 398.922 98.8289 400.729 101.575 cv
402.206 103.821 409.317 101.945 411.395 100.241 cv
413.432 98.5701 412.45 91.5632 414.729 90.241 cv
420.61 86.8279 436.82 90.5457 441.395 95.5749 cv
444.664 99.1687 445.393 110.479 443.395 114.908 cv
441.626 118.829 433.693 124.736 429.395 124.908 cv
426.482 125.024 422.308 118.791 419.395 118.908 cv
415.384 119.07 409.372 126.081 407.395 129.575 cv
406.06 131.936 406.061 137.612 405.395 140.241 cv
404.191 144.993 401.169 154.339 399.395 158.908 cv
397.802 163.009 392.804 170.572 392.062 174.908 cv
391.441 178.536 395.496 186.55 393.395 189.575 cv
392.311 191.136 387.715 192.511 386.062 191.575 cv
382.297 189.441 384.843 177.523 381.395 174.908 cv
379.004 173.095 372.311 174.202 369.395 174.908 cv
363.02 176.45 350.05 181.7 346.062 186.908 cv
343.326 190.48 342.88 201.726 346.062 204.908 cv
347.594 206.441 352.562 204.908 354.729 204.908 cv
358.562 204.908 368.021 201.663 370.062 204.908 cv
372.524 208.82 361.635 216.972 362.062 221.575 cv
362.322 224.384 365.918 230.445 368.729 230.677 cv
371.977 230.947 375.043 222.804 378.062 221.575 cv
381.921 220.005 391.783 218.628 394.729 221.575 cv
396.338 223.185 394.533 228.411 394.729 230.677 cv
395.063 234.538 394.428 243.452 397.395 245.945 cv
400.203 248.304 408.486 246.755 412.062 245.945 cv
416.384 244.966 423.722 239.21 428.062 238.312 cv
432.468 237.4 441.589 238.81 446.062 238.312 cv
450.647 237.8 459.449 234.306 464.062 234.242 cv
469.328 234.167 479.675 236.829 484.729 238.312 cv
489.715 239.773 498.867 246.019 504.062 245.945 cv
509.051 245.874 518.771 239.65 523.853 243.367 cv
528.474 246.745 528.384 256.64 528.062 261.212 cv
527.982 262.355 527.929 263.74 527.879 265.263 cv
527.67 271.665 527.497 280.577 525.395 284.908 cv
523.145 289.542 512.716 294.628 510.729 299.38 cv
508.52 304.663 509 315.853 506.311 320.908 cv
503.101 326.941 491.272 331.517 488.062 337.548 cv
486.99 339.564 487.382 345.058 487.739 348.339 cv
551.742 335.896 600.061 279.55 600.061 211.908 cv
600.061 209.544 600 207.193 599.884 204.857 cv
cp
.709804 .827451 .956863 rgb
f
462.455 301.97 mo
454.719 300.154 442.394 301.771 436.729 299.38 cv
427.913 295.661 410.009 285.197 406.062 276.48 cv
404.488 273.003 404.44 264.667 406.062 261.212 cv
407.443 258.271 417.165 255.964 416.062 252.908 cv
414.534 248.675 402.408 254.077 398.062 252.908 cv
394.712 252.007 388.836 248.027 386.062 245.945 cv
383.851 244.286 380.729 239.038 378.062 238.312 cv
374.595 237.365 367.629 242.011 364.062 241.575 cv
355.331 240.509 339.22 231.509 332.729 225.575 cv
329.797 222.894 325.492 215.937 322.085 209.976 cv
322.077 210.618 322.061 211.261 322.061 211.908 cv
322.061 231.546 326.142 250.23 333.489 267.167 cv
354.861 316.439 403.932 350.908 461.061 350.908 cv
462.933 350.908 464.794 350.861 466.649 350.786 cv
465.579 346.327 464.351 340.323 464.729 337.548 cv
465.301 333.353 471.651 326.495 472.062 322.28 cv
472.514 317.644 470.843 307.372 467.395 304.241 cv
466.202 303.158 464.484 302.447 462.455 301.97 cv
cp
f
574.08 130.98 mo
572.078 133.633 570.456 136.939 570.06 138.909 cv
569.614 141.132 573.28 145.378 572.727 147.576 cv
572.335 149.133 570.193 150.557 567.878 151.654 cv
565.991 152.549 563.989 153.226 562.727 153.576 cv
560.799 154.11 556.349 152.406 554.727 153.576 cv
552.589 155.117 551.479 160.943 551.394 163.575 cv
551.289 166.849 554.867 172.97 554.727 176.242 cv
554.621 178.718 551.212 183.105 551.394 185.575 cv
551.602 188.402 554.954 193.367 556.727 195.575 cv
557.826 196.945 560.801 198.919 562.06 200.144 cv
562.678 200.745 563.363 201.572 564.089 202.501 cv
566.704 205.855 569.886 210.65 572.727 211.908 cv
575.47 213.124 581.838 212.718 584.727 211.908 cv
588.495 210.851 595.359 208.167 599.884 204.857 cv
598.51 177.37 589.15 151.989 574.08 130.98 cv
cp
.988235 .988235 .988235 rgb
f
523.853 243.367 mo
518.771 239.65 509.051 245.874 504.062 245.945 cv
498.867 246.019 489.715 239.773 484.729 238.312 cv
479.675 236.829 469.328 234.167 464.062 234.242 cv
459.449 234.306 450.647 237.8 446.062 238.312 cv
441.589 238.81 432.468 237.4 428.062 238.312 cv
423.722 239.21 416.384 244.966 412.062 245.945 cv
408.486 246.755 400.203 248.304 397.395 245.945 cv
394.428 243.452 395.063 234.538 394.729 230.677 cv
394.533 228.411 396.338 223.185 394.729 221.575 cv
391.783 218.628 381.921 220.005 378.062 221.575 cv
375.043 222.804 371.977 230.947 368.729 230.677 cv
365.918 230.445 362.322 224.384 362.062 221.575 cv
361.635 216.972 372.524 208.82 370.062 204.908 cv
368.021 201.663 358.562 204.908 354.729 204.908 cv
352.562 204.908 347.594 206.441 346.062 204.908 cv
342.88 201.726 343.326 190.48 346.062 186.908 cv
350.05 181.7 363.02 176.45 369.395 174.908 cv
372.311 174.202 379.004 173.095 381.395 174.908 cv
384.843 177.523 382.297 189.441 386.062 191.575 cv
387.715 192.511 392.311 191.136 393.395 189.575 cv
395.496 186.55 391.441 178.536 392.062 174.908 cv
392.804 170.572 397.802 163.009 399.395 158.908 cv
401.169 154.339 404.191 144.993 405.395 140.241 cv
406.061 137.612 406.06 131.936 407.395 129.575 cv
409.372 126.081 415.384 119.07 419.395 118.908 cv
422.308 118.791 426.482 125.024 429.395 124.908 cv
433.693 124.736 441.626 118.829 443.395 114.908 cv
445.393 110.479 444.664 99.1687 441.395 95.5749 cv
436.82 90.5457 420.61 86.8279 414.729 90.241 cv
412.45 91.5632 413.432 98.5701 411.395 100.241 cv
409.317 101.945 402.206 103.821 400.729 101.575 cv
398.922 98.8289 407.721 93.5124 407.395 90.241 cv
407.253 88.8191 405.923 86.9207 404.222 85.0271 cv
356.347 106.507 322.845 154.284 322.085 209.976 cv
325.492 215.937 329.797 222.894 332.729 225.575 cv
339.22 231.509 355.331 240.509 364.062 241.575 cv
367.629 242.011 374.595 237.365 378.062 238.312 cv
380.729 239.038 383.851 244.286 386.062 245.945 cv
388.836 248.027 394.712 252.007 398.062 252.908 cv
402.408 254.077 414.534 248.675 416.062 252.908 cv
417.165 255.964 407.443 258.271 406.062 261.212 cv
404.44 264.667 404.488 273.003 406.062 276.48 cv
410.009 285.197 427.913 295.661 436.729 299.38 cv
442.394 301.771 454.719 300.154 462.455 301.97 cv
464.484 302.447 466.202 303.158 467.395 304.241 cv
470.843 307.372 472.514 317.644 472.062 322.28 cv
471.651 326.495 465.301 333.353 464.729 337.548 cv
464.351 340.323 467.141 355.922 468.211 360.381 cv
475.395 360.098 480.875 349.675 487.739 348.339 cv
487.382 345.058 486.99 339.564 488.062 337.548 cv
491.272 331.517 503.101 326.941 506.311 320.908 cv
509 315.853 508.52 304.663 510.729 299.38 cv
512.716 294.628 523.145 289.542 525.395 284.908 cv
527.497 280.577 527.67 271.665 527.879 265.263 cv
527.929 263.74 527.982 262.355 528.062 261.212 cv
528.384 256.64 528.474 246.745 523.853 243.367 cv
cp
f
399.062 207.777 mo
395.006 207.161 386.944 200.851 383.395 202.908 cv
382.341 203.519 382.737 206.753 383.395 207.777 cv
385.871 211.634 395.497 215.011 400.062 215.411 cv
403.836 215.742 414.228 215.351 414.729 211.595 cv
414.983 209.691 409.918 208.271 408.062 207.777 cv
405.887 207.199 401.287 208.115 399.062 207.777 cv
cp
f
422.396 209.159 mo
420.976 210.478 421.002 215.562 422.396 216.908 cv
426.301 220.679 442.557 220.626 444.062 215.411 cv
444.669 213.304 439.037 210.997 436.978 210.242 cv
433.547 208.98 425.075 206.671 422.396 209.159 cv
cp
f
456.727 106.909 mo
463.09 107.87 473.408 95.7732 476.06 89.9089 cv
477.461 86.8103 477.317 79.6316 476.906 73.8123 cv
471.705 73.2214 466.419 72.908 461.061 72.908 cv
452.242 72.908 443.618 73.739 435.254 75.3093 cv
437.889 78.4499 442.359 83.8357 444.062 86.2419 cv
447.563 91.1882 450.735 106.004 456.727 106.909 cv
cp
f
562.727 134.909 mo
564.774 131.992 559.097 124.34 560.06 120.909 cv
560.158 120.561 560.321 120.182 560.527 119.784 cv
560.982 118.905 561.672 117.921 562.505 116.894 cv
560.826 115.102 559.082 113.371 557.311 111.67 cv
538.621 93.7175 514.941 80.9236 488.538 75.6287 cv
490.394 79.9998 494.06 88.4177 496.06 91.5759 cv
497.454 93.7751 500.275 98.6999 502.727 99.5759 cv
506.882 101.06 515.944 94.6521 520.06 96.2419 cv
523.169 97.4431 528.974 103.702 528.062 106.909 cv
526.936 110.869 514.577 109.23 512.727 112.909 cv
511.02 116.304 514.819 124.289 516.727 127.576 cv
518.739 131.042 525.086 136.225 528.062 138.909 cv
530.613 141.21 535.49 146.426 538.727 147.576 cv
540.455 148.189 544.764 148.872 546.06 147.576 cv
547.828 145.808 544.438 139.478 546.06 137.576 cv
548.798 134.365 560.303 138.363 562.727 134.909 cv
cp
f
504.727 138.909 mo
506.637 139.931 512.127 140.667 513.394 138.909 cv
516.167 135.061 509.163 129.978 507.896 125.407 cv
507.486 123.926 507.586 115.09 506.06 114.909 cv
501.914 114.419 498.238 125.763 498.727 129.909 cv
499.044 132.594 502.343 137.633 504.727 138.909 cv
cp
f
0 0 mo
0 100.424 li
6.86611 95.5566 11.4039 87.2145 11.4039 77.7281 cv
11.4039 71.7571 9.5785 66.2608 6.55177 61.7758 cv
9.39152 54.8366 10.9905 47.1776 10.9905 39.1138 cv
10.9905 38.0181 10.9514 36.9414 10.8931 35.8621 cv
14.7648 37.3524 18.9191 38.1662 23.2569 38.1662 cv
24.5602 38.1662 25.8436 38.0922 27.1021 37.9543 cv
31.7984 53.7713 45.6033 65.223 61.916 65.223 cv
80.9206 65.223 96.5276 49.6731 98.3066 29.792 cv
98.9336 29.747 99.5526 29.6729 100.166 29.5745 cv
99.2882 33.3976 98.8226 37.3914 98.8226 41.5041 cv
98.8226 69.0563 119.652 91.3868 145.35 91.3868 cv
159.337 91.3868 171.868 84.7561 180.399 74.2793 cv
185.156 76.9162 190.562 78.4126 196.288 78.4126 cv
205.696 78.4126 214.236 74.3837 220.477 67.8477 cv
230.51 84.413 247.893 95.3799 267.689 95.3799 cv
298.774 95.3799 323.977 68.3555 323.977 35.0216 cv
323.977 33.9977 323.954 32.9779 323.908 31.9589 cv
329.139 36.0777 335.594 38.5119 342.583 38.5119 cv
348.046 38.5119 353.185 37.0276 357.665 34.4173 cv
365.67 42.7418 376.464 48 388.393 48.4458 cv
389.852 60.0164 399.076 68.9367 410.271 68.9367 cv
422.474 68.9367 432.365 58.3304 432.365 45.2451 cv
432.365 39.1325 430.184 33.5787 426.639 29.3748 cv
431.111 23.2639 434.28 16.0083 435.7 8.08649 cv
435.852 7.26409 435.972 6.44183 436.088 5.60314 cv
436.088 0 li
0 0 li
cp
.862745 .917647 .976471 rgb
f
836.697 136.624 mo
836.722 136.272 836.739 135.917 836.739 135.558 cv
836.739 129.196 832.581 124.04 827.457 124.04 cv
823.083 124.04 819.423 127.803 818.445 132.865 cv
816.493 129.986 813.672 128.051 810.483 127.684 cv
810.493 127.449 810.496 127.211 810.496 126.973 cv
810.496 118.847 805.189 112.26 798.645 112.26 cv
794.362 112.26 790.611 115.082 788.526 119.306 cv
787.532 118.968 786.48 118.783 785.398 118.783 cv
780.284 118.783 775.925 122.804 774.263 128.436 cv
773.354 127.301 772.09 126.6 770.697 126.6 cv
768.492 126.6 766.619 128.366 765.937 130.821 cv
765.9 130.817 765.865 130.813 765.826 130.813 cv
763.045 130.813 760.789 133.613 760.789 137.064 cv
760.789 137.362 760.812 137.65 760.844 137.939 cv
760.844 137.981 li
760.851 137.981 li
761.204 140.999 763.296 143.317 765.826 143.317 cv
768.034 143.317 769.905 141.551 770.587 139.096 cv
770.622 139.098 770.658 139.104 770.697 139.104 cv
771.765 139.104 772.756 138.687 773.571 137.981 cv
774.107 137.981 li
790.786 137.981 li
792.124 139.457 793.735 140.561 795.515 141.164 cv
796.168 141.385 796.843 141.539 797.535 141.619 cv
797.901 141.662 798.268 141.686 798.645 141.686 cv
801.662 141.686 804.41 140.283 806.505 137.981 cv
818.39 137.981 li
820.7 137.981 li
836.524 137.981 li
836.83 137.981 li
836.83 136.624 li
836.697 136.624 li
cp
.917647 .952941 .996078 rgb
f
724.332 175.274 mo
724.114 167.546 719 161.366 712.728 161.366 cv
712.147 161.366 711.583 161.418 711.027 161.523 cv
709.998 159.926 708.413 158.902 706.64 158.902 cv
703.535 158.902 701.019 162.027 701.019 165.879 cv
701.019 167.409 701.424 168.82 702.093 169.971 cv
701.463 171.751 701.113 173.714 701.113 175.783 cv
701.113 176.065 701.122 176.342 701.135 176.619 cv
700.271 176.235 699.352 176.029 698.394 176.029 cv
698.105 176.029 697.819 176.046 697.543 176.081 cv
696.5 172.025 693.442 169.086 689.828 169.086 cv
685.615 169.086 682.157 173.077 681.763 178.175 cv
679.36 178.379 677.409 180.62 677.026 183.525 cv
677.009 183.525 li
677.009 183.64 li
676.973 183.942 676.948 184.253 676.948 184.569 cv
676.948 184.886 676.973 185.197 677.009 185.498 cv
677.039 185.741 677.074 185.978 677.126 186.212 cv
684.07 186.212 li
687.109 186.212 li
690.295 186.212 li
690.305 187.233 690.438 188.216 690.675 189.141 cv
691.717 193.196 694.779 196.136 698.394 196.136 cv
702.379 196.136 705.692 192.556 706.364 187.845 cv
706.438 187.313 706.48 186.769 706.487 186.212 cv
717.528 186.212 li
720.741 186.212 li
730.1 186.212 li
730.337 185.369 730.47 184.467 730.47 183.525 cv
730.47 183.519 730.47 183.515 730.47 183.507 cv
730.47 179.159 727.768 175.604 724.332 175.274 cv
cp
f
903.967 281.139 mo
901.515 281.139 899.119 281.355 896.769 281.766 cv
892.405 275.378 885.711 271.277 878.205 271.277 cv
865.072 271.277 854.42 283.782 854.42 299.209 cv
854.42 305.34 856.127 310.989 858.968 315.59 cv
856.307 322.716 854.804 330.585 854.804 338.865 cv
854.804 339.988 854.844 341.095 854.899 342.205 cv
851.263 340.675 847.37 339.836 843.3 339.836 cv
842.081 339.836 840.878 339.912 839.694 340.055 cv
835.29 323.814 822.349 312.052 807.052 312.052 cv
789.234 312.052 774.592 328.019 772.927 348.436 cv
772.338 348.482 771.758 348.561 771.184 348.66 cv
772.003 344.734 772.442 340.631 772.442 336.409 cv
772.442 308.113 752.91 285.18 728.812 285.18 cv
715.698 285.18 703.946 291.991 695.95 302.751 cv
691.485 300.041 686.419 298.505 681.048 298.505 cv
672.227 298.505 664.22 302.642 658.368 309.354 cv
648.959 292.344 632.656 281.081 614.094 281.081 cv
584.946 281.081 561.313 308.835 561.313 343.066 cv
561.313 344.122 561.334 345.169 561.378 346.211 cv
556.47 341.98 550.419 339.482 543.866 339.482 cv
538.743 339.482 533.922 341.005 529.719 343.687 cv
522.216 335.139 512.093 329.737 500.909 329.281 cv
499.538 317.396 490.892 308.236 480.396 308.236 cv
468.949 308.236 459.674 319.131 459.674 332.568 cv
459.674 338.844 461.723 344.552 465.045 348.866 cv
460.853 355.141 457.88 362.591 456.549 370.729 cv
456.406 371.573 456.29 372.42 456.186 373.279 cv
456.186 379.033 li
455.006 386.495 li
452.431 387.43 450.127 389.089 448.271 391.27 cv
442.894 374.037 428.811 361.736 412.265 361.736 cv
408.761 361.736 405.364 362.295 402.148 363.338 cv
395.401 350.405 383.27 341.774 369.415 341.774 cv
348.255 341.774 331.085 361.931 331.085 386.791 cv
331.085 387.518 331.108 388.245 331.129 388.97 cv
320.821 390.088 311.691 396.015 305.376 404.818 cv
302.22 389.337 290.378 377.814 276.232 377.814 cv
259.66 377.814 246.217 393.594 246.217 413.056 cv
246.217 414.16 246.272 415.245 246.354 416.317 cv
245.921 416.317 li
245.921 420 li
449.712 420 li
491.715 420 li
920 420 li
920 284.285 li
914.974 282.248 909.581 281.139 903.967 281.139 cv
cp
.8 .878431 .94902 rgb
f
430.948 117.89 mo
430.161 118.685 429.67 119.765 429.67 120.916 cv
429.938 154.297 li
430.667 144.959 434.592 135.822 441.735 128.678 cv
430.948 117.89 li
cp
.831373 .843137 .788235 rgb
f
429.995 160.832 mo
430.133 159.773 430.395 159.022 431.329 157.896 cv
431.797 157.334 432.5 156.922 433.25 156.732 cv
433.215 155.406 433.702 154.067 434.713 153.054 cv
435.432 152.336 436.313 151.883 437.237 151.691 cv
437.237 150.407 437.727 149.121 438.709 148.14 cv
439.401 147.447 440.27 146.974 441.161 146.771 cv
441.124 145.44 441.608 144.098 442.624 143.084 cv
443.35 142.359 444.241 141.904 445.174 141.715 cv
445.182 141.705 li
445.075 140.297 445.557 138.85 446.635 137.773 cv
447.42 136.988 448.403 136.522 449.422 136.366 cv
449.422 136.366 li
441.735 128.678 li
434.592 135.822 430.667 144.959 429.938 154.297 cv
429.991 160.838 li
429.995 160.832 li
cp
.498039 .792157 .843137 rgb
f
437.239 151.709 mo
437.256 151.687 li
437.25 151.689 437.245 151.69 437.237 151.691 cv
437.237 151.697 437.239 151.703 437.239 151.709 cv
cp
.623529 .631373 .592157 rgb
f
433.44 156.923 mo
433.336 157.027 433.164 157.027 433.061 156.923 cv
428.377 152.241 li
428.274 152.137 428.274 151.966 428.377 151.861 cv
428.483 151.756 428.653 151.756 428.758 151.861 cv
433.44 156.543 li
433.545 156.648 433.545 156.818 433.44 156.923 cv
cp
.203922 .180392 .172549 rgb
f
437.428 151.882 mo
437.323 151.986 437.153 151.986 437.047 151.882 cv
428.317 143.15 li
428.211 143.046 428.211 142.876 428.317 142.769 cv
428.422 142.665 428.592 142.665 428.698 142.769 cv
437.428 151.502 li
437.534 151.606 437.534 151.777 437.428 151.882 cv
cp
f
430.899 117.937 mo
431.692 117.152 432.776 116.662 433.924 116.662 cv
467.305 116.929 li
457.965 117.66 448.831 121.584 441.686 128.725 cv
430.899 117.937 li
cp
.623529 .631373 .592157 rgb
f
473.84 116.986 mo
472.782 117.125 472.03 117.386 470.907 118.322 cv
470.34 118.791 469.93 119.492 469.743 120.242 cv
468.414 120.207 467.077 120.692 466.063 121.706 cv
465.346 122.424 464.893 123.304 464.7 124.23 cv
463.414 124.23 462.129 124.719 461.149 125.701 cv
460.456 126.392 459.983 127.263 459.78 128.152 cv
458.45 128.115 457.108 128.601 456.092 129.615 cv
455.368 130.341 454.911 131.232 454.723 132.167 cv
454.713 132.174 li
453.305 132.067 451.86 132.549 450.782 133.626 cv
449.997 134.412 449.532 135.393 449.374 136.414 cv
449.374 136.414 li
441.686 128.725 li
448.831 121.584 457.965 117.66 467.305 116.929 cv
473.846 116.981 li
473.84 116.986 li
cp
.329412 .72549 .788235 rgb
f
464.717 124.23 mo
464.696 124.248 li
464.698 124.242 464.698 124.236 464.7 124.23 cv
464.706 124.23 464.711 124.231 464.717 124.23 cv
cp
.623529 .631373 .592157 rgb
f
469.932 120.431 mo
470.038 120.326 470.038 120.156 469.932 120.05 cv
465.25 115.369 li
465.147 115.263 464.975 115.263 464.87 115.369 cv
464.766 115.474 464.766 115.645 464.87 115.75 cv
469.551 120.431 li
469.657 120.537 469.827 120.537 469.932 120.431 cv
cp
.203922 .180392 .172549 rgb
f
464.891 124.42 mo
464.997 124.314 464.997 124.144 464.891 124.039 cv
456.161 115.308 li
456.055 115.203 455.883 115.203 455.78 115.308 cv
455.674 115.414 455.674 115.584 455.78 115.689 cv
464.51 124.42 li
464.616 124.524 464.786 124.524 464.891 124.42 cv
cp
f
448.624 116.588 mo
448.598 116.563 448.571 116.547 448.542 116.533 cv
446.75 114.742 li
446.645 114.636 446.475 114.636 446.37 114.742 cv
446.264 114.847 446.264 115.017 446.37 115.122 cv
448.039 116.792 li
443.875 120.955 li
438.739 115.819 li
438.635 115.715 438.465 115.715 438.36 115.819 cv
438.254 115.924 438.254 116.094 438.36 116.199 cv
443.495 121.336 li
439.403 125.427 li
430.362 116.387 li
430.082 116.107 429.627 116.107 429.348 116.387 cv
429.067 116.668 429.067 117.122 429.348 117.402 cv
438.389 126.443 li
434.344 130.486 li
429.209 125.351 li
429.104 125.246 428.934 125.246 428.829 125.351 cv
428.723 125.455 428.723 125.626 428.829 125.731 cv
433.963 130.867 li
429.801 135.031 li
428.131 133.361 li
428.026 133.256 427.856 133.256 427.75 133.361 cv
427.645 133.467 427.645 133.637 427.75 133.741 cv
429.542 135.533 li
429.553 135.562 429.573 135.592 429.596 135.615 cv
429.622 135.639 429.649 135.658 429.678 135.67 cv
440.969 146.962 li
441.075 147.066 441.247 147.066 441.35 146.962 cv
441.456 146.857 441.456 146.685 441.35 146.58 cv
430.18 135.411 li
434.344 131.248 li
444.993 141.895 li
445.096 142 445.268 142 445.374 141.895 cv
445.477 141.791 445.477 141.621 445.374 141.515 cv
434.725 130.867 li
438.768 126.823 li
454.768 142.822 li
455.049 143.103 455.504 143.103 455.784 142.822 cv
456.063 142.543 456.063 142.089 455.784 141.808 cv
439.784 125.808 li
443.875 121.716 li
454.524 132.364 li
454.629 132.469 454.799 132.469 454.905 132.364 cv
455.01 132.26 455.01 132.089 454.905 131.983 cv
444.256 121.336 li
448.42 117.172 li
459.59 128.342 li
459.694 128.447 459.866 128.447 459.969 128.342 cv
460.075 128.237 460.075 128.066 459.969 127.961 cv
448.678 116.67 li
448.667 116.64 448.649 116.611 448.624 116.588 cv
cp
f
428.807 115.761 mo
427.889 116.688 426.62 118.884 426.62 120.611 cv
426.629 121.708 li
426.618 121.707 li
426.946 157.783 li
426.948 159.467 428.311 160.832 429.995 160.833 cv
429.688 124.297 li
429.704 120.597 li
429.704 119.976 430.405 118.531 430.999 117.931 cv
428.807 115.761 li
cp
.772549 .129412 .105882 rgb
f
428.77 115.799 mo
429.698 114.882 431.893 113.611 433.62 113.611 cv
434.717 113.621 li
434.717 113.608 li
470.792 113.937 li
472.475 113.937 473.84 115.302 473.84 116.986 cv
437.305 116.678 li
433.606 116.695 li
432.983 116.695 431.539 117.397 430.94 117.99 cv
428.77 115.799 li
cp
.580392 .0980392 .0784314 rgb
f
679.825 145.832 mo
679.825 144.697 681.878 137.82 681.878 137.82 cv
681.878 137.82 683.933 144.697 683.933 145.832 cv
683.933 146.966 683.014 147.884 681.878 147.884 cv
680.744 147.884 679.825 146.966 679.825 145.832 cv
cp
.772549 .129412 .105882 rgb
f
680.974 145.389 mo
680.974 144.888 681.878 141.86 681.878 141.86 cv
681.878 141.86 682.785 144.888 682.785 145.389 cv
682.785 145.887 682.378 146.292 681.878 146.292 cv
681.379 146.292 680.974 145.887 680.974 145.389 cv
cp
.835294 1 .929412 rgb
f
679.69 150.767 mo
678.848 151.236 li
671.992 138.935 li
672.832 138.466 li
679.69 150.767 li
cp
.301961 .266667 .254902 rgb
f
683.933 150.767 mo
684.775 151.236 li
691.633 138.935 li
690.792 138.466 li
683.933 150.767 li
cp
f
686.345 156.898 mo
686.345 157.232 686.075 157.503 685.741 157.503 cv
677.844 157.503 li
677.51 157.503 677.24 157.232 677.24 156.898 cv
677.24 149.003 li
677.24 148.669 677.51 148.397 677.844 148.397 cv
685.741 148.397 li
686.075 148.397 686.345 148.669 686.345 149.003 cv
686.345 156.898 li
cp
.203922 .180392 .172549 rgb
f
664.973 129.476 mo
667.26 133.262 670.095 137.071 672.788 140.389 cv
690.797 140.389 li
693.49 137.071 696.325 133.262 698.612 129.476 cv
664.973 129.476 li
cp
.580392 .0980392 .0784314 rgb
f
661.147 121.219 mo
661.115 121.219 661.085 121.216 661.055 121.216 cv
661.852 123.811 663.258 126.637 664.973 129.476 cv
665.302 129.476 li
665.307 126.511 665.638 123.616 666.236 120.802 cv
664.579 121.073 662.88 121.219 661.147 121.219 cv
cp
.623529 .631373 .592157 rgb
f
666.236 120.802 mo
665.638 123.616 665.307 126.511 665.302 129.476 cv
674.985 129.476 li
674.985 125.39 675.231 121.427 675.69 117.648 cv
672.778 119.172 669.597 120.255 666.236 120.802 cv
cp
.121569 .490196 .552941 rgb
f
691.5 97.9172 mo
690.976 99.8791 690.269 101.766 689.395 103.558 cv
694.989 110.994 698.27 119.907 698.283 129.503 cv
698.612 129.503 li
701.313 125.034 703.247 120.6 703.247 117.047 cv
703.247 108.693 698.47 101.46 691.5 97.9172 cv
cp
.623529 .631373 .592157 rgb
f
686.313 108.612 mo
687.775 114.905 688.6 121.997 688.6 129.503 cv
698.283 129.503 li
698.27 119.907 694.989 110.994 689.395 103.558 cv
688.525 105.343 687.492 107.035 686.313 108.612 cv
cp
.121569 .490196 .552941 rgb
f
675.69 117.648 mo
675.231 121.427 674.985 125.39 674.985 129.476 cv
681.792 129.476 li
681.792 129.503 li
688.6 129.503 li
688.6 121.997 687.775 114.905 686.313 108.612 cv
683.504 112.363 679.872 115.46 675.69 117.648 cv
cp
.623529 .631373 .592157 rgb
f
666.236 120.802 mo
668.328 110.973 673.861 102.219 681.706 95.5686 cv
669.897 95.615 660.337 105.2 660.337 117.022 cv
660.337 118.316 660.598 119.728 661.055 121.216 cv
661.085 121.216 661.115 121.219 661.147 121.219 cv
662.88 121.219 664.579 121.073 666.236 120.802 cv
cp
.831373 .843137 .788235 rgb
f
681.706 95.5686 mo
673.861 102.219 668.328 110.973 666.236 120.802 cv
669.597 120.255 672.778 119.172 675.69 117.648 cv
676.728 109.104 678.859 101.505 681.746 95.5671 cv
681.731 95.5671 681.72 95.5686 681.706 95.5686 cv
cp
.160784 .654902 .737255 rgb
f
689.395 103.558 mo
690.269 101.766 690.976 99.8791 691.5 97.9172 cv
688.608 96.4465 685.341 95.6067 681.878 95.5935 cv
684.705 97.989 687.22 100.666 689.395 103.558 cv
cp
.831373 .843137 .788235 rgb
f
681.878 95.5935 mo
681.866 95.5935 681.854 95.593 681.842 95.593 cv
683.659 99.3328 685.179 103.732 686.313 108.612 cv
687.492 107.035 688.525 105.343 689.395 103.558 cv
687.22 100.666 684.705 97.989 681.878 95.5935 cv
cp
.160784 .654902 .737255 rgb
f
681.792 95.592 mo
681.792 95.5657 li
681.776 95.5657 681.761 95.5671 681.746 95.5671 cv
678.859 101.505 676.728 109.104 675.69 117.648 cv
679.872 115.46 683.504 112.363 686.313 108.612 cv
685.179 103.732 683.659 99.3328 681.842 95.593 cv
681.825 95.593 681.809 95.592 681.792 95.592 cv
cp
.831373 .843137 .788235 rgb
f
586.349 210.978 mo
582.07 210.978 li
582.07 186.131 li
586.349 186.131 li
586.349 210.978 li
cp
.623529 .631373 .592157 rgb
f
703.862 219.363 mo
685.034 219.363 li
665.798 207.769 li
579.015 207.769 li
579.015 219.363 li
557.208 219.363 li
557.208 234.793 li
710.134 237.025 li
703.862 219.363 li
cp
.160784 .654902 .737255 rgb
f
622.147 229.924 mo
536.203 221.215 li
558.664 243.962 li
727.26 243.962 li
727.26 229.924 li
622.147 229.924 li
cp
.180392 .352941 .709804 rgb
f
596.126 207.654 mo
608.504 207.654 li
608.504 198.409 li
596.126 198.409 li
596.126 207.654 li
cp
.772549 .129412 .105882 rgb
f
596.126 192.223 mo
596.126 198.409 li
608.504 198.409 li
602.316 192.223 li
596.126 192.223 li
cp
.203922 .180392 .172549 rgb
f
644.027 207.654 mo
656.404 207.654 li
656.404 198.409 li
644.027 198.409 li
644.027 207.654 li
cp
.772549 .129412 .105882 rgb
f
644.027 192.223 mo
644.027 198.409 li
656.404 198.409 li
650.213 192.223 li
644.027 192.223 li
cp
.203922 .180392 .172549 rgb
f
569.076 234.151 mo
562.048 234.151 li
562.048 231.025 li
569.076 231.025 li
569.076 234.151 li
cp
.772549 .129412 .105882 rgb
f
579.62 234.151 mo
572.592 234.151 li
572.592 231.025 li
579.62 231.025 li
579.62 234.151 li
cp
f
590.163 234.151 mo
583.135 234.151 li
583.135 231.025 li
590.163 231.025 li
590.163 234.151 li
cp
f
678.137 222.068 mo
596.126 222.068 li
596.126 218.945 li
678.137 218.945 li
678.137 222.068 li
cp
.498039 .792157 .843137 rgb
f
666.412 215.887 mo
596.126 215.887 li
596.126 212.764 li
666.412 212.764 li
666.412 215.887 li
cp
f
781.417 230.549 mo
768.012 230.549 li
768.012 172.551 li
766.079 172.551 li
766.079 230.549 li
756.039 230.549 li
750.62 236.082 li
781.539 236.082 li
781.417 230.549 li
cp
.160784 .654902 .737255 rgb
f
794.574 236.082 mo
733.036 236.082 li
734.952 240.021 li
794.574 240.021 li
794.574 236.082 li
cp
.831373 .843137 .788235 rgb
f
734.952 240.021 mo
736.816 243.962 li
794.574 243.962 li
794.574 240.021 li
734.952 240.021 li
cp
.431373 .14902 .196078 rgb
f
794.574 236.082 mo
784.191 236.082 li
784.191 230.549 li
794.574 230.549 li
794.574 236.082 li
cp
.203922 .180392 .172549 rgb
f
765.322 234.186 mo
757.248 234.186 li
757.248 232.254 li
765.322 232.254 li
765.322 234.186 li
cp
f
776.915 234.186 mo
768.845 234.186 li
768.845 232.254 li
776.915 232.254 li
776.915 234.186 li
cp
f
766.079 214.575 mo
766.079 180.579 li
745.721 227.352 li
750.067 220.358 757.479 215.472 766.079 214.575 cv
cp
.772549 .129412 .105882 rgb
f
769.868 214.45 mo
769.868 177.032 li
768.012 172.551 li
768.012 214.45 li
768.321 214.44 768.63 214.426 768.941 214.426 cv
769.25 214.426 769.56 214.44 769.868 214.45 cv
cp
.580392 .0980392 .0784314 rgb
f
789.809 224.123 mo
789.817 224.123 li
769.868 177.032 li
769.868 214.45 li
777.862 214.717 784.985 218.415 789.809 224.123 cv
cp
.772549 .129412 .105882 rgb
f
766.079 227.593 mo
766.079 214.575 li
757.479 215.472 750.067 220.358 745.721 227.352 cv
745.618 227.593 li
766.079 227.593 li
cp
.498039 .792157 .843137 rgb
f
769.868 224.123 mo
769.868 214.45 li
769.56 214.44 769.25 214.426 768.941 214.426 cv
768.63 214.426 768.321 214.44 768.012 214.45 cv
768.012 224.123 li
769.868 224.123 li
cp
.329412 .72549 .788235 rgb
f
769.868 214.45 mo
769.868 224.123 li
789.809 224.123 li
784.985 218.415 777.862 214.717 769.868 214.45 cv
cp
.498039 .792157 .843137 rgb
f
879.595 234.887 mo
847.038 234.887 li
847.038 215.846 li
879.595 215.846 li
879.595 234.887 li
cp
.203922 .180392 .172549 rgb
f
904.396 229.983 mo
904.396 233.214 901.776 235.834 898.545 235.834 cv
897.247 235.834 li
894.012 235.834 891.393 233.214 891.393 229.983 cv
891.393 225.929 li
891.393 222.699 894.012 220.08 897.247 220.08 cv
898.545 220.08 li
901.776 220.08 904.396 222.699 904.396 225.929 cv
904.396 229.983 li
cp
f
859.515 213.9 mo
858.442 213.9 857.356 213.957 856.263 214.057 cv
846.885 214.917 837.009 219.196 830.777 222.376 cv
826.858 224.376 824.371 225.942 824.371 225.942 cv
852.353 225.942 li
861.731 225.083 871.606 220.807 877.838 217.624 cv
879.506 216.772 878.892 217.103 879.964 216.51 cv
882.919 214.873 882.364 214.037 881.15 214.037 cv
880.754 214.037 859.515 213.9 859.515 213.9 cv
cp
.160784 .654902 .737255 rgb
f
855.698 216.709 mo
855.062 216.709 854.423 216.74 853.778 216.799 cv
848.247 217.307 842.425 219.832 838.75 221.705 cv
836.44 222.886 834.974 223.809 834.974 223.809 cv
851.473 223.809 li
857.002 223.301 862.824 220.779 866.5 218.904 cv
868.809 217.723 870.276 216.799 870.276 216.799 cv
855.698 216.709 li
cp
.203922 .180392 .172549 rgb
f
827.822 243.827 mo
894.404 243.827 li
896.572 234.327 li
809.186 234.327 li
813.02 238.975 819.102 243.827 827.822 243.827 cv
cp
.580392 .0980392 .0784314 rgb
f
885.308 225.942 mo
804.04 225.942 li
804.04 225.942 805.66 230.05 809.186 234.327 cv
896.572 234.327 li
897.198 229.707 892.49 225.942 885.308 225.942 cv
cp
.180392 .352941 .709804 rgb
f
142.994 163.317 mo
142.994 166.678 147.67 169.438 151.674 169.438 cv
154.727 169.438 li
182.533 169.438 li
203.567 169.438 li
208.584 169.438 211.846 167.633 211.846 167.633 cv
212.963 167.097 li
209.183 163.317 li
142.994 163.317 li
cp
.580392 .0980392 .0784314 rgb
f
220.856 163.317 mo
220.856 163.317 li
212.963 167.097 li
212.963 167.097 li
220.856 163.317 li
cp
.623529 .631373 .592157 rgb
f
220.856 163.317 mo
224.175 161.727 li
224.175 161.727 li
220.856 163.317 li
220.856 163.317 li
cp
f
209.183 163.317 mo
212.963 167.097 li
220.856 163.317 li
209.183 163.317 li
cp
.431373 .14902 .196078 rgb
f
199.053 169.425 mo
179.735 169.438 li
179.735 165.373 li
193.501 163.873 li
199.053 169.425 li
cp
f
226.311 154.644 mo
154.727 154.644 li
154.727 154.658 li
154.612 154.658 li
151.977 154.658 149.484 155.779 147.487 157.258 cv
151.411 157.258 li
151.887 157.258 152.272 157.644 152.272 158.119 cv
152.272 158.595 151.887 158.98 151.411 158.98 cv
145.518 158.98 li
143.951 160.595 142.994 162.285 142.994 163.317 cv
209.183 163.317 li
206.357 160.492 li
222.939 160.492 li
224.175 161.727 li
226.689 160.522 li
226.986 160.358 227.239 160.201 227.464 160.051 cv
227.464 154.778 li
227.141 154.696 226.759 154.644 226.311 154.644 cv
cp
.831373 .843137 .788235 rgb
f
152.272 158.119 mo
152.272 157.644 151.887 157.258 151.411 157.258 cv
147.487 157.258 li
146.758 157.797 146.096 158.383 145.518 158.98 cv
151.411 158.98 li
151.887 158.98 152.272 158.595 152.272 158.119 cv
cp
.203922 .180392 .172549 rgb
f
228.99 156.111 mo
228.979 155.707 228.553 155.057 227.464 154.778 cv
227.464 160.051 li
228.841 159.137 228.977 158.52 228.99 158.044 cv
229.002 157.529 229.002 156.621 228.99 156.111 cv
cp
f
220.129 138.828 mo
208.997 154.644 li
221.334 154.644 li
225.036 138.828 li
220.129 138.828 li
cp
.160784 .654902 .737255 rgb
f
226.501 140.549 mo
221.652 140.549 li
220.673 140.549 219.878 141.344 219.878 142.322 cv
228.275 142.322 li
228.275 141.344 227.48 140.549 226.501 140.549 cv
cp
.831373 .843137 .788235 rgb
f
179.735 171.574 mo
180.117 171.524 li
181.612 171.17 182.871 170.668 182.871 169.438 cv
179.735 169.438 li
179.735 171.574 li
cp
.301961 .266667 .254902 rgb
f
180.117 167.353 mo
179.735 167.301 li
179.735 169.438 li
182.871 169.438 li
182.871 168.354 181.571 167.729 180.117 167.353 cv
cp
.203922 .180392 .172549 rgb
f
193.944 165.373 mo
193.944 163.799 192.667 162.522 191.092 162.522 cv
174.951 162.522 li
173.403 162.522 172.146 163.755 172.104 165.293 cv
172.102 165.293 172.1 165.293 172.099 165.293 cv
172.099 169.438 li
179.735 169.438 li
179.735 167.301 li
179.735 165.373 li
193.944 165.373 li
cp
.160784 .654902 .737255 rgb
f
172.099 169.438 mo
172.099 173.582 li
172.298 173.621 172.512 173.647 172.753 173.647 cv
179.735 172.705 li
179.735 171.574 li
179.735 169.438 li
172.099 169.438 li
cp
.121569 .490196 .552941 rgb
f
172.099 165.293 mo
170.38 165.629 170.16 167.355 170.16 169.438 cv
172.099 169.438 li
172.099 165.293 li
cp
.772549 .129412 .105882 rgb
f
170.16 169.438 mo
170.16 171.522 170.38 173.246 172.099 173.582 cv
172.099 169.438 li
170.16 169.438 li
cp
.580392 .0980392 .0784314 rgb
f
219.672 152.36 mo
219.399 152.633 218.954 152.633 218.681 152.36 cv
215.392 149.07 li
215.118 148.796 215.118 148.352 215.392 148.077 cv
215.392 148.077 li
215.665 147.804 216.11 147.804 216.383 148.077 cv
219.672 151.367 li
219.947 151.641 219.947 152.084 219.672 152.36 cv
219.672 152.36 li
cp
.772549 .129412 .105882 rgb
f
221.503 149.553 mo
221.23 149.827 220.785 149.827 220.511 149.553 cv
217.222 146.264 li
216.948 145.99 216.948 145.545 217.222 145.272 cv
217.222 145.272 li
217.496 144.998 217.94 144.998 218.213 145.272 cv
221.503 148.561 li
221.777 148.835 221.777 149.279 221.503 149.553 cv
221.503 149.553 li
cp
f
223.395 145.84 mo
219.878 142.322 li
224.218 142.322 li
223.395 145.84 li
cp
.121569 .490196 .552941 rgb
f
157.134 161.169 mo
157.134 161.571 156.809 161.896 156.407 161.896 cv
154.96 161.896 li
154.558 161.896 154.233 161.571 154.233 161.169 cv
154.233 157.985 li
154.233 157.583 154.558 157.258 154.96 157.258 cv
156.407 157.258 li
156.809 157.258 157.134 157.583 157.134 157.985 cv
157.134 161.169 li
cp
.623529 .631373 .592157 rgb
f
160.751 158.588 mo
160.751 158.819 160.564 159.006 160.333 159.006 cv
159.503 159.006 li
159.273 159.006 159.086 158.819 159.086 158.588 cv
159.086 157.675 li
159.086 157.446 159.273 157.258 159.503 157.258 cv
160.333 157.258 li
160.564 157.258 160.751 157.446 160.751 157.675 cv
160.751 158.588 li
cp
.203922 .180392 .172549 rgb
f
164.08 158.588 mo
164.08 158.819 163.893 159.006 163.663 159.006 cv
162.833 159.006 li
162.602 159.006 162.416 158.819 162.416 158.588 cv
162.416 157.675 li
162.416 157.446 162.602 157.258 162.833 157.258 cv
163.663 157.258 li
163.893 157.258 164.08 157.446 164.08 157.675 cv
164.08 158.588 li
cp
f
167.41 158.588 mo
167.41 158.819 167.223 159.006 166.993 159.006 cv
166.162 159.006 li
165.932 159.006 165.745 158.819 165.745 158.588 cv
165.745 157.675 li
165.745 157.446 165.932 157.258 166.162 157.258 cv
166.993 157.258 li
167.223 157.258 167.41 157.446 167.41 157.675 cv
167.41 158.588 li
cp
f
170.739 158.588 mo
170.739 158.819 170.553 159.006 170.322 159.006 cv
169.491 159.006 li
169.261 159.006 169.075 158.819 169.075 158.588 cv
169.075 157.675 li
169.075 157.446 169.261 157.258 169.491 157.258 cv
170.322 157.258 li
170.553 157.258 170.739 157.446 170.739 157.675 cv
170.739 158.588 li
cp
f
174.069 158.588 mo
174.069 158.819 173.882 159.006 173.652 159.006 cv
172.821 159.006 li
172.59 159.006 172.404 158.819 172.404 158.588 cv
172.404 157.675 li
172.404 157.446 172.59 157.258 172.821 157.258 cv
173.652 157.258 li
173.882 157.258 174.069 157.446 174.069 157.675 cv
174.069 158.588 li
cp
f
177.398 158.588 mo
177.398 158.819 177.211 159.006 176.981 159.006 cv
176.15 159.006 li
175.92 159.006 175.733 158.819 175.733 158.588 cv
175.733 157.675 li
175.733 157.446 175.92 157.258 176.15 157.258 cv
176.981 157.258 li
177.211 157.258 177.398 157.446 177.398 157.675 cv
177.398 158.588 li
cp
f
180.727 158.588 mo
180.727 158.819 180.54 159.006 180.311 159.006 cv
179.48 159.006 li
179.249 159.006 179.063 158.819 179.063 158.588 cv
179.063 157.675 li
179.063 157.446 179.249 157.258 179.48 157.258 cv
180.311 157.258 li
180.54 157.258 180.727 157.446 180.727 157.675 cv
180.727 158.588 li
cp
f
184.057 158.588 mo
184.057 158.819 183.87 159.006 183.64 159.006 cv
182.809 159.006 li
182.58 159.006 182.392 158.819 182.392 158.588 cv
182.392 157.675 li
182.392 157.446 182.58 157.258 182.809 157.258 cv
183.64 157.258 li
183.87 157.258 184.057 157.446 184.057 157.675 cv
184.057 158.588 li
cp
f
187.386 158.588 mo
187.386 158.819 187.2 159.006 186.969 159.006 cv
186.139 159.006 li
185.909 159.006 185.722 158.819 185.722 158.588 cv
185.722 157.675 li
185.722 157.446 185.909 157.258 186.139 157.258 cv
186.969 157.258 li
187.2 157.258 187.386 157.446 187.386 157.675 cv
187.386 158.588 li
cp
f
190.715 158.588 mo
190.715 158.819 190.529 159.006 190.299 159.006 cv
189.468 159.006 li
189.238 159.006 189.052 158.819 189.052 158.588 cv
189.052 157.675 li
189.052 157.446 189.238 157.258 189.468 157.258 cv
190.299 157.258 li
190.529 157.258 190.715 157.446 190.715 157.675 cv
190.715 158.588 li
cp
f
194.045 158.588 mo
194.045 158.819 193.858 159.006 193.628 159.006 cv
192.797 159.006 li
192.567 159.006 192.381 158.819 192.381 158.588 cv
192.381 157.675 li
192.381 157.446 192.567 157.258 192.797 157.258 cv
193.628 157.258 li
193.858 157.258 194.045 157.446 194.045 157.675 cv
194.045 158.588 li
cp
f
197.375 158.588 mo
197.375 158.819 197.188 159.006 196.958 159.006 cv
196.127 159.006 li
195.896 159.006 195.71 158.819 195.71 158.588 cv
195.71 157.675 li
195.71 157.446 195.896 157.258 196.127 157.258 cv
196.958 157.258 li
197.188 157.258 197.375 157.446 197.375 157.675 cv
197.375 158.588 li
cp
f
200.704 158.588 mo
200.704 158.819 200.518 159.006 200.287 159.006 cv
199.457 159.006 li
199.226 159.006 199.04 158.819 199.04 158.588 cv
199.04 157.675 li
199.04 157.446 199.226 157.258 199.457 157.258 cv
200.287 157.258 li
200.518 157.258 200.704 157.446 200.704 157.675 cv
200.704 158.588 li
cp
f
221.334 154.644 mo
208.997 154.644 li
214.844 160.492 li
206.357 160.492 li
209.183 163.317 li
220.856 163.317 li
224.175 161.727 li
227.021 160.33 li
221.334 154.644 li
cp
.623529 .631373 .592157 rgb
f
220.087 157.639 mo
209.209 157.639 li
207.634 157.639 206.357 158.916 206.357 160.492 cv
222.939 160.492 li
222.939 158.916 221.663 157.639 220.087 157.639 cv
cp
.160784 .654902 .737255 rgb
f
362.902 237.629 mo
409.405 237.629 li
409.405 231.07 li
362.902 231.07 li
362.902 237.629 li
cp
.301961 .266667 .254902 rgb
f
395.348 238.88 mo
395.348 241.74 397.667 244.059 400.526 244.059 cv
403.386 244.059 405.705 241.74 405.705 238.88 cv
405.705 236.022 403.386 233.701 400.526 233.701 cv
397.667 233.701 395.348 236.022 395.348 238.88 cv
cp
.203922 .180392 .172549 rgb
f
367.032 238.86 mo
367.032 241.72 369.35 244.038 372.21 244.038 cv
375.069 244.038 377.387 241.72 377.387 238.86 cv
377.387 236.001 375.069 233.683 372.21 233.683 cv
369.35 233.683 367.032 236.001 367.032 238.86 cv
cp
f
373.983 224.139 mo
376.125 222.578 377.497 221.849 379.578 221.849 cv
389.099 221.849 li
398.621 221.849 li
400.701 221.849 402.073 222.578 404.216 224.139 cv
406.241 225.613 412.132 229.813 412.132 229.813 cv
389.099 229.815 li
366.068 229.813 li
366.068 229.813 371.957 225.613 373.983 224.139 cv
cp
.772549 .129412 .105882 rgb
f
397.314 223.769 mo
398.742 223.769 399.684 224.232 401.155 225.22 cv
402.544 226.156 404.903 227.935 404.903 227.935 cv
389.099 227.935 li
387.505 227.935 li
391.67 223.769 li
397.314 223.769 li
cp
.831373 .843137 .788235 rgb
f
377.038 225.22 mo
378.51 224.232 379.452 223.769 380.879 223.769 cv
389.185 223.769 li
391.67 223.769 li
387.505 227.935 li
373.295 227.935 li
373.295 227.935 375.651 226.156 377.038 225.22 cv
cp
.945098 .941176 .941176 rgb
f
403.53 238.88 mo
403.53 240.537 402.184 241.882 400.526 241.882 cv
400.526 235.878 li
402.184 235.878 403.53 237.223 403.53 238.88 cv
cp
.831373 .843137 .788235 rgb
f
400.526 235.878 mo
400.526 241.882 li
398.869 241.882 397.524 240.537 397.524 238.88 cv
397.524 237.223 398.869 235.878 400.526 235.878 cv
cp
.945098 .941176 .941176 rgb
f
375.211 238.86 mo
375.211 240.518 373.868 241.862 372.21 241.862 cv
372.21 235.86 li
373.868 235.86 375.211 237.203 375.211 238.86 cv
cp
.831373 .843137 .788235 rgb
f
372.21 235.86 mo
372.21 241.862 li
370.552 241.862 369.208 240.518 369.208 238.86 cv
369.208 237.203 370.552 235.86 372.21 235.86 cv
cp
.945098 .941176 .941176 rgb
f
412.132 238.86 mo
407.033 238.86 li
407.026 236.928 406.175 235.195 404.833 234.007 cv
412.132 234.007 li
412.132 238.86 li
cp
.772549 .129412 .105882 rgb
f
362.003 229.813 mo
378.716 229.813 li
394.021 229.813 li
412.132 229.813 li
412.132 234.007 li
404.833 234.007 li
403.685 232.992 402.178 232.374 400.526 232.374 cv
398.874 232.374 397.367 232.992 396.218 234.007 cv
394.876 235.195 394.027 236.928 394.021 238.86 cv
378.716 238.86 li
378.716 238.86 li
378.716 236.93 377.874 235.199 376.54 234.007 cv
375.389 232.979 373.872 232.355 372.21 232.355 cv
370.546 232.355 369.031 232.979 367.879 234.007 cv
359.96 234.007 li
359.96 232.01 li
359.96 232.01 359.96 229.813 362.003 229.813 cv
cp
.160784 .654902 .737255 rgb
f
367.879 234.007 mo
366.546 235.199 365.705 236.93 365.705 238.86 cv
365.705 238.86 li
359.96 238.86 li
359.96 234.007 li
367.879 234.007 li
cp
.772549 .129412 .105882 rgb
f
482.365 209.513 mo
475.1 212.627 li
470.058 221.332 li
457.258 226.673 li
457.258 235.713 li
483.702 235.713 li
483.702 209.153 li
483.422 209.153 482.507 209.433 482.365 209.513 cv
cp
f
530.132 211.913 mo
530.132 210.389 528.897 209.153 527.373 209.153 cv
483.702 209.153 li
483.702 235.713 li
525.94 235.713 li
530.132 230.209 li
530.132 211.913 li
cp
f
527.188 230.209 mo
523.807 235.713 li
462.562 235.713 li
459.2 225.863 li
457.258 226.673 li
457.258 235.713 li
457.258 237.293 li
457.258 238.874 li
483.702 238.874 li
527.373 238.874 li
528.897 238.874 530.132 237.639 530.132 236.115 cv
530.132 235.713 li
530.132 230.209 li
527.188 230.209 li
cp
.160784 .654902 .737255 rgb
f
466.376 238.873 mo
466.376 241.738 468.698 244.059 471.561 244.059 cv
474.424 244.059 476.746 241.738 476.746 238.873 cv
476.746 236.01 474.424 233.688 471.561 233.688 cv
468.698 233.688 466.376 236.01 466.376 238.873 cv
cp
.203922 .180392 .172549 rgb
f
474.568 238.873 mo
474.568 240.533 473.222 241.88 471.561 241.88 cv
471.561 235.868 li
473.222 235.868 474.568 237.211 474.568 238.873 cv
cp
.831373 .843137 .788235 rgb
f
471.561 235.868 mo
471.561 241.88 li
469.9 241.88 468.555 240.533 468.555 238.873 cv
468.555 237.211 469.9 235.868 471.561 235.868 cv
cp
.945098 .941176 .941176 rgb
f
514.514 238.873 mo
514.514 241.738 516.834 244.059 519.698 244.059 cv
522.56 244.059 524.883 241.738 524.883 238.873 cv
524.883 236.01 522.56 233.688 519.698 233.688 cv
516.834 233.688 514.514 236.01 514.514 238.873 cv
cp
.203922 .180392 .172549 rgb
f
522.704 238.873 mo
522.704 240.533 521.358 241.88 519.698 241.88 cv
519.698 235.868 li
521.358 235.868 522.704 237.211 522.704 238.873 cv
cp
.831373 .843137 .788235 rgb
f
519.698 235.868 mo
519.698 241.88 li
518.038 241.88 516.693 240.533 516.693 238.873 cv
516.693 237.211 518.038 235.868 519.698 235.868 cv
cp
.945098 .941176 .941176 rgb
f
527.882 224.787 mo
485.852 224.787 li
485.852 209.153 li
483.702 209.153 li
483.702 224.787 li
483.702 226.939 li
483.702 235.713 li
485.852 235.713 li
485.852 226.939 li
527.882 226.939 li
527.882 224.787 li
cp
.580392 .0980392 .0784314 rgb
f
530.132 217.586 mo
527.188 217.586 li
527.188 230.209 li
530.132 230.209 li
530.132 217.586 li
cp
.431373 .14902 .196078 rgb
f
481.412 216.24 mo
473.754 223.898 li
481.412 223.898 li
481.412 216.24 li
cp
.831373 .843137 .788235 rgb
f
481.412 214.258 mo
477.301 214.258 li
471.835 223.898 li
473.754 223.898 li
481.412 216.24 li
481.412 214.258 li
cp
.945098 .941176 .941176 rgb
f
428.202 238.118 mo
423.763 238.118 li
426.887 234.995 li
426.566 234.674 li
423.437 237.802 li
423.437 233.341 li
422.984 233.341 li
422.984 237.802 li
420.045 234.865 li
419.724 235.185 li
422.657 238.118 li
418.257 238.118 li
418.257 238.574 li
422.667 238.574 li
419.535 241.705 li
419.855 242.028 li
422.984 238.899 li
422.984 243.283 li
423.437 243.283 li
423.437 238.899 li
426.754 242.217 li
427.077 241.895 li
423.754 238.574 li
428.202 238.574 li
428.202 238.118 li
cp
.160784 .654902 .737255 rgb
f
423.201 233.769 mo
420.674 233.769 418.622 235.821 418.622 238.345 cv
418.622 240.868 420.674 242.923 423.201 242.923 cv
425.723 242.923 427.776 240.868 427.776 238.345 cv
427.776 235.821 425.723 233.769 423.201 233.769 cv
cp
423.201 244.059 mo
420.048 244.059 417.486 241.495 417.486 238.345 cv
417.486 235.195 420.048 232.631 423.201 232.631 cv
426.351 232.631 428.913 235.195 428.913 238.345 cv
428.913 241.495 426.351 244.059 423.201 244.059 cv
cp
.203922 .180392 .172549 rgb
f
451.27 238.574 mo
451.27 238.118 li
447.959 238.118 li
447.911 237.827 447.786 237.565 447.609 237.343 cv
449.956 234.995 li
449.634 234.674 li
447.282 237.027 li
447.059 236.863 446.794 236.759 446.507 236.721 cv
446.507 233.341 li
446.051 233.341 li
446.051 236.722 li
445.766 236.76 445.502 236.867 445.281 237.031 cv
443.114 234.865 li
442.792 235.185 li
444.956 237.348 li
444.78 237.569 444.657 237.83 444.609 238.118 cv
441.326 238.118 li
441.326 238.574 li
444.597 238.574 li
444.627 238.881 444.736 239.163 444.908 239.401 cv
442.602 241.705 li
442.924 242.028 li
445.223 239.727 li
445.456 239.915 445.742 240.041 446.051 240.085 cv
446.051 243.283 li
446.507 243.283 li
446.507 240.085 li
446.82 240.043 447.103 239.92 447.341 239.733 cv
449.824 242.217 li
450.145 241.895 li
447.657 239.406 li
447.831 239.168 447.939 238.883 447.971 238.574 cv
451.27 238.574 li
cp
.160784 .654902 .737255 rgb
f
446.268 233.769 mo
443.746 233.769 441.691 235.821 441.691 238.345 cv
441.691 240.868 443.746 242.923 446.268 242.923 cv
448.792 242.923 450.846 240.868 450.846 238.345 cv
450.846 235.821 448.792 233.769 446.268 233.769 cv
cp
446.268 244.059 mo
443.119 244.059 440.554 241.495 440.554 238.345 cv
440.554 235.195 443.119 232.631 446.268 232.631 cv
449.42 232.631 451.982 235.195 451.982 238.345 cv
451.982 241.495 449.42 244.059 446.268 244.059 cv
cp
.203922 .180392 .172549 rgb
f
444.988 237.833 mo
436.25 237.833 li
438.974 231.819 li
444.988 237.833 li
cp
435.308 237.435 mo
429.506 231.631 li
437.936 231.631 li
435.308 237.435 li
cp
452.164 233.661 mo
452.886 232.937 li
451.167 231.216 448.878 230.269 446.446 230.269 cv
444.376 230.269 442.415 230.952 440.816 232.214 cv
439.424 230.824 li
440.194 229.094 li
439.171 228.943 li
438.398 230.609 li
428.483 230.609 li
427.607 229.734 li
428.008 228.847 li
428.015 228.85 li
428.366 228.06 li
428.634 227.467 li
428.63 227.465 li
429.104 226.398 li
429.306 225.94 429.317 225.431 429.138 224.963 cv
428.959 224.497 428.607 224.126 428.151 223.924 cv
427.013 223.419 li
426.599 224.354 li
427.733 224.859 li
427.944 224.951 428.102 225.118 428.184 225.33 cv
428.266 225.544 428.259 225.775 428.167 225.984 cv
427.432 227.645 li
425.904 231.017 li
424.757 230.496 423.485 230.201 422.144 230.201 cv
422.144 231.226 li
423.334 231.226 424.465 231.487 425.482 231.947 cv
422.816 237.841 li
423.747 238.264 li
426.387 232.43 li
428.693 233.858 430.233 236.408 430.233 239.312 cv
431.255 239.312 li
431.255 235.993 429.471 233.084 426.813 231.492 cv
427.158 230.729 li
434.858 238.43 li
434.712 238.751 li
435.636 239.191 li
435.788 238.857 li
446.222 238.857 li
446.222 238.345 li
446.583 237.984 li
441.546 232.944 li
442.946 231.873 444.652 231.29 446.446 231.29 cv
448.606 231.29 450.637 232.133 452.164 233.661 cv
cp
.160784 .654902 .737255 rgb
f
427.617 224.454 mo
427.617 225.102 427.093 225.628 426.445 225.628 cv
425.795 225.628 425.27 225.102 425.27 224.454 cv
425.27 223.805 425.795 223.279 426.445 223.279 cv
427.093 223.279 427.617 223.805 427.617 224.454 cv
cp
.831373 .843137 .788235 rgb
f
442.161 228.585 mo
442.161 229.068 441.77 229.458 441.287 229.458 cv
437.593 229.458 li
437.111 229.458 436.719 229.408 436.719 228.926 cv
436.719 228.926 li
436.734 228.549 436.946 228.208 437.593 228.052 cv
441.287 227.711 li
441.77 227.711 442.161 228.103 442.161 228.585 cv
442.161 228.585 li
cp
.772549 .129412 .105882 rgb
f
434.644 241.428 mo
434.644 240.672 li
435.424 240.672 li
435.327 241.049 435.025 241.343 434.644 241.428 cv
cp
433.412 240.672 mo
434.19 240.672 li
434.19 241.427 li
433.81 241.341 433.509 241.048 433.412 240.672 cv
cp
434.19 239.395 mo
434.19 240.217 li
433.394 240.217 li
433.471 239.809 433.786 239.486 434.19 239.395 cv
cp
435.442 240.217 mo
434.644 240.217 li
434.644 239.395 li
435.048 239.485 435.365 239.809 435.442 240.217 cv
cp
438.639 240.217 mo
438.632 240.217 li
438.632 240.005 li
437.43 240.005 li
437.43 240.217 li
436.472 240.217 li
436.374 239.17 435.491 238.346 434.417 238.346 cv
433.345 238.346 432.461 239.17 432.364 240.217 cv
431.426 240.217 li
431.426 240.005 li
430.222 240.005 li
430.222 240.217 li
430.212 240.217 li
430.212 240.672 li
430.222 240.672 li
430.222 240.894 li
431.426 240.894 li
431.426 240.672 li
432.372 240.672 li
432.502 241.688 433.369 242.476 434.417 242.476 cv
435.467 242.476 436.334 241.688 436.464 240.672 cv
437.43 240.672 li
437.43 240.894 li
438.632 240.894 li
438.632 240.672 li
438.639 240.672 li
438.639 240.217 li
cp
.831373 .843137 .788235 rgb
f
454.257 245.977 mo
451.516 245.977 li
451.516 238.365 li
454.257 238.365 li
454.257 245.977 li
cp
.431373 .14902 .196078 rgb
f
444.521 230.12 mo
444.521 234.744 448.267 238.492 452.886 238.492 cv
452.886 182.538 li
448.267 182.538 444.521 225.502 444.521 230.12 cv
cp
.160784 .654902 .737255 rgb
f
452.886 182.538 mo
452.886 238.492 li
457.507 238.492 461.252 234.744 461.252 230.12 cv
461.252 225.502 457.507 182.538 452.886 182.538 cv
cp
.121569 .490196 .552941 rgb
f
352.714 245.977 mo
349.245 245.977 li
349.245 236.341 li
352.714 236.341 li
352.714 245.977 li
cp
.431373 .14902 .196078 rgb
f
340.389 225.906 mo
340.389 231.759 345.13 236.5 350.979 236.5 cv
350.979 165.676 li
345.13 165.676 340.389 220.059 340.389 225.906 cv
cp
.160784 .654902 .737255 rgb
f
350.979 165.676 mo
350.979 236.5 li
356.828 236.5 361.57 231.759 361.57 225.906 cv
361.57 220.059 356.828 165.676 350.979 165.676 cv
cp
.121569 .490196 .552941 rgb
f
540.209 168.064 mo
540.223 168.061 540.237 168.061 540.25 168.059 cv
540.211 168.062 li
540.209 168.064 li
cp
.160784 .654902 .737255 rgb
f
539.797 162.37 mo
539.025 162.37 li
539.025 162.37 537.393 162.37 534.873 162.37 cv
534.279 162.37 533.67 162.37 533.057 162.37 cv
526.568 162.37 519.183 162.37 514.145 162.37 cv
510.53 162.37 507.613 163.235 504.926 165.452 cv
506.733 165.949 508.063 167.599 508.063 169.564 cv
508.063 171.922 506.152 173.833 503.793 173.833 cv
496.44 173.833 li
493.747 176.527 li
514.688 176.527 li
527.39 174.199 li
529.718 176.527 li
531.747 176.527 li
540.209 168.064 li
540.211 168.062 li
540.25 168.059 li
541.618 167.84 542.664 166.666 542.664 165.238 cv
542.664 163.654 541.381 162.37 539.797 162.37 cv
cp
.831373 .843137 .788235 rgb
f
574.789 169.449 mo
571.388 169.449 li
567.792 165.593 li
573.039 165.593 li
574.789 169.449 li
cp
.121569 .490196 .552941 rgb
f
524.447 184.374 mo
522.608 184.374 li
522.608 184.373 li
522.608 180.182 li
522.608 179.737 522.247 179.376 521.803 179.376 cv
521.358 179.376 520.997 179.737 520.997 180.182 cv
520.997 184.373 li
520.997 184.374 li
501.489 184.374 li
503.1 185.985 li
524.447 185.985 li
524.891 185.985 525.252 185.625 525.252 185.179 cv
525.252 184.735 524.891 184.374 524.447 184.374 cv
cp
.301961 .266667 .254902 rgb
f
500.512 180.182 mo
500.512 179.737 500.151 179.376 499.706 179.376 cv
499.26 179.376 498.901 179.737 498.901 180.182 cv
498.901 181.786 li
500.512 183.397 li
500.512 180.182 li
cp
f
500.512 184.374 mo
500.512 184.373 li
500.512 183.397 li
498.901 181.786 li
498.901 184.373 li
498.901 184.374 li
497.247 184.374 li
496.801 184.374 496.44 184.735 496.44 185.179 cv
496.44 185.625 496.801 185.985 497.247 185.985 cv
503.1 185.985 li
501.489 184.374 li
500.512 184.374 li
cp
.203922 .180392 .172549 rgb
f
560.074 157.404 mo
496.337 157.404 li
496.337 156.238 li
560.074 156.238 li
560.074 157.404 li
cp
.301961 .266667 .254902 rgb
f
529.615 161.52 mo
529.615 162.298 526.796 162.298 526.796 161.52 cv
526.796 156.433 li
526.796 155.656 527.427 155.024 528.206 155.024 cv
528.206 155.024 li
528.984 155.024 529.615 155.656 529.615 156.433 cv
529.615 161.52 li
cp
.203922 .180392 .172549 rgb
f
493.747 176.527 mo
492.321 177.953 493.024 181.786 495.874 181.786 cv
519.946 181.786 li
514.688 176.527 li
493.747 176.527 li
cp
.580392 .0980392 .0784314 rgb
f
530.731 177.541 mo
531.747 176.527 li
529.718 176.527 li
530.731 177.541 li
cp
f
514.688 176.527 mo
519.946 181.786 li
520.301 181.786 li
524.156 181.786 528.004 180.269 530.37 177.904 cv
530.731 177.541 li
529.718 176.527 li
514.688 176.527 li
cp
.431373 .14902 .196078 rgb
f
527.39 174.199 mo
514.688 176.527 li
529.718 176.527 li
527.39 174.199 li
cp
.623529 .631373 .592157 rgb
f
530.833 171.91 mo
530.583 172.159 530.178 172.159 529.93 171.91 cv
526.94 168.921 li
526.69 168.672 526.69 168.267 526.94 168.019 cv
526.94 168.019 li
527.189 167.77 527.592 167.77 527.841 168.019 cv
530.833 171.008 li
531.081 171.258 531.081 171.662 530.833 171.91 cv
530.833 171.91 li
cp
.772549 .129412 .105882 rgb
f
532.495 169.36 mo
532.247 169.608 531.843 169.608 531.594 169.36 cv
528.603 166.369 li
528.354 166.12 528.354 165.717 528.603 165.467 cv
528.603 165.467 li
528.852 165.219 529.256 165.219 529.505 165.467 cv
532.495 168.457 li
532.745 168.706 532.745 169.111 532.495 169.36 cv
532.495 169.36 li
cp
f
508.063 169.564 mo
508.063 167.599 506.733 165.949 504.926 165.452 cv
504.532 165.778 504.143 166.131 503.757 166.517 cv
496.44 173.833 li
503.793 173.833 li
506.152 173.833 508.063 171.922 508.063 169.564 cv
cp
.203922 .180392 .172549 rgb
f
514.688 172.494 mo
514.688 173.233 514.086 173.833 513.346 173.833 cv
510.677 173.833 li
509.936 173.833 509.336 173.233 509.336 172.494 cv
509.336 166.622 li
509.336 165.881 509.936 165.281 510.677 165.281 cv
513.346 165.281 li
514.086 165.281 514.688 165.881 514.688 166.622 cv
514.688 172.494 li
cp
f
524.807 173.047 mo
518.168 173.047 li
516.247 173.047 514.688 174.604 514.688 176.527 cv
528.289 176.527 li
528.289 174.604 526.73 173.047 524.807 173.047 cv
cp
.160784 .654902 .737255 rgb
f
516.126 162.37 mo
530.19 162.37 li
526.833 159.013 li
522.278 159.232 518.36 160.522 516.126 162.37 cv
cp
.623529 .631373 .592157 rgb
f
540.285 162.37 mo
538.076 160.542 534.22 159.26 529.731 159.02 cv
533.081 162.37 li
540.285 162.37 li
cp
f
529.731 159.02 mo
529.229 158.994 528.721 158.976 528.206 158.976 cv
527.742 158.976 527.286 158.992 526.833 159.013 cv
530.19 162.37 li
533.081 162.37 li
529.731 159.02 li
cp
.419608 .423529 .396078 rgb
f
576.587 155.024 mo
573.186 155.024 li
567.792 162.37 li
573.039 162.37 li
576.587 155.024 li
cp
.160784 .654902 .737255 rgb
f
542.664 165.238 mo
542.664 166.666 541.618 167.84 540.25 168.059 cv
572.781 165.729 li
574.369 165.568 575.276 165.26 575.276 164.012 cv
542.664 165.238 li
cp
.623529 .631373 .592157 rgb
f
572.781 162.37 mo
539.797 162.37 li
541.381 162.37 542.664 163.654 542.664 165.238 cv
575.276 164.012 li
575.276 162.782 574.353 162.37 572.781 162.37 cv
cp
.831373 .843137 .788235 rgb
f
109.278 210.679 mo
99.2114 206.928 li
49.5307 206.928 li
49.5307 210.679 li
38.4048 210.679 li
32.0649 210.679 li
30.5122 217.925 li
30.5122 234.615 li
144.558 234.615 li
144.558 210.679 li
109.278 210.679 li
cp
.772549 .129412 .105882 rgb
f
49.5307 216.768 mo
40.6035 216.768 li
40.6035 212.135 li
49.5307 212.135 li
49.5307 216.768 li
cp
.160784 .654902 .737255 rgb
f
60.7221 216.768 mo
51.7949 216.768 li
51.7949 212.135 li
60.7221 212.135 li
60.7221 216.768 li
cp
.831373 .843137 .788235 rgb
f
49.5146 210.679 mo
49.5146 206.93 li
43.5805 206.941 33.6816 206.93 32.0649 210.679 cv
32.0649 210.679 li
49.5146 210.679 li
cp
.301961 .266667 .254902 rgb
f
100.699 210.677 mo
100.699 206.928 li
101.037 206.929 127.797 206.929 128.158 206.93 cv
134.143 206.95 143.033 207.142 144.558 210.677 cv
144.558 210.677 li
100.699 210.677 li
cp
f
51.7949 234.615 mo
49.5307 234.615 li
49.5307 206.928 li
51.7949 206.928 li
51.7949 234.615 li
cp
.819608 .301961 .286275 rgb
f
91.1899 234.615 mo
60.7221 234.615 li
60.7221 206.928 li
62.9863 206.928 li
91.1899 234.615 li
cp
f
98.435 216.768 mo
89.5078 216.768 li
89.5078 212.135 li
98.435 212.135 li
98.435 216.768 li
cp
.831373 .843137 .788235 rgb
f
109.626 216.768 mo
100.699 216.768 li
100.699 212.135 li
109.626 212.135 li
109.626 216.768 li
cp
f
100.699 234.615 mo
98.435 234.615 li
98.435 206.928 li
100.699 206.928 li
100.699 234.615 li
cp
.819608 .301961 .286275 rgb
f
37.1753 212.135 mo
33.1225 212.135 li
32.1299 216.768 li
37.1753 216.768 li
37.1753 212.135 li
cp
.160784 .654902 .737255 rgb
f
30.9101 225.04 mo
30.9101 217.925 li
26.2431 217.925 li
26.2431 234.615 li
30.9101 234.615 li
144.558 234.615 li
144.558 225.04 li
30.9101 225.04 li
cp
.580392 .0980392 .0784314 rgb
f
22.4912 225.04 mo
26.2431 225.04 li
26.2431 238.432 li
22.4912 238.432 li
22.4912 225.04 li
cp
.227451 .2 .192157 rgb
f
38.0805 239.336 mo
38.0805 241.945 35.9663 244.059 33.3584 244.059 cv
30.7505 244.059 28.6367 241.945 28.6367 239.336 cv
28.6367 236.729 30.7505 234.615 33.3584 234.615 cv
35.9663 234.615 38.0805 236.729 38.0805 239.336 cv
cp
f
52.2466 239.336 mo
52.2466 241.945 50.1328 244.059 47.5244 244.059 cv
44.9165 244.059 42.8027 241.945 42.8027 239.336 cv
42.8027 236.729 44.9165 234.615 47.5244 234.615 cv
50.1328 234.615 52.2466 236.729 52.2466 239.336 cv
cp
f
66.4126 239.336 mo
66.4126 241.945 64.2988 244.059 61.6904 244.059 cv
59.0825 244.059 56.9687 241.945 56.9687 239.336 cv
56.9687 236.729 59.0825 234.615 61.6904 234.615 cv
64.2988 234.615 66.4126 236.729 66.4126 239.336 cv
cp
f
113.103 239.336 mo
113.103 241.945 110.989 244.059 108.381 244.059 cv
105.773 244.059 103.66 241.945 103.66 239.336 cv
103.66 236.729 105.773 234.615 108.381 234.615 cv
110.989 234.615 113.103 236.729 113.103 239.336 cv
cp
f
127.269 239.336 mo
127.269 241.945 125.155 244.059 122.547 244.059 cv
119.939 244.059 117.825 241.945 117.825 239.336 cv
117.825 236.729 119.939 234.615 122.547 234.615 cv
125.155 234.615 127.269 236.729 127.269 239.336 cv
cp
f
141.435 239.336 mo
141.435 241.945 139.32 244.059 136.713 244.059 cv
134.105 244.059 131.991 241.945 131.991 239.336 cv
131.991 236.729 134.105 234.615 136.713 234.615 cv
139.32 234.615 141.435 236.729 141.435 239.336 cv
cp
f
166.021 239.336 mo
166.021 241.945 163.907 244.059 161.299 244.059 cv
158.691 244.059 156.577 241.945 156.577 239.336 cv
156.577 236.729 158.691 234.615 161.299 234.615 cv
163.907 234.615 166.021 236.729 166.021 239.336 cv
cp
f
180.187 239.336 mo
180.187 241.945 178.072 244.059 175.465 244.059 cv
172.856 244.059 170.743 241.945 170.743 239.336 cv
170.743 236.729 172.856 234.615 175.465 234.615 cv
178.072 234.615 180.187 236.729 180.187 239.336 cv
cp
f
194.352 239.336 mo
194.352 241.945 192.239 244.059 189.631 244.059 cv
187.023 244.059 184.909 241.945 184.909 239.336 cv
184.909 236.729 187.023 234.615 189.631 234.615 cv
192.239 234.615 194.352 236.729 194.352 239.336 cv
cp
f
241.043 239.336 mo
241.043 241.945 238.929 244.059 236.322 244.059 cv
233.713 244.059 231.599 241.945 231.599 239.336 cv
231.599 236.729 233.713 234.615 236.322 234.615 cv
238.929 234.615 241.043 236.729 241.043 239.336 cv
cp
f
255.209 239.336 mo
255.209 241.945 253.095 244.059 250.487 244.059 cv
247.879 244.059 245.766 241.945 245.766 239.336 cv
245.766 236.729 247.879 234.615 250.487 234.615 cv
253.095 234.615 255.209 236.729 255.209 239.336 cv
cp
f
269.374 239.336 mo
269.374 241.945 267.262 244.059 264.654 244.059 cv
262.045 244.059 259.931 241.945 259.931 239.336 cv
259.931 236.729 262.045 234.615 264.654 234.615 cv
267.262 234.615 269.374 236.729 269.374 239.336 cv
cp
f
144.558 234.615 mo
143.005 234.615 li
26.2431 234.615 li
26.2431 238.432 li
143.005 238.432 li
144.558 238.432 li
272.498 238.432 li
272.498 234.615 li
144.558 234.615 li
cp
.301961 .266667 .254902 rgb
f
228.64 241.731 mo
197.783 241.731 li
197.783 234.615 li
228.64 234.615 li
228.64 241.731 li
cp
.227451 .2 .192157 rgb
f
139.739 234.615 mo
137.41 234.615 li
137.41 230.12 133.753 226.464 129.26 226.464 cv
41.542 226.464 li
37.0478 226.464 33.3916 230.12 33.3916 234.615 cv
31.0625 234.615 li
31.0625 228.836 35.7636 224.134 41.542 224.134 cv
129.26 224.134 li
135.038 224.134 139.739 228.836 139.739 234.615 cv
cp
.831373 .843137 .788235 rgb
f
264.721 206.928 mo
161.299 206.928 li
161.299 234.615 li
264.721 234.615 li
264.721 206.928 li
cp
.121569 .490196 .552941 rgb
f
264.654 206.928 mo
161.299 206.928 li
161.299 210.679 li
173.216 210.679 li
173.216 234.615 li
176.969 234.615 li
176.969 210.679 li
188.463 210.679 li
188.463 234.615 li
192.216 234.615 li
192.216 210.679 li
203.712 210.679 li
203.712 234.615 li
207.464 234.615 li
207.464 210.679 li
218.959 210.679 li
218.959 234.615 li
222.711 234.615 li
222.711 210.679 li
234.206 210.679 li
234.206 234.615 li
237.959 234.615 li
237.959 210.679 li
249.455 210.679 li
249.455 234.615 li
253.206 234.615 li
253.206 210.679 li
264.654 210.679 li
264.654 206.928 li
cp
.498039 .792157 .843137 rgb
f
100.699 241.731 mo
69.8427 241.731 li
69.8427 234.615 li
100.699 234.615 li
100.699 241.731 li
cp
.227451 .2 .192157 rgb
f
541.93 246.048 mo
13.0537 246.048 li
12.4785 246.048 12.0117 245.582 12.0117 245.006 cv
12.0117 244.43 12.4785 243.964 13.0537 243.964 cv
541.93 243.964 li
542.506 243.964 542.972 244.43 542.972 245.006 cv
542.972 245.582 542.506 246.048 541.93 246.048 cv
cp
.160784 .654902 .737255 rgb
f
899.1 246.048 mo
896.627 246.048 895.33 244.718 894.288 243.65 cv
893.324 242.66 892.561 241.88 890.967 241.88 cv
889.372 241.88 888.609 242.661 887.645 243.65 cv
886.602 244.718 885.303 246.048 882.831 246.048 cv
880.359 246.048 879.061 244.718 878.018 243.65 cv
877.053 242.661 876.29 241.88 874.696 241.88 cv
873.103 241.88 872.34 242.66 871.375 243.65 cv
870.333 244.718 869.037 246.048 866.563 246.048 cv
864.09 246.048 862.792 244.718 861.749 243.65 cv
860.786 242.661 860.024 241.88 858.428 241.88 cv
856.834 241.88 856.073 242.66 855.107 243.65 cv
854.064 244.718 852.766 246.048 850.293 246.048 cv
847.82 246.048 846.522 244.718 845.479 243.65 cv
844.513 242.66 843.75 241.88 842.156 241.88 cv
840.56 241.88 839.798 242.661 838.832 243.65 cv
837.79 244.718 836.494 246.048 834.02 246.048 cv
831.546 246.048 830.248 244.718 829.205 243.65 cv
828.24 242.66 827.477 241.88 825.882 241.88 cv
824.287 241.88 823.525 242.661 822.56 243.65 cv
821.517 244.718 820.218 246.048 817.746 246.048 cv
815.273 246.048 813.974 244.718 812.931 243.65 cv
811.966 242.661 811.204 241.88 809.608 241.88 cv
808.013 241.88 807.25 242.661 806.286 243.65 cv
805.243 244.718 803.945 246.048 801.471 246.048 cv
798.997 246.048 797.701 244.718 796.657 243.65 cv
795.693 242.66 794.93 241.88 793.336 241.88 cv
791.741 241.88 790.978 242.661 790.013 243.65 cv
788.97 244.718 787.671 246.048 785.199 246.048 cv
782.726 246.048 781.428 244.718 780.385 243.65 cv
779.42 242.661 778.659 241.88 777.063 241.88 cv
775.467 241.88 774.706 242.661 773.741 243.65 cv
772.698 244.718 771.399 246.048 768.926 246.048 cv
766.452 246.048 765.156 244.718 764.113 243.65 cv
763.147 242.66 762.385 241.88 760.79 241.88 cv
759.196 241.88 758.434 242.66 757.468 243.65 cv
756.426 244.718 755.128 246.048 752.656 246.048 cv
750.183 246.048 748.885 244.718 747.842 243.65 cv
746.877 242.661 746.116 241.88 744.519 241.88 cv
742.923 241.88 742.162 242.661 741.198 243.65 cv
740.155 244.718 738.857 246.048 736.384 246.048 cv
733.911 246.048 732.614 244.718 731.571 243.65 cv
730.606 242.66 729.843 241.88 728.25 241.88 cv
726.655 241.88 725.892 242.66 724.927 243.65 cv
723.884 244.718 722.586 246.048 720.113 246.048 cv
717.64 246.048 716.341 244.718 715.298 243.65 cv
714.334 242.661 713.572 241.88 711.977 241.88 cv
710.381 241.88 709.619 242.66 708.655 243.65 cv
707.612 244.718 706.314 246.048 703.841 246.048 cv
701.37 246.048 700.073 244.718 699.029 243.65 cv
698.064 242.661 697.302 241.88 695.707 241.88 cv
694.113 241.88 693.351 242.66 692.386 243.65 cv
691.342 244.718 690.046 246.048 687.572 246.048 cv
685.099 246.048 683.8 244.718 682.757 243.65 cv
681.793 242.661 681.031 241.88 679.435 241.88 cv
677.842 241.88 677.08 242.66 676.115 243.65 cv
675.072 244.718 673.774 246.048 671.301 246.048 cv
668.829 246.048 667.531 244.718 666.488 243.65 cv
665.523 242.66 664.76 241.88 663.167 241.88 cv
661.574 241.88 660.811 242.66 659.847 243.65 cv
658.803 244.718 657.506 246.048 655.034 246.048 cv
652.56 246.048 651.263 244.718 650.22 243.65 cv
649.255 242.661 648.494 241.88 646.898 241.88 cv
645.302 241.88 644.54 242.661 643.575 243.65 cv
642.532 244.718 641.234 246.048 638.761 246.048 cv
636.289 246.048 634.992 244.718 633.949 243.65 cv
632.983 242.66 632.222 241.88 630.627 241.88 cv
629.034 241.88 628.272 242.66 627.308 243.65 cv
626.266 244.718 624.968 246.048 622.496 246.048 cv
620.023 246.048 618.725 244.718 617.683 243.65 cv
616.718 242.66 615.956 241.88 614.362 241.88 cv
612.767 241.88 612.004 242.661 611.039 243.65 cv
609.997 244.718 608.7 246.048 606.226 246.048 cv
603.753 246.048 602.456 244.718 601.413 243.65 cv
600.449 242.661 599.686 241.88 598.091 241.88 cv
596.497 241.88 595.735 242.66 594.77 243.65 cv
593.728 244.718 592.43 246.048 589.957 246.048 cv
587.485 246.048 586.188 244.718 585.146 243.65 cv
584.18 242.66 583.418 241.88 581.825 241.88 cv
580.231 241.88 579.469 242.661 578.505 243.65 cv
577.463 244.718 576.165 246.048 573.694 246.048 cv
571.22 246.048 569.923 244.718 568.881 243.65 cv
567.917 242.66 567.154 241.88 565.56 241.88 cv
563.966 241.88 563.204 242.66 562.239 243.65 cv
561.196 244.718 559.898 246.048 557.425 246.048 cv
554.953 246.048 553.655 244.718 552.612 243.65 cv
551.648 242.661 550.885 241.88 549.29 241.88 cv
547.696 241.88 546.933 242.66 545.969 243.65 cv
544.927 244.718 543.629 246.048 541.157 246.048 cv
540.581 246.048 540.115 245.582 540.115 245.006 cv
540.115 244.43 540.581 243.964 541.157 243.964 cv
542.75 243.964 543.513 243.184 544.478 242.195 cv
545.52 241.126 546.817 239.796 549.29 239.796 cv
551.764 239.796 553.061 241.126 554.105 242.195 cv
555.069 243.184 555.831 243.964 557.425 243.964 cv
559.02 243.964 559.782 243.184 560.747 242.195 cv
561.79 241.126 563.088 239.796 565.56 239.796 cv
568.033 239.796 569.331 241.126 570.372 242.195 cv
571.338 243.184 572.1 243.964 573.694 243.964 cv
575.287 243.964 576.048 243.184 577.012 242.195 cv
578.054 241.126 579.352 239.796 581.825 239.796 cv
584.297 239.796 585.595 241.126 586.637 242.195 cv
587.602 243.184 588.365 243.964 589.957 243.964 cv
591.551 243.964 592.314 243.184 593.279 242.195 cv
594.321 241.126 595.618 239.796 598.091 239.796 cv
600.565 239.796 601.863 241.126 602.906 242.195 cv
603.87 243.184 604.631 243.964 606.226 243.964 cv
607.821 243.964 608.582 243.184 609.548 242.195 cv
610.591 241.126 611.889 239.796 614.362 239.796 cv
616.834 239.796 618.132 241.126 619.174 242.195 cv
620.14 243.184 620.902 243.964 622.496 243.964 cv
624.088 243.964 624.851 243.184 625.815 242.195 cv
626.858 241.126 628.155 239.796 630.627 239.796 cv
633.1 239.796 634.397 241.126 635.44 242.195 cv
636.405 243.183 637.167 243.964 638.761 243.964 cv
640.356 243.964 641.119 243.184 642.083 242.195 cv
643.126 241.126 644.424 239.796 646.898 239.796 cv
649.372 239.796 650.669 241.126 651.712 242.195 cv
652.676 243.184 653.438 243.964 655.034 243.964 cv
656.628 243.964 657.391 243.183 658.355 242.195 cv
659.398 241.126 660.696 239.796 663.167 239.796 cv
665.638 239.796 666.936 241.126 667.979 242.195 cv
668.945 243.183 669.706 243.964 671.301 243.964 cv
672.896 243.964 673.658 243.183 674.622 242.195 cv
675.665 241.126 676.962 239.796 679.435 239.796 cv
681.908 239.796 683.206 241.126 684.25 242.195 cv
685.213 243.183 685.976 243.964 687.572 243.964 cv
689.167 243.964 689.93 243.183 690.894 242.195 cv
691.937 241.126 693.235 239.796 695.707 239.796 cv
698.18 239.796 699.478 241.126 700.521 242.195 cv
701.486 243.184 702.248 243.964 703.841 243.964 cv
705.436 243.964 706.199 243.184 707.163 242.195 cv
708.206 241.126 709.503 239.796 711.977 239.796 cv
714.45 239.796 715.747 241.126 716.792 242.195 cv
717.755 243.183 718.517 243.964 720.113 243.964 cv
721.708 243.964 722.47 243.183 723.436 242.195 cv
724.479 241.126 725.777 239.796 728.25 239.796 cv
730.721 239.796 732.019 241.126 733.062 242.195 cv
734.028 243.184 734.789 243.964 736.384 243.964 cv
737.979 243.964 738.741 243.184 739.705 242.195 cv
740.747 241.126 742.045 239.796 744.519 239.796 cv
746.994 239.796 748.29 241.126 749.333 242.195 cv
750.298 243.184 751.061 243.964 752.656 243.964 cv
754.25 243.964 755.012 243.184 755.977 242.195 cv
757.02 241.126 758.318 239.796 760.79 239.796 cv
763.263 239.796 764.561 241.126 765.604 242.195 cv
766.568 243.183 767.331 243.964 768.926 243.964 cv
770.522 243.964 771.285 243.183 772.248 242.195 cv
773.292 241.126 774.59 239.796 777.063 239.796 cv
779.538 239.796 780.834 241.126 781.877 242.195 cv
782.842 243.184 783.604 243.964 785.199 243.964 cv
786.794 243.964 787.556 243.183 788.522 242.195 cv
789.565 241.126 790.864 239.796 793.336 239.796 cv
795.809 239.796 797.106 241.126 798.149 242.195 cv
799.114 243.183 799.875 243.964 801.471 243.964 cv
803.068 243.964 803.83 243.183 804.793 242.195 cv
805.837 241.126 807.135 239.796 809.608 239.796 cv
812.081 239.796 813.379 241.126 814.422 242.195 cv
815.387 243.183 816.15 243.964 817.746 243.964 cv
819.341 243.964 820.103 243.183 821.068 242.195 cv
822.111 241.126 823.409 239.796 825.882 239.796 cv
828.355 239.796 829.654 241.126 830.697 242.195 cv
831.661 243.183 832.424 243.964 834.02 243.964 cv
835.615 243.964 836.377 243.184 837.341 242.195 cv
838.384 241.126 839.682 239.796 842.156 239.796 cv
844.628 239.796 845.927 241.126 846.97 242.195 cv
847.935 243.183 848.699 243.964 850.293 243.964 cv
851.888 243.964 852.651 243.183 853.616 242.195 cv
854.659 241.126 855.956 239.796 858.428 239.796 cv
860.902 239.796 862.2 241.126 863.243 242.195 cv
864.206 243.184 864.969 243.964 866.563 243.964 cv
868.157 243.964 868.918 243.184 869.884 242.195 cv
870.926 241.126 872.224 239.796 874.696 239.796 cv
877.168 239.796 878.466 241.126 879.509 242.195 cv
880.475 243.184 881.237 243.964 882.831 243.964 cv
884.426 243.964 885.188 243.183 886.153 242.195 cv
887.196 241.126 888.494 239.796 890.967 239.796 cv
893.44 239.796 894.737 241.126 895.779 242.195 cv
896.744 243.184 897.506 243.964 899.1 243.964 cv
900.694 243.964 901.457 243.184 902.422 242.195 cv
903.465 241.126 904.764 239.796 907.238 239.796 cv
907.813 239.796 908.28 240.262 908.28 240.838 cv
908.28 241.413 907.813 241.88 907.238 241.88 cv
905.642 241.88 904.879 242.661 903.913 243.65 cv
902.871 244.718 901.573 246.048 899.1 246.048 cv
cp
f
734.304 382.952 mo
734.048 382.952 li
734.097 382.28 734.129 381.601 734.129 380.909 cv
734.129 368.718 726.163 358.832 716.343 358.832 cv
707.961 358.832 700.943 366.051 699.073 375.748 cv
695.331 370.234 689.92 366.522 683.812 365.821 cv
683.825 365.367 683.839 364.911 683.839 364.456 cv
683.839 348.882 673.663 336.256 661.125 336.256 cv
652.915 336.256 645.725 341.663 641.728 349.765 cv
639.822 349.111 637.808 348.762 635.733 348.762 cv
625.928 348.762 617.582 356.466 614.397 367.262 cv
612.649 365.089 610.229 363.738 607.557 363.738 cv
603.329 363.738 599.744 367.126 598.438 371.83 cv
598.366 371.826 598.295 371.818 598.223 371.818 cv
592.891 371.818 588.568 377.18 588.568 383.798 cv
588.568 384.296 588.602 384.779 588.653 385.259 cv
734.304 385.259 li
734.304 382.952 li
cp
.709804 .827451 .956863 rgb
f
261.432 330.733 mo
259.254 323.257 252.987 317.855 245.593 317.855 cv
244.488 317.855 243.415 317.979 242.373 318.202 cv
240.64 306.307 231.425 297.225 220.316 297.225 cv
215.063 297.225 210.235 299.262 206.42 302.664 cv
202.568 295.115 195.322 290.023 187.002 290.023 cv
175.391 290.023 165.852 299.939 164.753 312.635 cv
164.577 312.622 164.396 312.614 164.208 312.614 cv
162.439 312.614 160.74 312.974 159.165 313.626 cv
158.128 311.648 156.83 309.862 155.336 308.314 cv
155.274 303.83 152.02 300.213 148.001 300.213 cv
147.947 300.213 147.892 300.22 147.838 300.221 cv
146.844 296.99 144.117 294.664 140.899 294.664 cv
138.866 294.664 137.025 295.592 135.695 297.083 cv
133.271 289.669 126.921 284.379 119.461 284.379 cv
117.882 284.379 116.35 284.619 114.9 285.068 cv
111.858 279.504 106.388 275.791 100.141 275.791 cv
90.6009 275.791 82.8585 284.461 82.8585 295.158 cv
82.8585 295.47 82.869 295.782 82.8786 296.096 cv
78.231 296.576 74.1142 299.125 71.2674 302.912 cv
69.844 296.252 64.5048 291.294 58.1271 291.294 cv
50.655 291.294 44.5936 298.084 44.5936 306.456 cv
44.5936 306.931 44.6182 307.397 44.6554 307.861 cv
44.4604 307.861 li
44.4604 309.444 li
115.116 309.444 li
115.914 313.274 118.428 316.362 121.724 317.598 cv
120.949 320.031 120.529 322.65 120.529 325.388 cv
120.529 327.226 120.721 329.015 121.082 330.733 cv
121.576 333.07 122.38 335.276 123.449 337.283 cv
127.069 344.076 133.696 348.632 141.27 348.632 cv
146.92 348.632 152.041 346.096 155.785 341.991 cv
158.158 343.899 161.068 345.03 164.208 345.03 cv
165.602 345.03 166.936 344.809 168.212 344.395 cv
168.174 344.825 168.16 345.249 168.16 345.683 cv
168.16 353.637 173.913 360.088 181.016 360.088 cv
188.115 360.088 193.868 353.637 193.868 345.683 cv
193.868 343.404 193.401 341.252 192.557 339.34 cv
194.233 338.856 195.837 338.159 197.338 337.283 cv
202.416 337.283 li
206.493 343.379 212.995 347.319 220.316 347.319 cv
224.005 347.319 227.481 346.312 230.548 344.543 cv
233.57 342.793 236.195 340.306 238.214 337.283 cv
261.859 337.283 li
261.859 332.505 li
261.859 330.733 li
261.432 330.733 li
cp
.862745 .917647 .976471 rgb
f
280.529 325.931 mo
278.889 331.208 li
275.698 326.696 li
270.172 326.767 li
273.478 322.338 li
271.703 317.105 li
276.936 318.879 li
281.365 315.573 li
281.294 321.1 li
285.807 324.29 li
280.529 325.931 li
cp
1 1 1 rgb
f
269.374 153.596 mo
273.895 156.774 li
268.622 158.428 li
266.997 163.71 li
263.793 159.207 li
258.268 159.293 li
261.561 154.855 li
259.771 149.626 li
265.01 151.387 li
269.43 148.069 li
269.374 153.596 li
cp
f
633.064 145.445 mo
630.6 145.919 li
631.722 143.675 li
630.51 141.478 li
632.991 141.853 li
634.706 140.021 li
635.116 142.495 li
637.387 143.56 li
635.161 144.716 li
634.851 147.205 li
633.064 145.445 li
cp
f
299.945 170.75 mo
297.481 171.223 li
298.603 168.98 li
297.391 166.783 li
299.872 167.158 li
301.586 165.326 li
301.997 167.8 li
304.268 168.865 li
302.042 170.02 li
301.732 172.51 li
299.945 170.75 li
cp
f
156.348 197.225 mo
153.781 197.719 li
154.95 195.381 li
153.687 193.092 li
156.271 193.482 li
158.059 191.573 li
158.486 194.151 li
160.853 195.26 li
158.533 196.465 li
158.21 199.059 li
156.348 197.225 li
cp
f
340.749 289.006 mo
338.628 289.682 li
337.984 291.813 li
336.685 290.005 li
334.46 290.049 li
335.778 288.256 li
335.048 286.154 li
337.161 286.853 li
338.935 285.509 li
338.922 287.735 li
340.749 289.006 li
cp
f
567.792 278.006 mo
564.978 275.029 li
560.93 275.659 li
562.892 272.063 li
561.042 268.408 li
565.069 269.162 li
567.973 266.274 li
568.5 270.336 li
572.144 272.206 li
568.443 273.962 li
567.792 278.006 li
cp
f
95.4279 340.84 mo
91.7492 340.187 li
89.1257 342.846 li
88.6105 339.146 li
85.2707 337.473 li
88.6306 335.839 li
89.1897 332.146 li
91.7814 334.836 li
95.4675 334.227 li
93.7092 337.523 li
95.4279 340.84 li
cp
f
856.461 117.99 mo
854.41 115.833 li
851.47 116.3 li
852.887 113.683 li
851.535 111.032 li
854.461 111.571 li
856.566 109.464 li
856.957 112.415 li
859.611 113.765 li
856.925 115.05 li
856.461 117.99 li
cp
f
888.121 172.097 mo
882.612 171.427 li
878.937 175.585 li
877.872 170.138 li
872.782 167.928 li
877.632 165.233 li
878.162 159.708 li
882.224 163.488 li
887.642 162.285 li
885.302 167.317 li
888.121 172.097 li
cp
f
747.057 72.908 mo
743.946 72.4177 li
741.779 74.7024 li
741.284 71.5925 li
738.442 70.2375 li
741.247 68.8059 li
741.657 65.6838 li
743.885 67.9084 li
746.981 67.3342 li
745.553 70.1409 li
747.057 72.908 li
cp
f
555.857 65.6838 mo
553.195 66.9973 li
552.768 69.9348 li
550.697 67.8093 li
547.771 68.3113 li
549.152 65.6838 li
547.771 63.0564 li
550.697 63.5583 li
552.768 61.4329 li
553.195 64.3704 li
555.857 65.6838 li
cp
f
41.6689 164.012 mo
36.0737 163.489 li
32.4707 167.802 li
31.2387 162.319 li
26.0234 160.225 li
30.8579 157.36 li
31.2373 151.752 li
35.457 155.464 li
40.9067 154.092 li
38.6801 159.253 li
41.6689 164.012 li
cp
f
350.979 230.549 mo
305.818 230.549 li
305.818 239.195 li
350.979 239.195 li
350.979 230.549 li
cp
.301961 .266667 .254902 rgb
f
291.2 206.94 mo
282.482 223.068 li
282.482 239.195 li
287.443 239.195 li
287.443 239.195 li
287.443 235.492 290.445 232.488 294.149 232.488 cv
297.853 232.488 300.855 235.492 300.855 239.195 cv
300.855 239.195 li
305.818 239.195 li
305.818 206.94 li
291.2 206.94 li
cp
.160784 .654902 .737255 rgb
f
302.597 226.115 mo
302.597 226.496 302.288 226.804 301.907 226.804 cv
298.195 226.804 li
297.814 226.804 297.504 226.496 297.504 226.115 cv
297.504 226.115 li
297.504 225.733 297.814 225.423 298.195 225.423 cv
301.907 225.423 li
302.288 225.423 302.597 225.733 302.597 226.115 cv
302.597 226.115 li
cp
.301961 .266667 .254902 rgb
f
288.313 235.892 mo
280.581 235.892 li
280.581 237.577 li
280.581 238.469 281.306 239.195 282.198 239.195 cv
287.443 239.195 li
287.443 239.195 li
287.443 237.993 287.759 236.868 288.313 235.892 cv
cp
f
294.149 232.488 mo
291.645 232.488 289.465 233.86 288.313 235.892 cv
287.759 236.868 287.443 237.993 287.443 239.195 cv
287.443 239.195 li
287.52 239.195 li
300.855 239.195 li
300.855 239.195 li
300.855 235.492 297.853 232.488 294.149 232.488 cv
cp
f
289.286 239.195 mo
289.286 241.881 291.463 244.059 294.149 244.059 cv
296.835 244.059 299.014 241.881 299.014 239.195 cv
299.014 236.508 296.835 234.33 294.149 234.33 cv
291.463 234.33 289.286 236.508 289.286 239.195 cv
cp
.203922 .180392 .172549 rgb
f
296.97 239.195 mo
296.97 240.751 295.707 242.014 294.149 242.014 cv
294.149 236.374 li
295.707 236.374 296.97 237.636 296.97 239.195 cv
cp
.831373 .843137 .788235 rgb
f
294.149 236.374 mo
294.149 242.014 li
292.592 242.014 291.33 240.751 291.33 239.195 cv
291.33 237.636 292.592 236.374 294.149 236.374 cv
cp
.945098 .941176 .941176 rgb
f
293.215 210.473 mo
286.407 223.068 li
290.001 223.068 li
302.597 210.473 li
293.215 210.473 li
cp
f
302.597 210.473 mo
290.001 223.068 li
302.597 223.068 li
302.597 210.473 li
cp
.831373 .843137 .788235 rgb
f
334.443 239.195 mo
334.443 241.881 336.62 244.059 339.306 244.059 cv
341.992 244.059 344.169 241.881 344.169 239.195 cv
344.169 236.508 341.992 234.33 339.306 234.33 cv
336.62 234.33 334.443 236.508 334.443 239.195 cv
cp
.203922 .180392 .172549 rgb
f
342.126 239.195 mo
342.126 240.751 340.863 242.014 339.306 242.014 cv
339.306 236.374 li
340.863 236.374 342.126 237.636 342.126 239.195 cv
cp
.831373 .843137 .788235 rgb
f
339.306 236.374 mo
339.306 242.014 li
337.749 242.014 336.486 240.751 336.486 239.195 cv
336.486 237.636 337.749 236.374 339.306 236.374 cv
cp
.945098 .941176 .941176 rgb
f
305.818 202.026 mo
305.818 217.033 li
305.818 232.51 li
355.196 202.026 li
305.818 202.026 li
cp
.772549 .129412 .105882 rgb
f
305.818 232.51 mo
355.196 232.51 li
355.196 217.033 li
355.196 202.026 li
305.818 232.51 li
cp
.580392 .0980392 .0784314 rgb
f
332.13 239.195 mo
327.359 239.195 li
327.359 235.048 li
326.846 233.909 li
332.13 239.195 li
cp
.227451 .2 .192157 rgb
f
327.359 235.048 mo
327.359 234.199 326.671 233.512 325.823 233.512 cv
312.468 233.512 li
311.62 233.512 310.932 234.199 310.932 235.048 cv
310.932 237.353 li
327.359 237.353 li
327.359 235.048 li
cp
.945098 .941176 .941176 rgb
f
310.932 237.353 mo
310.932 239.656 li
310.932 240.504 311.62 241.192 312.468 241.192 cv
325.823 241.192 li
326.671 241.192 327.359 240.504 327.359 239.656 cv
327.359 237.353 li
310.932 237.353 li
cp
.831373 .843137 .788235 rgb
f
327.359 236.814 mo
323.542 236.814 li
323.542 233.512 li
322.467 233.512 li
322.467 236.814 li
315.823 236.814 li
315.823 233.512 li
314.748 233.512 li
314.748 236.814 li
310.932 236.814 li
310.932 237.89 li
314.748 237.89 li
314.748 241.192 li
315.823 241.192 li
315.823 237.89 li
322.467 237.89 li
322.467 241.192 li
323.542 241.192 li
323.542 237.89 li
327.359 237.89 li
327.359 236.814 li
cp
.980392 .996078 1 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.0
%%For: (ivan) ()
%%Title: (S_1409.i047.054.S.m004.c10transport.eps)
%%CreationDate: 9/27/2014 9:22 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj4cadQdZB^9?jM#;V[66ugJ(RR@95-6sKeo3`,+M+h@!hDm7gTDb`rFfu)i=mhio"V0.pmrM1M@o[Zrh.p_=]00h-l`KdG
%p7LZ=<F,2PX-W!^4PcZ[3WJoiV57ht_cgugR?t<$h*P<nC\ai'*V?FMH4G6U"C2E&b+MmQoaeY$9!-^g[i=^PD`s<a<GlASQI"f^
%Eoo`kd:iQBfl!$)QddClB:fn(NEWUCD3k&:-`\uK4Q4S(HIRiW^u#QE:\L4[3i_lMZoT*Ec'Joa\)UC"PlJ)fl*,>;n+F<SI_FS6
%nc2C*H]As>W7EDU+)%nON)'CUVB7UJg0&^Jk_hGW;(MLLrucq;*bG%,JFp@<6PJ_^+&2`)r(HcN5k(CG*WHp5)uU.o)]:GAM0TR@
%$CJ^B%3-s0g%;To46Rn&!4'h,"9sp&btb%hY;$J\gW4,'0>hb75"IX?$9Ae_"Q:q*dbQej6$Lq$"l3HKCMSq_]0qmerN+WM=O0+1
%Q)h<q,]Kp@5H=aM#jE;8#=F^5_a1'KIFG4j$'Pk:HpO6gm:rah4--rh)eGmiCubHNZGggoHX?"OhmOI+OCgZ9Bu+_k#0g'A<t1+e
%b=VCh[FT?p/MD4rn]e0&q-M&tXfQ5>DFVh');Qu`_RKb1@O@/?Y1k]-#/aq%N"jLpJoh79U\imDH+gW"l4MPe6^R/OgT=O%mWFMJ
%-iT$JPP&Dbmg&kG(JQ=ApM6m=(V4ULIi1<Q>5%%iVVZ#eoBdl<dDJ2XkleBWE&?;3o%3(Ir#6)"kfCFki8dn-3n.@NpcnfQ9)RhB
%*&Illj)2=hkj5_&gAgu`j]o3A>0FR\<Vl)8;7E"I5Q+@WG`Z(j1R^>lQ7FcrrB"hZ/_<&p-4EHBm+*rO=6e!/V#NTqs/,$V#FK$n
%1k:,E[!pREm7qKU&5mCG1[iKB:7B!0)Wb#1S)GI+YtOb^oLkTK(6'BO;@Q:#difuV-Z1^s`>&hk5GagKgqOur>AI5ciTT9n6]2br
%1d`>_C7_jQoj0Eo0FeEh::[rbXkVQJM.Li8]o1*S]A88S+WAFo+sM7.U<h=_&iNcb5X/$4i;%Dg;*XN83u@RIC4+"hiC%2PVW+<W
%@pLs%nu$H4d2pan:V]@[eN+#O0us.52Fi7]qiqO%0;mWH[pGPC(.$f`HAf.Jk%IT[f-5OKRiRl;RA5[\#@Oni``bjlg*`[=iX0(9
%FeWWt2=]_SgKcSqqG@$(iSU&GqUbV2V,sJ?q<pY`!X2ltrgN?*7V;JBAtqdZXqHo/p!Z4A7M9Kj)WnWeno1)@7D2RcelpkGaK4ck
%0FiTNJ+\;"n+>YGY%^N>12BB:B^7e6k\%F\OKC-Mp%++@R!,TP;`(6a":\G0H96W+X8Rqj]92JuC,9S4nn3hsr-<?faR,PZ)P)fW
%M*?28okKAtT[>UFj&_+$r49Ej[+Qpg3OFuoFN1VE4d-S,9=/"s\!:ZkM>]a7Pe=8%V)B2QU=Vf?KS/1'L5a7OBFUF-Q%&OA/Idj&
%NGn/;Ai4r+[SG#Z>-V</0d(5.3LW>&Dea@O^r`)3ep;s<)Qau9]W(;*g.2*&=`9M5eDk_.\YS3%7-g)SB&!mgX*-1"8CieK$'!TS
%YGT2OF'QC9:6[#G1g8]LYJEeu[#K7,eh*)HO^]t@e!o(<;1$Zle96NbR>+,/.!4M4KcRE>]4NLPb<N?@2HD.X@'*6ebA8_7\LH=Z
%_Nk#M>rc]Zat6l/)0+c`\n,n])R%lfhRkgh.?<9o3ccb06OR7=iQEg#\V2]g?MJOK?Z+_K3GZ?V\Q%=O&RTG+Qk++Q]CrS^34^M>
%gOIF9H7g4DdX-,CkjP$"#307P//k!,I%=TY>,_D$F'36-1GdncB'fR.Vp(2:YZi1@HM);oHTVg6\)#h'46tGn="JhrO&.]nY,^?O
%Z:ZLpY&d@8Q5"&_;`27;qPVX84s-&X4QR$>_PlUtnF_T%0#mc?#rV=TOX;t7gYER%V'q2a%D$369'rQT::Hobo:+GMMRrNeituYL
%jmnq_1gNbjEC@H*UYO]$ZdWgB>%sokg?$=4R!sP\G,s4J?Yb-gQPjp*<c(Q(_#dR'%?p+FC)d1IZ&Se?i&:4Lg\AHGn3:Jo*45%6
%IOSQUCZV0m`fWB`-##<^UsX6XLND`:"7p.9b[%@r22Pok^2^h;a0\Eg'R%]3RU^hmK;UneC:bIpcbpmsR5bs\087mEPaR7Ik0<:e
%;=F,$j>g*aj_hb]dB*#iUmPdeV5--Oj+;(RI^<p0%uV'N^Q82)e#h4n*6\aU?e2gO2.1GOXe#)^I6QocO02qhjg1oV;/SmrV^`cM
%`EoE(XI7g)ag^#am;B'"h\8)Rl*'SJF^>jX2J3!GL7V+ZB>%NPed#nC&i@6ULMW!@bA&'DkfoN*R3j=GmD<iqCW]tl]:B<ld?d1u
%:SA^_?XdiCXte1t(e\r9BA1>W6?l4_n2a8UhOg5-Sn9cWIl:3\lC7?rZ.28Xlnf^M3P63$U@r^60?0nD+D:=Ur+R)(GZOI[^ND,W
%C+2%=ato"\0I)nFN'C.#MP$c\r8i$*D9FI;YV_jFT0)'lZAB9KkbYu*F0i?!%T?obne^CgX4B812>Fd#BbG/*?#FD,\J3/algJc!
%b7/6V6G:ubPUeV=8*+<m1Qs;d=f1.UUtTFtdlC.]6dLePR>:M>;eaQl=$4m>ZSEbTlA7_QDjLDsj5:%LDck#9:MjA`,c4e[SYh3l
%b`#(`F6@QZTD_;JV!/\<C#nr*p7nPQ[%4%pW&gt<)X/_p)E1157_MePVl3iI?_W.5&Z42WeF]UrPsR[Q[MDX;MDm80Im`UAC6RHl
%gZ9mX=0:'D9tW;e$_-#&Y$13nROqMhKBD*L,^s3$Z,S_7?&c1FifX/mGq.2jgYL@[;Q-jL4,k',^:?Ck)h4*%V'$)t6N(p`V:?hp
%hABBnCo<`aD(a4NMQOY"DS)<+YB$rgodn7fH8ChF>5>'s0F&,p<T^7n--^&!h[,[&E6"ufW'm&*_``d?-tsaAR__md3W@rCAPn@@
%,IJq6-oL\_1R/ERW(!*mI[^7>Pfc,=U86Jds4eL,O\MW*OVbDRMcu?6/^"*0/P9TGC/NDqB)37g>h5Y5Mcu?JO`-LR/^!_;U8/s\
%oS^:"W(!,./Bo`se>-Qp)56/.5G"4A9Pm(P`FB13pC"1<K"63B0Xl7(i-/-qIWN;B(A1at!:6f"oJ;i;j36c2bL_,QAg,d/,M/H>
%>YBX"Kj7j'[=qkT$+[Ln--3r.RkJib#,3`Gg-Vh<DbIKlYr5\'g-VekUtYjU</YCB:4@7q_CQ&''I`agWS!V2!%s;ZooG6I3(>>n
%YW,+1@l/Rl%dJPp)@)8mYEO7A^h@L$4%8D$T]0C[lEOIGS(cEPgHm?Ne?(U_A"UW*[DuKt*B`47Gr%8LGfum][s5GP\[BE"/cX&'
%k31om3ILKf:IC]kGkRriWn,J\Xmr#[:6;AP/,'FN2AL"S@jK4\)hs[+D>J0&6iXneJ(+F8cjuOiX5C\;M_EOk)P*c%K_<R=mf*Zd
%mM(k!l@#nIr*nX/5IP\$'ZK_%NGga;m2d_-rBZ;O_U"0_)g`c@2*$t#XNcPDa9Ps/P>WMlN:/OH_8!Y!F.XYjG<'Q5M*:&YUEc[C
%(8p,lEMZeER[DQt:ZgnQ_K*-B^M)3pC"3,U.@)fB?sI_4_0"7M0\o&er[#KYRuY1Z*17P1/oLNfb]j&1*a[c/jF7h)>i^C"R$msO
%mp(=SA!-dsjF;eV/b6Z7r9kj04$oO,b5\cPKab2ZD59#$(-1::MRq,-&8RF"SSGoTOn5,5)3EjoYMPq!7Mb;eg=Mo0c#8KoWqE^)
%6(6,Wb`$d>]q_Qn"M[1U408f@_)#e$:87DUmHRcTd:iP7H#&E9q*gnoXB+h&D2R-YGF2jFaeP/?\&cI$V%F1^4]:RABi>7p#hcRT
%aASS@7@6cZ[7-I!&LRAs%$SrXf4!i%9I>_$NUq%if%M8<\@+\mXe3']Ib*85>(<;OX)>;Vjjr(sp*+s/'*l]R&^Ds-\)&+sa*j('
%+j#A&2oUJGMXAn3oWOM<ZWPs$%au-WCmLDq45FRe8jW4Y-#(<B-JQj^bc'-m<QL?gcIZWY3Jk2+$Cp:P7%,nXflQ?&%_31N_@iVL
%DJXqSFA&jlCW'LJ].=":MnmL[n?N>4,^6X%]IX+;2k\Y:JX7er]Z;db#e\5,%*)]jJX7hZ5T<f"n["Gc?NcH+!MjK`j@D<o1EAcM
%\#[dF)*"(s=!k(=VHKl`SF+?DdbN0?p;\N.4DZ_=O%lE'/t@B)S;*r=rLo';]mik]Nt$ZcU,lGi0enOBDX`XB3W2"\Cb*QF92*g.
%*3X'8:;)7LLR4A0"hAl3BqZ]JbTcqV;i\2ODnh&)Qkap"?=-n3cQ'[5FECB_[f;_Q:[]hU.8#/e3P1QKilSEm]Tp7Ac9@4?F8P=*
%=6jAlh-)Z^EG">]V>(C0Fdtus'U/H?F*j:<C?.4I8F],RDKNd/I\2\Fs.U%n=+nPo8Fl(,"4K`-3=SJ34LFqUcu`2jR`qHA[<.[$
%@DeR4Cq>mD4+Gb\W@H>,]:7NuWc"`e9H',Z"tc]#">C@i0;g$d)Ums&,*"D.f%$;00q:ZP@s/9_73#g+O-6u.@n]N8,7Q(;EJu?u
%[#6o`[#4BB*+KT$R#s?4grt4-<UJ2`4.-KV/-V3^]&cQ!gj%APVlBP0r?`^8*.DWE)/0PKqm>gaWG_"@)rK/BZttW/@8>"Z>-V</
%0rVK0C$`7$p,BCg8rA_]bd]O4p//T]YDeBt-3=?aG?f'^@_tP!Br9D0l\3Ij<;TCZfO$`tFS1B+rh6#BZ@)2fOE,,pGD?)G)^NDC
%Fo(J^#%IJlFtnbJ%*cm%6`FnWZYmCC7O)oZS(c!!o2a;a"b3]HCsYB]pc0C;:Bq?WNjB]>S=eD/k3ee%<5-Y:KPI]7a_MJ:S]i+c
%2I?VpWO=T-"^buP1B$<@Oa]A0G7AnbU+U/9Z7,L:rIdLeP$'\Yl%Bbi&MoeKd,m9X!"N6Z'X"!'\4QR>iQI4Zl@gncYD\'f2n/;=
%(>di`S,7uS\J1@]_OFbSF&O5!kHI'"`MNMNo]K-=C>mGigpr,#[rCLGmbG[MRr`f!ShG:?eTPQCSQjY-_kDG/DHG/rjYX8clFj`M
%1g0TpZgZ5bflIQN]UkO=NZmMtnnFF@F*dA!nZKfhbCljE=/(,n.gE=*!TrHoN5\/Vdic*E)J!oI&$N1/2Th<.NJmkF469)Js(abt
%(pqopeOU@MQL/RIj\gP7IV-N=b5GR8U>=lb.Y@2&neD&1G@IF5a>qj1c.ka,Hi01@rqFThWKqBWinquRp[V4H=7c^QZZ;mc<%4`O
%";8stMTJbGS98G>>5HRi::gLn'/q<3BCsWDS4)\4g=78]WUA_'OQ<)>X&hmapu[;m9JP)Y8^"SI]mb7nfBX'@l>VfK3bd<T!>B/g
%?EMW"'T0$jhg0@*.LR*%]W(ih.:28=2<\Br"8B(/2f(Yml?m,7l*AJ_s5ZNA%%!c[>$,iEABeEGCVhl;dERLg2"qbQ$J?@Pkg#fk
%G,pqOAf0nj`?nHdfPB,-UKqKb-sG7k$_-@0cR(]9B6^;5U3S7cSkij0rdsjq+k%XfrNBK(R7rF[1roXe##B^UA*n;AS&?B?S(g=,
%;"jNSj"rkUmR<iQ4j9DM6_iL&.+cLCos:Slb2%CDU01.^D2+HV.r"cq>[:-WhlN=%_jjc=cF.aeUKFC!3MneVe#j[oBfAf#JkX'`
%$O+(;O:)6f=8;04:,gI-"F9OB_.bcQk3ntfg33b!N?dTT%A13/`7mDhaZAr\Qru7*kPA+qF889")1S$P=f1.U]PB27145F7pTCIJ
%RRN'P*AKMG<D\!2PQ+MY'ga89PlFE%pk"5Zmb'JOh3V36[HSG?F*\.1?6B'392.M>De/4\o6o';H$CUpT8Pnh$r'WEIu?fDVXiNg
%5gB_aC2E0[^0]9Z],J:sGX\rJ$I!Z*62]Z:\48M7-V$u(Z/(hTVlqK5B&s`O]Km"4]K`H>MtQL#Km[c7?r%_qqrQ9`BUFY?Ule62
%@c@j39cMn\[(]s_;B3%nLGLAKk)%3cDFVgn4.GUif^,Kg9V6fC[XFpi+me4Hb4BV^h!1H,q3&T/o),nRfOlDn+a,_U<p/8W4g*rg
%b_jk-gS#-1H-8&`s3/$A71\RmnmkerFOj&8s.L04o-6e!\NO4[fkFI(O!-7%#3b,J]6-B6n8g7`'#%X5YIEN+r9+)dFoHD'?i65U
%p5e]BFcRC$7B?AWMuNru=oLes/^o"B6@4#IlXsfjW]*#!>1cBhm,Pj4ndbT\I2S,6qQI!$S"=P1[&dc,[c-6Wa)cW`rbrlZf?&Tc
%lFQ3uG2a%Wp,jSk5)4-0P*,LRn?;$If6;iFOjUS\bKQk;>,M-<qXG-8UT(<$6EXZ"K&`6lJYC_&-R8#Ogo0oC26jcG;r3P:)*0\7
%qMrVNE](`W?U*jl\mrjI/q5pXrk3cI".=g)CuYDCJ^EHgs7sE^$N:!J[$ksZld;k'K-oe>\n0:M0<tqi.K=YbX*NE:@&X)YcFuZm
%EAP[)(YY-?PAK&A\PJ0iFKuY^^eXZ;65U@Y-E._EO-b4C30\gjehFjQQ>lt@l/YG?ZZNL#YLP`1=mkuA->F?3N#sBmCZ0#Saa_Su
%W`nJ(V86')?+I%2I*7=I&i<m^M@H0.>PON7j:XOh90@8plbDH8UtB@nq<qjO^Q4U0FnjBV3`OT@Sk*uZdSTe[)$*'t1?eDcc$rP@
%9Z8Wf-i2DDVV`]R?Am;4;&3I+Q!oD5LXJ1Vc`-ra\N-*`](9jDB>0CHn*H,"=7=UW9R;\EAU_S-AS@L>_cjTj`K&DqPa3*tq^h-Z
%n'+Y5[o?_5jY]H`W4i"tXm2@A[2e"k\A*k(ZXOZuZ7jCCZBfG*'DFAhk`f0=CJ+:h;J3Vt^1om1m64ZNV:o(%^KWpp*2DQ5N-:X.
%@tLPQ#YXaODl:LA+=/r]lY+lGjXQ[$^L8krhd4NtWf34=iji0,#2-gih/0MpbDjDCB@,iG[<>1jT`j4ie8!OoG3<^YlK""]:`\SG
%#+NY_L%+,nkOs!\'?5C?0H5*hV/kmL:d2'o%bdI>-WmBW).(t;c]l'?drr9+c1'36)'a2@NBXW7H++R;?t//6keA(AApkq:468)t
%6.:)OC8P)4Df(<P7`Pm3nurgLK<_JJH8\Ug&k!amI\mdO[8X5/,?,$OeL^GILP8d4e*[aU.lZ`JgFft%aUS+6b[J'6YB?U7K[#oS
%!U!uG>OBREHdJZb[mTG>Bj:&6)s)O.BN*s,_e<gMdj]KU>s_k=d"psLQVJOT2XU$FdGskjfJZLnM2`a+l]14t@FKa"oB"QLEpkDB
%mF^P3]!YkHqm2SKY5R&"lr<<LnnGd7mg&.%eA@u3l1YG]%O!Vn5,06A=<k`n@bB&p7&QBZhSl9CbF`+lWqAY6p</eiOAHt1,#P"?
%CCrRO'E(TUS7BN7-JMt!f7PjPQ7:@5ef"mCBUQ2G:h#k_]iE8JqVCjVW77,U2lgNMod#m7^#G^4#T!0CeqHel?PUfI`5XI>qXk7K
%Vqb3-<%XnA'FLXd(F&X)k3LO\GlFf3d^_Pmm+V9A+-W/RgThYi1`gcXP"PYNep(6`dp>]79"=tUpUGcXjbKsp(:ER:+ji4Iq_A"R
%9HBfNOLN6O&]k/q-ad5[bNj"':(e1d$naUB]=3:@\fJ``"73YI.80<s1>f86,dbsE,ILJ4lciMV;JFWBF?gGsplc3O3?^5B@'oDq
%]3DC;'c>8u]k[;*^B]q17-hq9_nT:JbDL#^FGZer^uB-lD7;uTVbuIt@`L(I+Rt3"INr&3@kj]n_1>FDMrq<NbR1kSD5Z)5IV?+:
%YG+sd33%ci7P-L:OI]-J[_$!T1m7G7P$BpIVB'Okp\.pBCpSf8X,UmpD\C=$%2&d->5$^AaX\'"]<V18=Jog`4GH+;&m(2(X(G+V
%AI;_+5M\'\L&Nfi.b@uE`nC,fP>NY2$beSaBt3,F,BW*\Ci*J*k^32kR%m_IDoHQ!@n]NZ'rTKd\T1A]fflGqC2"TPH`-OcZeW+^
%:nVro*huqWFL05FBN@$jZs,rl4tO@Ip49*7E9>JO#O$/mc+DMB]3?Y^(J!SsQ=hJ10A>7^7Lk-X)&FkR*/i4$ca-^ETPP=\hK<[O
%1VQ8>^>[%aSb=P(7ci5:!_P;L[!Geo1H"H]3>f5Za6\s[egP`?TL1X8H,[.]oB'VMS3\n;Xq\ff(4E*.*"-gD+g>HHj,1:`oDNu"
%3^d,g<f/rF,oI6RCe,JDQ[0!CAQ#9q\)!J%VF0p^hE#FJC=eH1CJ:67(=m31gUi>nd5FN,:=_.Vf)>BX-8gg!)J<mXB"<9A)d5gj
%ehN.C\T*!CWcN:5l=[/W$1^kKl?(A+XXf)Ig@YZJiL)N&eEYG)'CLdYa_;bBhGlu4AQuS6144YR>JZ=GX1:0?LX;-I:M[g\%3=Jo
%Y7`nGMKCDNknZuTlA#kY]dQrth9\I:a#"_RcW/*d5<IPoJ^:[&RWZ57T3'S8I'fla@A"arhn0"T;:Cn&3,VDfGZPCZ2jD#&KTK9C
%Cj.@18K;Wq$Pom#AuJ.:cs^PG:X!)nk]jW&+C05"W8e#5V-E="57C_\8SsV?8BG"D/Eutagne<p[k5'm@>O6,AeQ2D8i(@,/a(mM
%5+1$ArS>A]l"<15miCe.FMkB=<Fak32!aacE=Q9<be^g:W$36>JnnD*?,^_EP45Y*c!Qf=?oQZBh7on2Y@n7F<7n/pk9u$*8N7kB
%Uj\uN;R@d*+7s=/FE7j7&Ye@%)QGc<6-i4U\hV;3+)cu@d6I1Tc6q<?E7E)0X*eEal<Vt&A7`6QU))I*8`b&@26?@`5G$[=Z;9IQ
%*&kEI6Q0%*Z?W]`pM*YlDkHH[9b^+)*fo*bg/63E;f?Z'7UAh\)1aV"\\0MgNlb*>,1VM>jc\%L*]2jgo8"1DA[LYT&M4o8].[ZF
%7u<n72Qk_QU`e[e/T)d7Z>4AI?u(*KYa&n659)7J'<^.O34]=&d!?>9`0`"D,oWfr(.X*mG83$CZ(iA$.c@8M0[A[qfMSm@T`/T+
%EDYtmeO$uE"Pr0Y--V_Ap+tf2<<VWk%_Ko%]A7KBhD'3fJb\2Aak<'<f:IqJV3ibE0>iq9*<1:L=KeP8P09Kk)N=cE2ajn-'stn[
%%LU1=6ESkCMs/AN]29)%C%^tQ?EY]p0S;QpV#FH\%O)(?Dmua'(r[=>'o[ZLa5)(5-#'o66NJnV#-Q0JN56E._GU.rqi@&AmX%fL
%?01JY]adH[(TTWXZH:B,4n.Z'5&s;*o3A]7?#5<Ripk!\H.jb")\]Xo_`%'%Xo<l*P<c)M;^d'NCSVQl?:M0cQgIhcEm\__CCt/K
%:ZI`8'p_ne]HGNj%$iPj7(0:*Rt(m)fisn+=4>Y1lrNOr-FJeWAikl3>d]blUo%fU')D2N%@a#-ObiV3G5AXRq]jI+`tsE99Y"BN
%OF<R[Oo,W%0]9("q;\4#b4Nh@ED"EV$rHhOqZR$-N05Xan7/WT5-8C0ShSW`c+N<2_"?MId4[6DYP'*f+V)W$>FCp&'e_o_H<qra
%V;;j`1,5f3A8'tAJ/7N:dr/`h8hEtSS#;cjPXW>oaGCRiLlFhm[Pt-i@)72l!_9,__8OQ<5*@R0oOcfid=UYsbb0*8X&mt/i\r2+
%/)>MaOpRa'iSfIb9>j=e*g"rF6#i(!O>g5F]+W<>N]RH/Ric#%gP.)>m,Yj\j*8K44,qHFlB;8r4#utK92YKNWc=m5gM9fFjb>YQ
%R#[@dl:S624Rnq[.?a<J])L+F?>`PZd)P8TRJFTYRWQd]LU;Bs>1-S#mO'ME,Fg[<TqN(h>S#"4L9Ri9.97CiEt=,BghAhY.E7=b
%@6FREU(F.L%uWT(_\"]*Y-KH$lBEX7Pm@AZ?(]OoMZp7p#jt\aZdd=dTmqMSP,FYQ8PCE@Q=5`WKbVTHi>*roZ+.O,(DoEJ9"04P
%m[))2C>HWOI3PqFogX]>^rT:"&9c"S$tcpq1,?S7EKhl29.QH@&S4u1+g,YGbU+gY-4+1i34mW24W9gls6Wke&/$0%!\dWcrA1Uu
%&7bb#GUU`qhGt=M4,t%T7c>b1+N.#=F>sAHG.Sg*ZFQb.hO\?raITI(Sb+5ol2J@lO#GlY^;!No^[g0m\%fMfe_P(KXIlt>4YPYq
%=h^N3Qa=B;cC8H.cCOX12nMjl>#3aCTC9PMl4,:]EQ<=g/a8RD8(2d<mtL?JmI&QFfBgDWc';%BX7sJ5UM7.p9"2AtX69HKo4P7"
%>FS[\-sqK%Uf,9Gn"5Zb<N:M@$/IpfC#/`tgFmsSZ>G"p?-+tYV-\'.W.4@$M0!<+/6I,RD1?KZIn.s%cEuc4b0fXgrgEZWor$-H
%j*^RfpfZYEf"Z$<?5C:lXnT-G7tm5)6#h1ZH:H@;^5Ch3ZkUg"]Q:P$>E/CCBA47$r.Y#F:LN8<]g>.@rRfhOHN0NQL_egiIm*hc
%VSDQt.-st.DJcS'hs]]f<q!E6,2SZe".I70^AOq8;mB[_k:`p#NQp7AH10/SX-IUa[ds1M'_A`K_^BAphmqC<<6CR&X8ZeqXE5V_
%f!VokgTBB3[U0"1]Xlp$H?t(KqrmVo=$!qe!ulKh[IO13UhQ?Y[pQRaXigV)UW5#Hf%fENa*$!>l^aHSDIlUnFLeQ06WOQ?HZ'43
%merUOcIAl[p&&!]Loe@=]Y(gRgMXM+9sKHaV5:<lhWCAQ4"J%)<s&eVT:@u=gjK"bUWp9u:[?$bSM*+nPL^@`l&#$$%`n4_H0;hX
%!EDq(0-<0SP!Ru+9:GkAcHF(.H1PA4et\:39]P&dY<3.NTkUm_gNs_9j3a(MVYk6$h9HDU5/4Dp9oN\30_U<TheS:E4P<jl$;\ti
%bCSM5hV>&YJ+])+)6T@HgY]GlBrKSUo5G"CU*]$HNt9X<AhhND[9Yb#FHZt#e8d`6h^c7t_Y6QSZaCT6G08qDGIO-l2m504'i(@]
%N\;m\gqhghbM9@2Jd$2_QOe;=;t]1rqeo78+dN9&-Fia7AMfk-aEF0Z7/P=`S/pur)5T0-q8&gRG;e:a.UckVB'2R3oQJu8s1Gkl
%m9[H1emH.<b#IruHIj;I5$WB?h=eSn@l([g39gTF$0#DBRV(U-j2#c@d*T80kOpt8f</-j"$LX!gKPW;rS+mCkP`4F2M\4K6[_5u
%pYB&(*CH_&aOYFMW#?ZP[Gpbjc@c%KF80b<<82e&W-,^&>4(8<7^s(^OUrP0h;$+nSU#*ooii"up-lEopY@Do.3PSS*W9ZcaR+K5
%ITame4ngf3`G)`IY;SVL,ZW3"GIufrIMWI]oLk60DEg4so6=p\1_$R^[U7\#>cQ1VY;[V@9^QZp?$g\,_sJrGf1LP%F8OJ]+)P,`
%L2aH'f5%#?lb0mIU3$"VJaq[DhQpm&)n#?c9fgaY&&;^/+$G)PnTchSq.Gk)-N1MTHFV]oWA\ffhjtY8lAq9i@Xtf^c^`e\bP(b_
%gZ,tfEQ<G)Su11gV!WO>1"+`XBtlE\pRLpN7/2>J;n;gG0:7;$8u!rUoY"&p9-c#0hp3<$3Y19<?C.:H.(jK/LDLK-\JH?J=u8rI
%U'D-&[Z90jqt\[$@m-MP*o8E;jmIUmW.`&tn`7Ng$f2-qi)YhtQ@1gdCVU!bE1,'8Z0i,oXmWWA<fS\k$'DFKd1LkXpX,2FNlf&u
%N`NSlq0N!^'q;gh-HCfV0:o9]2g=Tnr%%6ur*`7*5CU/N[,#u0AO3Lqd6VogVtGhrf%\Y2pYa`J6iHZCS"+cmf%hA,_;2;?I5bNe
%_I$)pe+Labm<&<+^9X8Y)T&)m1s&Le.DtZ$D+M`1pZ-fb7j[1QIXTGr_\r#qD2Y*.S#]!0?7d-8-QbE3BX.pNNV7l:_R[,&l;][&
%Qj+3Na4L`cs!6s9_+h/("'uWo!kY.WEagcUWRs"m"U#hJ[_\_-e*n3l=Mge4Zgp<_Ug_?>,XT&j#(GZn4H6Qo)ImmkOfe57f-(ce
%(o?1JS+5<&'RXpII8^ehL_;Ph&2?R#i%#_92o;Lc@cT94/,CV('i)F]/V9ik'(h$<nZF-q=>^$mmRtbBrDRa*P!)_4"r`iFI7=&h
%bdhaQA+B4om$1@CJ<@n"Y0hK$L"E"C9@JQ-Hp"db&2!4i0qK_YPE5S2Y=#W#[##9#N,K?)I1e7f2[2$XMBfG>0(C%u,D&qWDMjBG
%*]G[^@uIj[Bc-/D!T5^Qr/"#ao&deFH9GkNRRj5kL,8<K%inGqYg7e*&qkUSS[[9.''J.HW<iH-.sH5]rdkR((S)`JOZS$hU/g!s
%oh1`cGA6f)cseXi0oKW4H>0^1dQ`2j[@nVrHF3;;rNebuXko&j(bnZlfStct"%0tE&4R+Cj[V&g:%uc'H*Qbl-_'VAVm5ZU]CE.*
%baFfAT<jlGgsREj+(uRrrEODf<`dSJ_Mb<VXS=X,-ah`<lf_(2W5$s>GuRsO:B&rqDYZqr^um\)&@lF_L:pC'5B?Ysm/se5Ut+!h
%i.g#d=D,ah`[h[FU[mP$kC.l/=Er\Npe<V2c@5Iu0DFJ^CY7!SD/Y^mGC04pY-\L.c8MZmce6[QaBn7;>jYUsaUu#u(sR3\I&Xe-
%SA">2XjmqGO\*7X,;5!qe%#A@C2[gfX$kFT]qpN^YrUd!^X)9`$fBj4jQk]o[>hNTdQ*`0%s:4^PAdUN=D_PjX-)'\/_m,@QY7d$
%ZlEqs*"V4@(cZb<3+%+'<6XjcI.E7*\Gc=#Manl[C\9'9f-S+nW(OQLQc/jU@cT+.VT%e=n;Kq(Z^Q(LALIlAQTQ0jaZ,pQh@m`n
%d5a12epucm\Hb^`+LY8LZM#J<>H0k:IQMi7(Nr$QBB6Jh(n.^F]c8*forSIkLO9r\Bfj/Lhd.,EhE9L<WEh%l&#q_N.'boBQ/E#n
%p3#u`jgapD(;G<DGc/(#)LO?,r2(:7^uieq[83Au.6ZR;IBZ/Pq9XL8!s+#b9=`ZXNntNZ&$!GV&^RrTC$t*@oKXq?3:0,*oPecd
%pim,!j=`^S>(?0TpZ*UXY:j$&A+mn8ji^/)p`H"pLNab9RBPA3`oC:N%q37=>H]q()Ka+P+T,^`(P,M`R/M5)/IeX[nO)*R^4,_H
%D>?[U_m-h]n`%H'E\T4b,mW>R*UQnB'5\e7NNG.KI&6uZiUQKSW.FKap]nmIV\d#I;qc^q,*o,%>,F$7HTNSqrH)i8c2DH0W+O\A
%gDadXKC?A22rtQ,_g4[#Iblho3R:_n=Zmbi5Wl/GCnH^I)a/"`*$"#6BIT"IR0Z,cI?HJ*ak\J;>.(,^a#LL?*92)oFRd15A#!/1
%58oTSI/*8OFN>0DJCqB.fJ258SQmj@6(97Io0FOH=C'`dJ+`aqe60i;m:%S!UPZp@X.:@"H=?4>``@W<qmEhig=L7.BhtmL\+!LW
%ds$jiBRXI'\c2eI/Ra[PZF9K4k!qc4@;k>V6g$"t_BSCM6TKAZr:%/Ghu0KlS38qshcbM:N"75q[rCm9;oGB'`A^j^36uj=Qp-j2
%[:OCAq\>jaa,NEfZX7/\_mr^OmJpi5?6$_m*R4&eD3U&Po0'e!F/$(V'[D^H#S?I+ZsO;`p/^V1:?A/=@*"4gdEM3Y99QIWD7@"J
%l>>t!["\,8YDt5bF*Xgul47n?LML8JlX.=]UADKWTM<Yq&c1b^)Y$Pd+djpSh\8jE0%Pbi24j_Z&uEomD>e]_WC9%%?A"blg,[LE
%cebfq(m,\Zg@<u@X2X2/s'Y%LrNrqE6t:m"(Q3aM]%q%7B>cWn+.XeFq]E7)3kdeh3SBF,6VUkTFo1.M<nq6!>!;g=g>q:/61[=t
%0BR&qAa[')f!cUT*D\IlIakjXpKokHBQ7H:_FpETG[,OoM%3>?Aa]&4lc1E+h!*qdO'hUher*14kGe'%2ubB-p1\1u3e>"b2sZ`)
%KtYXf_7'$^k`8R?l^_7U9XNEjjl]E4rj0qi^,1ot+g]+)0:\"<GB7DNo/g;1GJ03bPEAgo(_%e86&]tfCP2@FD*GJAF93fHgc8[;
%fL_On@Vsul]t6eRP<8N!BSVX4msP)jYAi-7'W&G?S^Zt]b;@K?b=C]mh!spJ>7$U@\egB2P!L\A)^QYjK7A=k_^3Xs'_AjgA34\r
%+Z`^VX;ou'Qr0s:^Wc'bk?S&Vgpb"72eec9g=Rb!$YB*2%oumba._0UIbO>HVjCVW:HD#[D)YYP4iJ8GmE>D*kM+RCgM`ZHrbUCd
%[9%)B,t;%_Icb>spKiu/ZI=gU5\I,,rV.?5;VJ?lhB<EhUE>K#Y'[Wa'd%f_kiZ9"d&XES+2<&#/QA5=8g<:]CKi-Z^OLMM8Rip,
%gYXXMfT?Va+%#lhHI`"$3:ib$$E"F#97H,0GI*ZPZu0pnFbjbI!_<U"^WNa.0"cG6\L),Pj7Uf7ECW5t0!=@ID[06i[nM\;Gg1M=
%bWXX&Q9'1tYM<4u&Oh\3#DAX$LCgQ?_Mc+^#]pNHUs51@_2%$9eit=p[n_jj*j4_fkIs50hk1WnI\ZN0e;K<%5$WOZ*)QC^r>MKH
%[[)YGGS1N+`T=dFcG0/Pl;"U'nFENfe?MQi]W7TARG/gckYOn;M#N:u/kuQ3gnQt,*<#oDXj,D_"8+KaF`/'^k0MOl`uI6YG:msf
%o(JQDjkf5<a:s%>?WqC0,85W'nEPf!di=X]N<a+:at`Pcc`;#d?f]oWq[__ieQ#,*\Nb0CY<2enh#7t"&3qnD:d3V3]XtQJ`?V7j
%*5ici9>rR&!aBm%52fHggX+6sb<gCP@Pc$::Rm\nn_o*8LTD_9M*-d"#3RNrC4>9Hbi:_0ho,7-O&\;"MAn(T,<p[Be)IC?;`uW`
%^Y&5>P\-50rV6qPB]P1K4(lF(1n<=`gWeL0pQtuhorRa04J%\LiG%/:Rq6g(p&78FB^j"Y<A8U*Yh,uN8<7UHBo*:sq!I1+5MdmB
%?f+8E/,unY\tc-J?tae6H`aSpg4$IkU##7PG@,O9htCr+2]pk6l0OM\@Q)?W=7;"$oiN6MctKZd33lU6R'RGMjKjV+a;j)a'e3o5
%VVf#[h\Y_j3jig?YYD833TMpHSXVI&4VF[GS]:Btmg!'N^$=p4iVE%b&c'p>Oa5),b"]=3G5Ct,D?Ws'7s\0Df9TCUXgE&ZGH0T8
%Q/(\\-_rOK9g(,!T+CePhP]2STjn]$L<Pt+nbT;iVh=!<Y=91qAqmklO)]o#>hb9Q".XUeM'_Q['BtDKbD!9LSNBUH7K7AtUleqU
%:/h2(E_[>54`o;j4uu#"l-V2%bQf_`N!-2OZgQ^hqtdo@CH6=Bf1-h_)1$YkpKP<9mr'"K4TFuI:ttno4!L-_#ejH;[a-u[8Ns=<
%l_jXSdWS,fT=h@?c\a+K0<<'oqmGHp7aL&b,)&bL2]RpfhHIV^BYp%jh2gF_kFL)^gq1G6IBPg[a[.-daKJE[$]uaWZGY`go`J*[
%q28%<5Dm"(Xj6ddhOpEu-9BE_h*3Gio&\'3_tmQUh)'=j4!2fBG/B=f2`[V=IoM*(.d+Iplto-bG$0D'U`Fi)O2!h^.i&=L:2din
%1Z\OMU"IN$,`R-J@/FtSF&eY\6URH/YWEaC=/049+W9C7YA\@6%uR<lfr;+jc=<SI2E8Dq0eLfI-?n)pI<2"XG]4OEXF]O$qjXFQ
%PqUn$W3=U-6Fr+/d`.pF5h_DD&"aY5hq&A&fKFMgqr+@BN<Np=N5f6i,`ms94sk9`>.im;?U&m0#16?^fIq\io:!OXWptDG&$FW.
%hAfMHkfCJ@.5'l.jB]Ma>U_eMFf*.P+<#HGkO">:*,CAi;TW2d)E_gE:+P2uGhsp?[D+i`5a*tm/LCG*LT'e6mNC9[RX=SpJJYQk
%8db"T<!KhHHMc%4A)CO:^/7!qH+Q8QRrG%\SbA-p:Cd"KIst8-NuY`t=EHMfa4\_FJ+V;g19t9^;ZC\`Ont)+_><cogQrKZ'$g2d
%ZAi3,n*_kDT/B!NM*._\GI*"dO7(ZjW>kfJ4-e9[.[MHo1S.3XoCb=Drre)3Ag0_D`SK8C\iRnQkM6gB9WR61YH=+3m9Hb1X\Oga
%0'>.$2SQiWG$B=6HK!'C(B\Z.UW1kg0H,e.K.7n[qBkSi@AWB+n*QE%;5mLfeij&8j#jN;43+BD4rQMl<k$[5>1N1Ls86/h(AeNd
%GAZ[AqQ3QfEGcg\XSaJ[G?8"Mo'KZWLH;sSc.h:f]K+e:\91A%s50%?KQfWih"o7]o8S?.VSLM_-8,E1?SjiZKb*%MXri.+/2:,*
%H>kmU^EI@hn30BIZl?_$)BU/(Z8q/%S#Y>LhR[OqqUnJf&70Pem^qnp/i39-8LF7B>&_%AW;O!qEmX%%4,mE]kfR`>WQ1^q_E-dZ
%po),c@ZdqacjY=(AI0GU_&33/I>ETXCrKImFSQLgr3u!)FMl9=[S?e+!A0lAkPpjYF[gkB.CC"$Zu4FceSk-gKL!r]KN\bBBID=-
%:&$+T(4(SYhXL8`hZ&-qj>t,TI^5hh)WEP9Sn<6`rLrJYk$WmGgGa3n+8'U_gVW-&4;ZoGOe2bKr@&gaf<_pM3LT)niT>Xh07$2M
%!gaO-4b?-j."UmhcGj9d,%A?t!!6iW\uBu-ZL)H&n.5!A%<h-LSn6m`6,)M"VTml(Hp)9?Nh9H3$pAC[KIPW5jnW':0F4]UB%D#S
%1Lk]`5DLpc/#Ec$oV:O#Zq?d"<O^bbj]Zu-6@Bk;lW_#/bK/BA+kj68XQCEJJP8#g)7i<\1[ENi'#`"_pmr,0g.'Z//!gAb<;;J>
%m519Led5m^=G`NP/<:'M!dBBceK+JoI8/G(Bjrg.Q8NbfJ>G95,MM@]:Wq3m4(Gk/03b2@^6-qTK6s&i6[u]N!s0HW7'!OsRaT58
%Pmf0QdZ.%mQjF=&F*Ose@qKl>V6L;/Y&9^He#(BX!aq.+6i_kdJs?NOoWucC@hV>,Au89qf1[7B0F>(_iFEs!/BQ@70qW=sl?HH"
%&sH@+C4q)SGBn\LiRf$c\$M*/!Nd7`csVIP?>(9AJ;0KB1l^5R<n=K\J6^g'97Ihj8Vm)U#K1s!NJak=iY,GtV(&@XBZGH$aMg/s
%K03tl$Mt/Y&PTO0R@CU$,2fK[3.ca:@H#s?KNQ,:X>mdrY`gqLPFt=i/=gF/2eH7WCHAVc,!p/Q!g[Y\)VW;f1n5m9oK0;YpsIK+
%!AXquJtP$L*NWl$qL"o3c)fiK&k%]I1CNG*Q>AStd=Jo56rTXjMH-(9mppCAjS""W[SMZ=#)_@g%]+n,c,Lke!WWg94JJq:S5r`M
%%/BiD%Nkr`&-@SR/AZAQo.Yk4!h)pU&440OYt#E.2@XJW6GVU@SeM6$f(8.UXFa,>*!cRba?Y,"Lde4s=DrF_/tH_nUo%'`LCqD?
%-/S5U!HN9CnJ39EdFH'B/5PgVM*dLML1Tk]KO.h!JV_ba(JE=B,*jfkNudeT%MIMA":/NLjT$K.PBpWi6g"LAP4Wn$:+:QaP>;1L
%1e,5kq,nBJDj?aDoP>:,Em;0]1\d.4Ng,3O"t<!.AsOPG";(*[DkjMsAcfsK)K^o\i-\l_$_us^WrTFOp8e8;3_:rj\2^!ZZQUtF
%9-!F<N@(HS:++3&CXUV;3li+4CI0fYlI%sQ_./c75mXIYl9li@MpL^0?Vg;?60Eg3cip$06c9(RU9Bko"PB$?/()V=_i:fE2@0uF
%OQ;#P99<bJNj3CB!aCUZb/Fl.__m,l-!mm"U*RigcXdBgK,*DqSc/t/`DL1IY1"MbWtUZ\&)Cig7.WLE=9&t]U!kJCc1"&J7LBT$
%0ELs#VKHtc"=!N7Mg90Ue<)B-UG(it%dQI;kD#*O["NscPTfnOCkf)Ie08^2%O9Xb2!A=F)8rQWn''qtK%+lgQ>)\o0;4ElJE_od
%^*@d)B%mNBjF0f^g+R<b0d/i>I3IN6%T9)`l[B5QhtH'ZV,<u$1p=l5SUU<L#7O0RdtHW\Y,Ek%BXRoe0cJH*I+OM5pK]gSKG-Cr
%N+YJQWA,gf)lG@VP(%QX,7lMl>V\T'[Kib)j+2$DVW&&J1:2F-9]@"!?'6s0`e-3T%3e=jTquJ@]E.iEGTeiPF>Ttf"tH!l%rBl3
%Q558bo"h&7ff0SF6/n<X/2\^Dg4CA&S53q+Zk1K:+&,CVFd`q>Rgp#b)^-5,`skTq4#lu^P"CRbI1<LBf\Fm=0+osPB[J.m1m2mn
%8INp5`m@lBaB;g$I986&%XoZ5,Z2f;.Wi9gTQ%`#Rp`QLlkgb/(bM4(28'F'3RPkQlnr5`dgJaJGu7Yh%\Y0'BiJiG97c63RHtQ>
%,`M'-m(0j6lO80l1N(j5Y*lZ_8EcJ(?&*;/BsqmMkW7dVi*MD'VM6*Pd5%7(XY9s,MiS[Jb]$rP&9AL*d$OAPR>\H::j^,P6;h"@
%41'+`&.)oG6s2;(GS607,UV/9PiU=<U6m2\KTanDg&m`KA3:L&(m*$,eq@bZY](an"*64NbXp\MLWi?DpQ.E"3\[*+F-8R&0W#jr
%U4hWk6%%Ur^7lcEP03k#VC?LQ>@R\OOFf9A+\F#XXe6i*pQ"/Sl>"+YoGN/&6!sf@'7J-,CU"R#[O!Ljr1[ng:hU.18Ko:E<fa+8
%_)F"8K'(E"m*p\!A4fV'5qL7eArWp[KH;j/lOApt_V-86KlCr:b%N+5DFW(niJL@N@gr^`Zm<W;OR,T'WCdlp8XU13$Mp3;j<G49
%8WlY*&$2.?cjc]H/@#E#fcW,mN`N5+:aS"%6#CWJ1IMb:a`&R\R,O1PB'Nf3duO:Q`hh-S:n-uCm<$U7lH?$,1!3ZpN&opcJ:\n)
%A-Bu?6Cs:-JK6;Rg2X!?"S6K(R`VoM*$F=)$O((nbU0WrCI]EM)*OiC)Ns?\dF)`U_WW.I`taJo4UZ7IHp-&IB]elm^@],JoUsJ`
%cV1$o0q=W_d%&I)_MFfF1DH\gR6P4>&Sjaf_Z81CGXZ.DM0TORc9u"UVp4@YF9#%**g0GId]d=EY]T(0$99TMAjQ_a)6igNO!KYB
%"=qk+6`f,R7oOOV)G&CFaRp_J$o!LXilQsI!g"9Ofo5b?MgE5IesL5eI;G$jdeYkDneP_`NS(n*A#A2kb?\p#<bAW\4+)GN&q+1m
%%5fECd'ah`1bU:ji\TR4`Or;1%JF(0,S:QL4f,b;Q9qL-lnshiZEG,jO_kF=SfCf7:!!/V?TH;)-!'<K%fi'[P"Et5UC(T[HJ#e\
%Tk+#HP0%^N@I=.2F=9C2?T"mB70*U`jtkbT^]E$N1m2=p#o'*_hN?HVD/i8-\=Un21mbgXn:tg9hDN#PJi]uE$o6U/0b?B;h>.Vn
%98%*3BSI<CH#bKj(W>L&XDpnR`X(0K2?n/pd?FWnmE-V66u]6.8Z,#`)A!F&":7VOoaIg(3r0Vf<er#'OsHg5-Rhppo'2nB9ZU13
%3\BPg'9[Tu=>A[!7%!C.>l\U^\ji8DklFlhi&0+6eR[BWfN/G$/X*.#YosH&]>>o*844M+/B'G:X0TPbO;smZX;*0&&;Y9FfM.h,
%gOL'J`_>8j@*0[PP/Zbo-s7n6^bdo4!]6EdO.eU_5t:*e8jcBa6]\4_NisLWotYG*CrD<$a=C>5KHEobiFj&\=[VOplgQS?1,:s[
%WQ8=QONnEs"l&R!Y&"`&D:jaMKM6&I1IrlIA&<+!/7iSDTnOLZL,q[Bd=psp`0aS"fUOo)Y`]0U3?mTh!MVE:DffTE?sqb%>!s(H
%KEa8IIN^=<1DV_iWU#o[[G]to+\=b?3qa)B9d<BYE?B`[PMJ).P9]GHloQ?26j/:-l+r4lMW%=a0H$N'fI$qk7X<sBF6"bf1(l&m
%&MfNBTo`+ONJ3>0DA+1gTr:_X6Uhsq76&&5'[h\sBF81BRC493G+cl,br<QRpo'=m)b:)mOJJ1q6u_ZT>Z!&',H.^2kZe-6\M;Z:
%pLC5JPJ.3p1`TVLE3_(=QTMKi@4_\h4uTU*O9_s,E@Qra1U^-igQR&6"!CsuQe@E'3rrUlUaO_<9@jrheNF3Ge<>ZlRP^@=*'4da
%*\SC.8e.5V#\:jJ(r`cdgI9\@*<!)G24rK1_?SU7#SC$J&HIoNkV0V_6<Q]k)RcXT!u[;<Yi?Uq>EV^.=*N\18M<-5#[a$>@n@XG
%FM[I"\Z'jjVU/ZiSqQ'<l])r:P`4[%gTE+QK#D\!7MripcmKOFk[ju6E4faq.e'GMG_FWZJH4E/UBsGS/3cptN^R$UJ,M&V'm%Gj
%3&=kPJ7'`/_U`='hss&qM]mX=*qS;$`[;N5`\(tQbX(H(+%\D"$,_FW/6u28:$ZF\Hj$@%m(3ZK65RMP[h)O>LntL6k.W0a0Z93V
%)7j&]LHRICM)i"RF/W[b;$)@\h]V&ub"r>eIguR4QXEd4N1\4-+oPi<EYL>eR,&3i<16/L>.2]Y+qas!_Z<.JN[;-oCZ:FIWktWT
%7371PQf2mShhO"go<IdjcPDC)L\?]"NN!qA/j'X$]&@Z$KL)gLS(Jo#JFsIeb".&e`o%OE;-$*MiA(b,S.0,p*@tp30,mE;^`);1
%gDUJP9qGjXf;o3e`dHPG,%lQTpF=BQ(Xa;($u>oaU=c8^<2L)j6IrrhP^u=2m4BO4[O5X)bSl=@Hph,`eZ`F#6$;rc-:/Uj?&-:+
%&B((qq4_OYWrh70+LhWn&JA0@T--/8H#l!@j01?MP!OAUcuJ^9W/&Kf5S:tu6),>K#*"d3Ni+1e5pUM21d%9:U6@C'%'j,T3#O!]
%+&3#C&:;N0OD1.NaWPU>j2iEs7j*+;]4X0$0=o9&TuY[&+J/#De<2dS0r"``ZG\(+=1I+W/+e4t-YO17Vu\12#r:XKf<Tu^P%MUF
%K.>61R_\j<4X;7N=J8j&1nT_oOc!8;V=CN2NjIhb25J.c_#*Uk'Z*1-&eZI=B)+aTrB$-?AhV`p7$=FZZ2]draJ46(2JFu^%\^%_
%R4BKIj$N5[Z$Ji,?QJtb9bE?H&X<(q<F/"S]hkUe7a`H;SB7/ZMBWG'aOR5Q3f<9b,"FIBR5C(L)GNr*;cno^QQdZO:7[C,fG'a`
%0e#1QDGQAq<2U'nF,Gk!j-UPBBJ+?_iMfS2.Pdr[4KHnP\&`I7/<9m%Z)S5Qo7j;$7Pdmq[RT(@S4eQ#3U1aeh,BR\X71;_DR%'.
%<d<;4G?j+9/%g4O(dJZd:dc&Ji<MfA@O.6o-KHm$)H"FK`WTIE&K+$mAmBk!,SHm[(TG8DU[b8@&=#;<V$M;pU12:7fk?aI'oO"I
%Zl>%n.:Rhm@%edEW/*U:K9V7,VBY._-9/#]U+0WSb+Pg[HE2klWe8-FW:=P7Gt\KI&Z\r#[+1l=d29D<P!15RY)(=Q,5CG"^EP$Z
%RQ43B(_iqT7D;*ZfGI>5.'b+uFG_:2U.ES.P;oRYcY-'ESNIh40o`'(`h]XLGqDJY9:7,*jO4fG2g'FAQ,ah<p8O7-_oY87L2gHJ
%;N\:bA2_sed#h#$,+GUT]!D.Q<>k<N51;<CMte!8gSfV"n,h/.U;F*5Gb8_0Fjus^pq1A)=Q)]LHu5]Y53feAqY/,d^hCAG&QKYa
%IM`Pn-t4(SJf]g5La%SJ$FV@W19/ud1<-)F"XtWb8oISk<[sV8V3e3$B2q^1g,g?uUD;(_g*p)_miE?3.%`q:LkW\Yi`HZn\6s;\
%<.fjl$3JpFL\&pI)D2@;M=<#O!K)8U.^,Md5:EfOb&i@^n"Isc.'k=sfbR"OAk_bbOl]H:Js7,t7:o,RIo7YoL,3#5]U(*6Fs]WQ
%:f<r8XQJKcK-EN7-BY"GG`:]Pe-VAe9T():UJ*+qVB-HIM/e@\7E/gs/YZ"4..]!IClBi\F!cj2Tkm+q-8L>)(8JDLFUhq==e\Hd
%.+8d.[)H]r6_+?WA4oBj.a$6KYV95peeGC4iT`-dNS0\.Zt.#,BL/,nmL@BS%c(b_I:2%uK.q"pmPD(.:>BJ)96fYa_ajg^BUP<`
%Q>K=CgLt`"U4uEGCj.5D7`j@a"@?'VY)6+ZFj7"n\9=YN='_l-.-afsri0ae%2h9$>aTL>IJC[<o_4(mbfG$9r5+E3/ld.)7Tiim
%W4u:GBr\3o8#e`fV4hC684SP37k7KX<3D5q\>kEoQ.<0tZ<B]em?fA/76.QGkZ:n-X=,;oe/BiQOqksZM@sQE/[VNk>#AJ*Y/+-Q
%CF`#gQ*oM,,&p%#\[(?;&p,rHg_:/QPVaH+/?9GbapdW-SlVE/*L$:>:(ODSaJ8QC<E<:k^/h&?'tJ9`dX3J=1\CF,QOf8t,P%!\
%'/p@l`7$^^2ig'H>rY9K]9#K#=9:r'E^bl?OiaYgO9"JmY>XA%gJS&e[O*77g!R7TGHSrPoE#TbL`nCe76m#$ljOMNG_h]iH:W'Y
%dbXUW'^jsS$L`6TjE+eV\aZ$KPSPI/X)LsA4Utmj=<o8'5V("f)/)bYF05n?^qUnO$rYl(`,%-&^nE[,EJ.@==_I:ZNW[%cKIq2/
%*C2BKB-QeQ`1%WTJ\\A,r#V6Y6S?1k6]k8S'sd,aWZf2`jsh8Lq+fZXc!;?FdXjUj]bNdd+itFf6YKma*GPW34hF.QKn>1J63Wr,
%1b*DU.5]BX5RRiASY182BVojLS+,mQ_'bsdQL(Q^#f3X[e+4IGUn5EfN%L*1)FDMg&],iG5tg21-^9>2iAD'A'mNg@nB!qYKMY0p
%,1h[f*%2#r0-*?+5N?4ra:dN*JL_-J+OgW\iA=KV$k\(")G_22A,p-OJi?f28cVTJ,CsFF)BhH.ZKgs?o'KtTl#e<u,+:Q6%*T`[
%'LL<2=>ckCOA!/aM]SVPV!.%k\8`))M=<0d4@Ta:N16rUd:^:/Y[S0"6BW93T-",S5F7\QWB),QPc-si>7>(_-kc4f\\/uA,(8de
%ba"!#U*F\q-3Ph>*_f#c"Ao/OH!*H`U6=1&R-TB:Ub?#p),QqG(a99<Nac"!KePLuV'<Mm>joQd,)=C)Tr_6l?S$70ReBH]5R8Ll
%AiMD,kQ]@?f4=iJ%akt;OTlP\P,J+1#^[^#N?d@$2D];5$2`fXOhG3n!7"$Vkc4i+\e9Qeo$p=VR(OB_Kebo>!]c?BMgT]gF+kW/
%k8]Tc`%G;7;h1Z-@LNH-gMg?3>9\kn37ObMiaR,u"<k_(X__9fBnQT`=9`7*m*ZQ.q/WnDVGFe`IWc1nJJ:#5#a;IXgY`U94<g>)
%)lOID5C=*Jil\un\/%0HW#m/D"5UdY&Nti=KL?B(KJA0B_hb?=6(2Y0fHg_J"?RY7\,fnM\t!"`QVKXo==4;=7mor$KoWR9[5tlJ
%loK0ObmZ%R/6RP<d*ZBn1.GQ:a38n3c=sg-ddNVWHJ5m2lQY"7a/AU?Sget(kfHaGF@dGr5aEQY0!n"ZA3!!3`1ZT\OGG0q6i?'b
%_G+ud1)q;VNs_7l$q,LaA0a$=@+Z#GNj"MMM;saPlu66^,r6=.VQg\VkbMq0(.Zr-OHslkKXbPS_^,=Qh@ah$j2F9NQ@uAQ(iHu0
%b'G$;JHs:dg)j$)TZTcf"k+YHk6pI5n:DPY#MRqj/-F$FOS'pc2.3?_KR"RT1q_nRTe5kh4Gej7^Ot=<CWj)s8Tl?)$`K^XJ>DNK
%U+o7@JtrXmFK@G-e$@]9'(*b8@#p^KBHZU#+;0:70KkRqZCOEG>;N*-8C"sMH,?6t0k^pi49S+<W>%UGEtmnCL,>e[TGNO[9T-O[
%#[t=7h$"p-,)LB-o3#KhjO5ZB7RN.Pi=Z:@NPJl^RKOt7!TW"":m)EbU$i0s&eHd$"sBchJg.(UBSb\_ahG>VdK)J+CLT96?(R?m
%Jn=gH8FV/q@=3%qRt0Le*QEc_jt\I>1.:%C\7[TJTWBRbT#\R#+eYE".bGo6eb"Mf#@Tn>!XU588*h^U(No7;"JD&sVB\b=J>W^o
%$>",F'.j4J7>?\nl$BEC/_]3a&gT;>13pr<6i=bkU4ah]iTnVA]/i1:0apLld4n.B-JQ>rTL,lL<73tLj!YBB[lJ,PH4,\b'MsPu
%%Q[`QS9&do/U3ArF`F,^`*U+rK)f!B+?altUNWLk<rhfr1'atsM"Ioj,6ECHi4bRP=VhPsM'gutK-[0EJj0`1;"@p4"BuR#DO9T'
%2+2hC[2#SSBU:H8a*1g3d5QZo`\=romr1R`a*C4:5dW8._tB*Q[+Mqm<9&!K*I\ZRaQVsBbUmd%2=da++@Bg=3Geo,D6Z4DOT6XA
%(a+"`K;PN51U*jg4O*B#<=K_Y*!n[A`X=Z$)$aSB,k`c!-H-pmii*TA5\km,O#;sDl#i:A[YLWs!ETdt?;-8\"P?A+-JKj:A&B]/
%;2tX0H&;#Oq^YN2(S4l.G=Rt%c6/>,%chYl2o;pM/F\&g6qn?*KQR"AbJ68G_EB$M"/0HPO[BSg,G:S($_aD*W/_ib!7as)#Uj5b
%c/iE)lpP4`FH&S.Qt'T<$)i]&=aVnu3_GL('bM]').oi5Em]Ub]GlA@%YXo$D?>H$abq;f+/9"21h9,_`BK+**GYdM2"<t;Go1:a
%Z>RZNp]DWNO$]D3$^9GEF(0+`&_/BAU,gFf,S=lgfoUl.prI[c%uVo("/RJRN!D^H73!1C8S5UY4*R2M8*,ZR#G4D<`gLCA$8#TR
%0;,K.MD^UUG$#_t3ZIMj16C=)&8T6E`Z,C=\jf50+H!_f+9<e7_@[9o&Cbd3KFV=J6c.]2iNI7S-(IVqeO^=Y*Q6qKe22q"+u1q_
%&f'78'SSXZ*(<Bl@IhLgXWa.:OQ?5Znt4gX!coLcWoGBIbR53EcrB"%/.3U%p+'eo[`2H%ADKO[3#3'Zr0gRjFl<kbbS)089/\t5
%2.r&!:R$Mt9g\3PnjN&oUD#pS'`eG&T^IpoF\u"PEQ0C,_+qJ%8)f]LYb;5aJfQr_;.;jj%&BXP;-3oTW1f.A"W_[s!/2M-+o^hk
%.;?-!JTS/OH4m:rjX+g0+P1(1#%E(2i5e6.f<\rue57F8bu9?^pbLo20uPjbjJ'$*A!"Z,'2HC@St+5ZiU2MV\q;G*NXXTM3"n/#
%/dg[`":3JFYiQPC32<\#KqPN#PTc2eScIH0&AKJ,aJn[=IK6o4iXcnP<#k\lCnCn&R>=Eq8<8>Sg>\c$*9qKsMb)VJlA%0K+9Ml"
%3.GQJ;\E5Ba-A??&0Sl'8"T'@Z4D(9@9pdT"@rddahG4&GTqdnJ=-oZkp]o4cENHS"-UY5b[1\<j=Hf.Mdq=8/0Q/dcnX)//GLq2
%><WU-D@?f?`:CDL!rbCsa5k_/_(\^i@T^'8XE8CidhcRA2G?*o9:l_)@O8`adZ9n!6n-q/LfK6;+'t!e7-Uhu*2'(RP"9AP470@k
%ah\M2'abu?GG!QIQ3YF<iQV1b4Mn2pD3k$Q(BYi[&,XS/[mR%;@q,^AR':jG+?2/PON`nB#I,IW<3t&9pB81^.fdZR]+Coq+YVXd
%2aTYN-M^bG^p&O*!rN*`AA67/(Bj/YF2oDkbVRm=L`.HPm:c&Q=ZBuYJ`:KIY"hJX'D(Jp!*O\sTGLFSTs6>nD!XE0U"G#nPf;0-
%('9]:^I@ikF*U/!Ddg_[G(j]NRE&PGq%!t!>'^TV&XTLLEUbAlBVQuGEJ;?7_:N`p&/#rQmC`c2iIdXD;PoJalD)7BFLVh%k&:]g
%&(/H7(OHS?JcL\o'dh'I/?VSG8eIW`:cr0+I0<SE*,Uf),#[5Ll=tl](lJlUF:aZ@F!FSP3qDZ_Di]gO3-SkgBgX#-MrCmCAr=BM
%Aeh:3h\-bFo'*mK1R.mUXVsMH0b-s0Kf<0X[NUsY8ENr*8i-Z29_ROuH_c:eLeMfUYnLY*+<4+a/\%`0!*)EUU_s8S<@_9%!4hYe
%SKj.CiQ3kb;hR^SXPjL;#8\7?EBi(`3LP7C=&^AbnS\\r6!]gq!(@>/c87r*'b\6Z4UFEiLk-[&qSo0JDq.9D$g.j>QOCk866ll)
%Z]P%'P'*SF29%![X4(r@10ff=$ah<`]FG).S@q1u,i[m@\"cXHp*D:QE30VVOt.Q8\Mh"%"(f`'+93SADBn]0,oW5^2ht,#E"n"n
%&]?rs7i7L'd"KMLqV9;I"hTYfXU>5o5p?GMU4,eS^U[+UL-$,:91`e2Z3@!@[Pmc2WQE^F@lafo^K)7=_,#ke!sgID>c!/N=#qS%
%K/fqN1SmQWY"G_':Bs2RdG_,f)QZ@i+c<Wj<sZ+*7kUqP(i2@\:qG&&2$D9[Mh>aPPF?Ia(cJ\gb5eLO)]BhrJ:R2",gp-50&;[6
%E]iR,=_?1FqSWO`0akN/*&pH.'uKbN)[j@c6BeqP\HGBfYumAn[t51kcjHt6I4SlT`$8UTrSm53>bs2h*k(rWZq\92qZ^s?BUSTp
%ddlp]Y'<e[HZ@\W2B7c+9:.$NnMruJ]qUpDig!Yt@Y%Z9K./#iUc@0AZS&lIib":tG`7OKD&@0C1W^R'CEZWM#>#P*\?)IPc9ReY
%_''e(J1RX(egFc(16AZ[MoS1i(.#H4a#ELtigm,N5q8A%j[[3DI)4-`?,X'15uBXWWPg#cM#MA'"HUI3W$b"fSEp+J(83*5A.7aZ
%+otY,"go/T81:1]N,P;-h$#@nMRZkda,7&=^k"aPPk#,f$->__5qq%>UV_\+jKsFuL1E5D^0Jp$EB1eOD]tTT*2e]q*0552rX(PA
%=hl4&LpSY=Z0R;B0C;dSa#W3H)`"^4^e2q2,!+?&K('uN[??&t@Q9Aqi^BGK<KuSg6;#6Qh@8u8'crnR4^:9mp])N%MRR90]Z^m-
%(q*/$&;BN>42FMZ!`_Gl/W%@-Td*SN,T].-WY7I7[,lk*(Ic1&Ya\6Wk5WI4mI2.Qi(7bB@aCD-31$H`*>dNIXt[)3MD5btje:I(
%8kSn[[Q)97@<(TJUc'34N,b,6o/k1a6E`(B*'K&9.L:Yp;%Z'ZT&Q]!H2+>VV^@DiAJD2U.M2*=KqX.B#f$s+!PZj/3!bcLLQ9D.
%O-;/H&i[8'kqDrX*ZQ!;Zt-_^&6FlDOD/^R3<O9_K8#T#58/[jqa<`j]QgHm&&]%:1+<O&V[%-_4/TY+&:nN^FsbVe'R>+/M_`Zc
%jB?6:'lplC";6b-#@6r=)q.Jpic8b7-%KMHl^7mojI4d7N6E&'4aB7jBEHou:5:4F^DoON[WOnn8q>/T_dPc$:O+V87P*:$kik^$
%/T+*J!7R'\W12`K:PSb?!5tqgSh$aRNe#322Ih1,a_d`9`g5]XK9tA5*g$S#Jdb_NmNIPe)[-,1!Y6n7,FBK$@a_-X4Ub7'lC(lG
%G`%35@M2"b9N5A\#NEchlu\s'f9FV;>D?i!CE%I.9j-UOb04?a7Khf[5eNNRM?hE86W=qt0YfV6P;'PcJ'fN`%'J_ZJmV"h*YQ=V
%BFcG`M+S4%p6C?AXUS(]od"i7;5Zu4&+Q;AnZ$rqqN($JOPm>E";n:d=gk\g4Xb!(+X!BA"iURkh3%/7Ha7n3a#Z4Wk4)k:*DmQq
%7.K@HW!q3Q#)7AuW9qQ8!RK^CG]D7P"<j,K%5'nk*ntHa:Uj:@ECQ'TA#IlkGE_+N$rH>,808j*'SpH*."W8p]NBP1?G'q1#_dee
%mCij!+m^?obWrD^j/5.aH$P#M)n8)]f&bKj:n/XAH/LQ*<RTlB)*Z)#*+9?jA!&Jm65PZD%Of<Fj96.N`YPOXh#0Td+!?L%f/a-p
%fEQD-":"PjNha^A"+-JfXtYi31a.m3jU&8_(/N`-CR/mUTV>f!"f`SbOai(?C<J.^b2#<g$Sa'W:e0Tt&GDbLlrleA>rT+qPL.)d
%9V/GNBKLSQ'utIh>j!Ds9CBSS&BMF3.9M(#X[-p6c$Cnuhkl'q6.N<"a&GY3e-SkM%c/mQlmY5?W0KIkQoG)u!?eY1R5,a)W.\6/
%qpU:I!Y0DXq8NT2jR3BE'nI@SSL46fLe1478`Lb=,#Yq6#S'(Y!N6\E#fpuA4V"bSnLhNA.g;KC=gFai8?!AT82OaZn\4dAMCFQ)
%!jS>q$'Y6:$)fKIihe6kWW4fF5jF)s+l(9UC&,Vs0/!h2["mRu8D/^_7*%536&t2$A;5MH-#O8Y%`2'K!>n^,i>R7rbO-?nO7:)B
%+j0%Y+K5p(^+u'm#R?r>_;Ws^$tKK-0C!<YInhbf/34:7-Q,X+"U03Ge)gSM8hu,d6b)s48c.9+C2#uHKOd%S:tYVpRc;Qq;a*PK
%OQK1<7^EZrYRoaCK"cu<#srmS#`l%f$!@m;h$]fWd+Nu&)@DP,"JLPm33l"u3R.efAOB@UAgRhiFag,@hUd<tc\m^([d2$m)P/e^
%O`KFhcQ))SJtPk`71&^IFYa$?(_.elU-\io;JcU\ge@;AVD<93AFmb\6(N)+Y%SS;Cqe>\kihds\&.#u1;cn&peJ&Xi&aoVhaS1?
%iL;lK"OE:T7S$E^R_uW`9]2DgNg#!,YdrOk=6VG$RN;/'%^*Ml5`FHB?X.VnJfBfc.+@6i[G8Q+-@=DZ`g/:1!Vbb/BchXLN0HRt
%<*rg66nW)V>c)Q^A;W'UcrVh\Ygr6NY.tF0+@DN#n\.CO,Dabj;BOE!U'ssE:d!FM(T*->%cQp5)-D#X5nYTGR/h=\)2U'G&Wf*k
%ZE*V1jfu&BZP@Hh$*lF6/>B:*4Bou>JopSYU#I$3:Tdn8h]_#@E(<=lF^5MM_`8YAOSGoCD+%tjEsQ7W:qS:!+CV_5Hje7:.0<6S
%0h>oL9WlY'W\hY6mGOWT6(F/[+MOmm5lMWg+;pa[qGp!kko6;8'fkJ'8>IpPICZ"Iil:'u,>c_</8pmhh8lCE]ci9Y&IS6-\I?AD
%@`XaW6=ITAN\^eF$ujm$$7no\AOGFo,s]%tON765ROFuiE4loc;[;)kZ?=?<Jf']I2(DJaJp\0i%<A\E.g%!(mg:_(1[GDRX,a-Z
%e=b5K[!`PVMLuJs@6Z+(l\TtNbQ)qh[H)2H+\@S.Ten9%U3O`dmZM4piPGb*=U;LpF!fP4G]YVLZ7HUSQ<g=SB1qpB"oP*'"Hj.R
%pU-+EQbldXI1sKKQVi'"4@bubUcZO1FuXlZ/2*]OBh7ttA2X-CVe$?hj8fS`8dAH>&7#3#E&dq2k9JC)Z3(>6$dKp=BkajQ.Ur=+
%,4WOM>F],PUui`HqH)c*YALP#r2%Za-fBRa\_?sU9d2W9pEGSH,:RpM>1)lr8j`f`2#5*Peuu#UC^O#gDV+J4pkh0uDWV+(5&^ZY
%%WZiu*.mf.@t=kBH0i)<83m<WKi#s&YE'd9O9\JjC.=?1$cTKcJfZ1)L@ZWb.#JGNOnWXcjJaaRCLdslO0j'1`Ka\&#]F)>/;sZ0
%#(_?2?`p:qUeJ?4$EX2anM:;NFcVCH,)?J5)e=P@.*W51:G'YiC8+0PUp_%D.Q;>06Dd_Y;[p:sEXpS-j&)7QA&Ae5XbF\O66@+2
%h/\-a=:C(&cg87%>u"+#:C^ior-FD\9I2M:l6+@2UJ>D\qB85M;=oOcCb&=DFDum(k=IgR"^s"i`;[-j<$cZ?;T>"n,_4;krQ-QE
%p2<?*;I>ngI(f5,9*$!@P9!S.nIJObEMtKFC,Y6WjOG#p'_-gS[MBB"bB?o5%[$qn9K(tP+DhpU%Z9EM/EFY-1B\8lON3\E%3s7Q
%>+?RJA.Mba=X95&o9sABKu+!&n*+SG4-GH'X:E).6H6Dd:b+57"E-[NaR"aR"d2\7ClMj;aY6@1e.Q\g`gaq54PnCp6[fkFN9:G%
%GB%UaL/A8>(_r?Pe1=d-37c.tIPXS:Z:k\2Vk`RfkCc&>MtrTt2X[3tplRW]A=S:ug1pQ.PSS8A@>H:I?#b"n.BZ+,_I5b[PppT*
%R&F_/9+#%?'n3++r1qNj7QrSs-0;'=:;%*8hbUlSpd'_>g(@sI^1n1aN<:s+<I:Dj9rrYOeDIk&h[fiTl)lC@*CS-.d)F#b:sK:G
%,V:f+1`in(a:KD@!(*6ZK-pp60*X!7W!kD7h3$]?4Yo8n!lV.]Mi/qqb+GVU_FlQp<6(2eYt=_B-naaPWsM%:Ys5ei!*U#^^g@J\
%7u.Eu8Uu%CGpOM)_$>C@ms4qU1Vr2RYOL[O&$0aTe$`,Z+cLdoODuSiiK@Pkge?[no78[8"[o/s6rHB+X=2#L:hF3!GZcB[Nn4_n
%'FuS-V*cjc$s/WoXtdf/hbI,&S3[fS(fsZd2'pa1bnu[2m#EcQruK$W)8Jm&j^i_.D[E(ih8ZM?>Q]Q/cf#Hd2C,crM77),gD!KS
%[$3!\_mN@RmlE5&Wb]<Kn`,D;('B;U*)V*Q!)OVGaB4FH8iXAb,Q`Y_LViZQ=;>JYn-fRDb]I!2CP5hip>J?5c"oji)R1Co=rspO
%J_Q;u2$J)4rJFm@TS$#khOl[,+XG%"cs@K*a#R:hX.qC,8+g\S8g?%eFSRNnF0Y.(:B5TF_!8LUbmX>RCE.ZHILH&3dY#%3X+N7?
%&<gGiZlS#25psCCV?Kc>P/ISRI%2#'349)0i;T/BoDi7SEQ.l4=UYT9#>n2")7k43+I'+Po+sr"hZugkO]9:K[XCf9'%5+cH_D%-
%0:muHC*=/>3kdM+3Q.E^Gb0g8Dc,F8s1:8;%EgE0!)40`fWH<p?arBM70bSjP65-g-f4?NJ`8X-`EYu$LJb,qKUQASh0Cl*rQ9gk
%mE;DPn]2R!$n?GkgN[]0?o5ir)EC++F#J+_=_XT-Q>Nc!0hju%e;^+]#n?-mTUHKBY`;,9#`^-s"'-K7Q,mCeI'HZt%F4rZM>0&]
%kKE</0INNF_hOZ(?`V"_G#?B_lkgLnR/#?M6gOs_:/eei/ORZ=WY\bME9TB=&40(dJj.Id"@O8h-8\bbIrb&<PqbabN@HuS/f`7V
%9')dD6">VJC\eg9rM0Tn%"bFj*`S6eGg?OGY9SDr1jAI^V)[W_aC>u,`Nk(2C?7IU"VdClX\h4N5mq9sg\5+CiCn9n;!7SMCdDs"
%1S26g4ZGBT3-,_R&6jr`\M5t:r*@Sg'hqDJ2gSTlN2e4ipuVZ0WePU_]_u[<F30s7@:%NTR)b)di-F:on;bEpUHBY??c.S8f+,0B
%NXI:N@JUr<.(PqH":B\m5]'qf3s!D7i=+2ar"quI,2Hl`J;_O*?=J765IcH%)hANqP%17j5bT^X8k":b'j;@9s1=d88U2B,p&c;S
%TXIAr0N8`U##OH"htMkc_!"?-4].)XV`pa\D4j]CC6BuYVkC8_(!Ie:Q/EP'F^qpZTJ-?"SmIAmLk"/mYh\.u<W)&8Je<5I(U$t\
%eTM3M-(p^CO->kB""8`*rb#<Na^[Wa^N&U[6^b:ZpkXoB9>->Zgr-8m!OO+o]Qf'.Hj[]O>D1gH\mqG=&TE<Qjd/'K5`tm5KH9.C
%-#,errl@R.Bh>kl$#!cNH&cYr?<iJ^3Y?;.L!^hqGWX1#pb``)N,D6^O7,)2ipAS8'.^gh"@]M6kT(0@)uT1SmVl@.f&VT4Jl'<$
%W#W4@Rd/$Y%K:f1S;_J6+U--cF)IX3St+_O7KQsH%`J$\9a!>JmRglgqaAU)m;Q8d/\WoiZs7[r!nCMk)mHacmpAs%3dr`#7O679
%:0$cgCrC\q1%OhiC;Usa:BZYq2&\airDuQ)Rl<g30l'bW#Ltm5c?tQlMIBF^l1a8'/:PHd=UL4I,:CP#UmlV-_2glT#q0O$V*'Zq
%TSCHUQq40j^(4;3M9j+(*)#.A8aI[R``F.>TSEG-qnPk:r5NYa+0L;V[(N)\7*t^dUCl#&lg3Z8h[;o4h;O^2nHh/&*Hk>\"i,ei
%6>6jGoTta>e^.u[IrZM+I0@e+T;>r50Y%W!9PP)FHt0(=kc]`\"rMjXY@AjW-F:i\lI"`I.`kSfVL6e=f";8jM?EAURV%C3$Tna[
%M!0C&)BSs,b%^hXcj1/R+\LbqFb>R%,]n:5Bs!H2lmXrd,<h/./Hki7$%m"&0,bqtijYiqc5p)8,3'oHU!X,Z);K<R^7'bm5FZjb
%SETI/I4b#)Hmgs)fT.YaX[g_(.[J01n\k0cP6PF%6o?g8*TblPJqEmS)LMt0gu(hT8U_#?0ntVk:]dgfY.q^jA6?c/1Ek'6A05ss
%2oHAILkM',:j,c"E=g"gPe^E$Ipk9`?.mY]G2m9,gNSM17*sT'UB-Up<4a$6SUXdta+Tt^MbiFl'*=:\Sg?#W3!`aZ<s9&V'R;M^
%R4bP`nJtX?AN71UVn9bMNUZ)<@\.rSErGZi1V_eiQNRaM]U)56K]:f-gCQ6Oj0V.O5_9Rn<.%2kTdE"QXGP9+#nVr)#)P"bKV44\
%#B:h8edr#BqugFbgrRXeT^&_e!1jb`i"3V:b=$);W%GYm#q_.Uhroq8lA*1X?$njB%r$qQ%c5_0nSL#"ltLY?f<(jY>.6nEXJn;e
%bhJnOXC1eMF-.9:79$4?o9>KGV\33`on%7D1i_N8+ddit'c];q[>3(YihVMSWI3,l;mBLGqG/ld"Gr7CgaLd[/fnSB`?Db:q>U7'
%f\`M!>WA)@>H)r4>i8%EE>:<`Q4d$(%&UNl'H9=INK*GRlZ#&V,sQn"hbS84nYg1*p%]P4G\0sO%Ldg*h@n5:MC<NGal?)q:L8td
%U"Gq2`/>H#NUK8V+`o\4$mM%T"%H+>/7V&?2M0q`F--1%3H,c=-@K\b!=0p)lOJFknVjR)?e@G,69%ID06/dm,n@+i[JY0.cc(+j
%A\]6&"`^6dj[TJ23sKhIbsX\!M/$ulD9d(AC:Y*GN4Fi(=j%B3.FU2X&\]H+o&ht$SIU+-aV$d#Is)ZWFZ`"P86s>6=1<k`&-tX8
%r<!hVV;Y/X$51uW2O;+PNf,JA/kB,Sg%a8&\-.M9/9-b\dQR,rY)C=Hq9u"6.3A#">to]GR6e8W#Y$?DW&TG)ng!n:prgIc@D5h+
%U9[WY!Y*AHL5[Ygg::k:5hu&4YO1XZ/aJPjmLB.+I:EP;DO/#5bN.<,^kUno1&/m"-a0(+NZH--$2O>C;]i$f>&/?Vg\[@HGkZJe
%9<'I5-)jkDK'2u2mb/h6s8-ZCYKpsr(f%/:'.<_Wi$cC0?rKmZ78/!0#ss_N5^`#qd#^f46Tg8,G3T?D.^#!p*kCLmRFiqC.38(A
%.Yjg<BpqU2\`as.DlMar*6E2=rfU]0E!15N0eDh`M3El.IcAl8,%%m1)@$^eP^m2`*=pt*U1G<,Z47XrB%5aW/b>LCqtjT;rIX/0
%f/Mq'%k[Sg#E%L.oYF-uN7*SI=M]`b#JRA)6'2rJ)9n?0&G`mdq?lfNeBE3DV:(jaIqJ$B$b'=L*XS'WC<_*A/I'2V&%a`uLpB7t
%[Ym(`;e@s^rnUM(5kT2b,1HqCW!u<Ea=2;?F$n<haWBO9pI1M!Xa^dsE!kk@&#q9EJq?p/DWEmPoe@g'*MCImXQd7*%h>C\`p'0U
%E8W@_mMHS*;9i$+.B.0^$iQ+(9Ji<&F0oo/T+2=SO$Eei@dpH]meD-VP.)I7of6-LPM?n#4K%oh]rU'5T=.eQ)i?D&`5p70StU@m
%4_a;+,N;F9I/GUgn%82P5J^QCKK^GmJAH478hOfR*Bt5I$lj,+JoGG%7-ddjn2gNXX7L?)f)KlF0jJ#VFX2.nNI<G1jAGDd#3Xr8
%^d.GD2c*``%7C=/b*=$:,YLm'<E^X`+)W2UBAqB0iAh&$]'/,6_Q^3f?^@"G1_7rsLj/\fYenN%>r@clgGL;`?L0OuM/OL`/n3(@
%N(p=s:$'[J8["?TmFf9@^4nq6NlX*/f`FVA;re(gJbRUu^Ej=#4]N<&E9c%%[L.%OCg&24KF)];jRe(T.+(/uF=9Ui-sC,Wr#O:F
%fFh-+UCB.7DT7b6HbJitE:2A>*Rik0NK<ZR6FWNk)g\o-+A'3fT(JkVE<Hh?*&2.[K4,js2F;:Nf?F<.N7,$>6#,W)mu@tSK.g@6
%%HInR\V!nR]^f/N@(VJ0btT:OH<0n>_)3Q_RRF.p>WHjM<=+DKnC1ibG<5a8RY?e)"qZP8c;&f*a1K$fq=Tpo15/UG2\+W$_=bX.
%N3ZE$apO$=[r_i9fP;3aDQCINpD3p[A*-=Xkd%?COV40*]Im"dVi9gI"FUuQPd@Y=b(>E2fefp_EM,RtaeOn;?(]$cfrK&O9]+Af
%n5#\Ik0gAYSb)1<$<[aJ2?P?fQSG$*jTs[MB:S$BdQ&Hb(;V0&p&!-_/+#Ma92@S5'5t;Q76g=)mdZ7A$P,=TJ;"G(A2LAdVqf_A
%o6G6JF`1ieNTIP@\h3a1^k9prT]"`W2g>Wq`b1=gW!KK<FY0+nX]3A&_m,=<XQ6/nV"uMh!1AFF^ceLb)Zg(dT.V5tIa>8BI(@"A
%.,aK3\-6gJCtknZ`2'0me`TA&C-Ofd]:N=6-R?"@%$KU=3!@O63U":>Y33$r'o2/IA$?-sg&/@Fd]GY3n[3_C9>=?(7,I</6:"jg
%j1Qk3Q?g.;l4KNb\+Es1:nh=,GJ(<^Z%628\+,"T;ffra]CRK)QR8;p4C4+5<YN'Ii#Dhip-bqpDK9DnXFng15k<hLrJ!^8I]?c'
%[^U;N>C(Esn@%8kkWH=37d$A]".AW+r0MA*@5H.;9(a@<2M[[B]Ia:d.0n?,%?=$DCNLOT%[J[cJ_X<<GjGTXLqJ:VV"Jm]_oMMC
%c[Yo,Ys,BpR+tS`+9EbEAR`-q.OSf+CtGC+/7m#YTS$/glaJ.jGs:/.eHk1X5%'UNRj7,>lnK^Nlk""Ir3o4Ra85c>V&G-OHcC1F
%ekn[F0#^2J_q8&SQpt\n/DI\QJZoEVKNL=cE59*uf\<MF5I[7k?NG*[Ph.i.od4`M?ZpgC5V0=8d;oJ`AS=CQj[RE7_@KU(\N:?Q
%a5$&X,ipAnj+NMHjEo+MCB\,[>oju5?U-Lt*.q2IlF6!(:ji4r#T9Sc^s%GsE<7RnR&aT>MaiC<,)fb_6l8knU%,7-H\=q7]9CpG
%D*1J@BS1ELjS*d<91ZZ[E<G<=3rd&1cCjE>kReEpQ(e<j\F\aZ>1OJpVaGM_H3EWLd79(*Fq8h6@,cPhY&9Q"[D&I*86jS%-KHsm
%;en9Z#^EtD&Bhd%%edUCc=>'F*.26uE[VojbXl]+Ip&Mh]Z\`!&tYk"?`-CnFG;g')5msIh')r:hIL7eRd>tDq9W6o\d`Yr4%i.u
%LEs^),[,ob0kM+m6!2#3+UL/Nit<E)q&J/!CE,o?5FLha:KrU!7"o9@':sctT[bVLYi\Z)7\g@:plH#G<NY!e-bQdM=Ep*o<;0+3
%)b,cqR2mV+gui\*GnhCUGN.g]GjsQ-_`g(]"<=Pm,9f7*RID1E%(a#Q#-RbJ4@eHFT&W1%1fh#%6VM_@.>dPUR(82^GTL?a&aJQs
%9+j[Q/5(5U;_gDmAW7JIT-Ut3ZoU@E_DBCBcTl'gl4t7>o-QREdY)7\aG7d8enp3VhH<Gp]M<Hq2q^3Ig$G6`Kr%&6aGUj>qc<S@
%2e;LFp-iK7UT;`d.Q>88g^I0=XDVHr[;KG0&l!2bK7((Oe9Vqh7!=_&9+9t6>5.-$_hc9dE91R]!m'hrm8#o`+(Du"Yr/frg*[+q
%H$4=V7)\4A':T)X4]aQM^brmfk(m8_F*u&a`i@U,Lro'/,nV3T9:((>D&>'d8#Ld;WHe0mHM#(tqO2[9:L%B$'@:o=Fa?H0B:'@(
%J]aY9/MaQm9mB.'$.&C.%ujSkgCPaFZ]mk&F$+J<4srIR0r)8Xmn;cg5KhIP&rR33gP(D*l;jc>NkjT<oS<k#0IJsbPsMHTA73ZO
%n;KmOT(*sG)QR&N+\m8p.C&A'JuY\rQ.Rd"[,]tl>KX$?kQ;LT7#n#h-ToP^?!!GSUX:F$%2%PZb_5.E@F3QL12tJkiAi*Kn/NP@
%Ts:V?)e-[r84eJi,ep>F_XeU#9)_=R&;W5GrBep'8sQB]bMm'K?QdSRn-eT;W9=Y2U,,X!>?-R]ZHL^rOu!_FEf18"cIgX8%<6t]
%91T3;3MFA<30,e`*PhhP%Z!JOrF3U(ono)@K@A*qK:L<!Dk5i!'qJc.F9X4I<k$/cRQ&n;OX<0M6U!>-[;J@%nBOp@i=2T#M>Lbe
%@DqAcmQPgn3G/HWG>dCZK<rObn0To'Q$m[dNepc67mqS31Z:>j(j'o,$s`BsG`Kik4NE5)BWPt)L7%H_;A)@6-\^Hf?C=!l>s7J1
%Rq_9tpPo]l4qLLpJ=a;5PenIGFUF=\R;_P<5O"%c(7dFA,OZ6U\Q+E:h8+Z;%<MY:0`>/M<?uKYI6A>ohni>afDX:9%=,FF>^gSo
%kh!"\,6E"!p/&tT>6F'%j,fAd$9g?Z%rC?N^jU]n=p:O.4%&F\:5]1gdDTI]4P2ZnfK?`:R!s:?;S;7M$!d0%.7*FogQ?&/iX.RM
%O(?d$Lmt5:%?0X7j_@/'&NK6hAei1l7c,]Z\BsLngp0ESkUMh4Nc;Q*nL/EDb\[E+ip7](*F,/p4R4or7ooiS<;9h0]TpAuNP*T>
%2M7f.qUX"Qf:9sIWt*o.`2>Jn#^s;*>NHh<>2,=spJ$A@neG?H72H,aVaj(J2e!NB"nLuV9Vo!l\di^%:O*_7csVEscj98uIRQEd
%f.ABt"GP;EnVkbY+gI6F<]Z?A-R@UA^h!O<:2,rta8*.%*ZQ<gFNeYB#GR<m-%EZA6mr:ZLm4]u4R'7):de<]4i=;l7RDS_NW&17
%26l2Q/P<\j-0^'D1^QneN?b[^"@9@M/'Y"R=;;tg%6p/oe2u06]&nQ8Mf^4qb%6U.I1f(WdBt43)DXGnn7[S0+-)l3/a9:l%Rc5Q
%d?c&ZgdaDeE!bM@\K#^L1l!5ZA_%A5Ln10'(eYE14!`Icn_RrD7k^PO.7TID1(NL2WFsZJppk#XQb+]=_8\*]:<6MZs8:Pf=I90N
%gTW,T#9jC\82PZ3NthfKDfo!mN4e\n;fM/;)@+^a*t.A'8/tIh9$7%SI=ER+@n2r-d3JI#d4pI?d$3e8Uu3A"WuSWOZ-!j"(K-ha
%PeGG3LaK1@l,pE<`m8IoG2rfRV+?u#-b"U3o#;S@^rWoH=KCc.Jm&7T7j:@YKo4KonNtC="q&aG+7/;`hj?K+aL<GsKD]1ok[MN2
%>O7qqH.ItiS3t@5)rH^OZa5C[%mac+,u-<hb?#gWK60e3^'8FK,EDI!jl"okXr.Ec[r&/Irq.K="kCfD/Vp-OUTD.HRAB#9U[I?j
%o)![K^m3FTla%uXHa*5OW?b*;KKp6"mZ7;T<Tm`\6:ep/`0pQPa]I)`\/f7hn%<ik`sV-g^;>].mP9f&ibt<.HuK#r:&Kq`HR^0W
%9k,/P0k"k+Vm'2nH:XPK>9V71MVC`#_PbV4]HZf"dsB])c$J\H^9TM)rNpPLMNB]>l_&sjfcT"lG#16u3fs@/<Bn)'KsKBEes>f_
%*Cj)IANR>6^Ko6HPC(ZuiC(r@\*\CR5tgjM2,U0g$N$f5H*?3UMI9L/#"^6YprP)#YjAVe>2([?'bK:He91oP:`p(cjuGTe,<c3>
%RJRm'1K'>E"+_H&#VsG2r,P.cX4iMogcY+:kB6K.7k86(a[j6>EP8cJ.9oGLW6!^l&oX/ZTo#,%#HcsDeFi1SE^Soq1LJP0@"g1m
%X'%t:'M5.`qZ*JpIKJlP6S97\iCjm@oQTr9"4M95p#r3IZ;&UPdnnX6*jnaAeB,"POiKhOj5.Le6N:Ko>fF2=A]k;MHKsbgD1ok8
%%o`eN";6fWmEh3@C+)Zp#WbHRZ<:.g\8B_T[Xqcd2nS>`P%Nr_6R+*a<ul)[*U.UH?%qLs7GoY/>\IsjB'kT$bHLK0Yl^Pt]dOm^
%pNB(1JIHeiEQS+Q]WoB\k.Cd@^FOeQqE4^Y:uB22k--Ald.6`CpP,9#*G*Yf9iIEJa5Ol16+e$CnmfJ^`Ji?U=ME.&CK%o(S%eg=
%mAPiEhY*!'W/U:pFGc#q;^$p8Sjmu"(pXA>Z%?!(Z<M/U13n.E7_,QpVh/^9bo*9pQ#fW4D-(U>ERKA<cH3W=d\/F"1@>W3L5-0d
%cdS=>*jeN!58Ma-+lhpDQBruD%6Ydp\gC-8`er:k*$3Q$:(.VQK>=2'N2pg#I%f[!PNJ-S(7>fXnre_]jr?E++a#:]``hS96Z70-
%\)?tnTu^[]lZ`&KX/T=MIIB2+7u`+MF92&AI/34(!\&0tnrIW@T]jiF_@Lj;Y(f_Vr$ZB]7\O\Y!2&K&L_t6_#gtB,kWPp\]PL[B
%FWPX=qn\b\:9!CkI./UT:)Y'C5G6l\H#;g-A'leGDkp0H1A(*W=dEf=]K*3ZU(>A[//L9sTDf-8N[uPO#pu857\Q*i'uV75d1)Y%
%lHVmiJ0hLhr!qMrT4^3nW?S,]5@O^c->Ga'[be@m\h2Ys^ag,A-N4F-eQ-i?+g7@oNs6l=(Y,Ril[Vm/,XU`:jMXIFj=_m&i!"Tk
%$g\r-209^Qn6QUF8r[+Dd5@Vu(j'/'4BS65UF$qOomcq<cT+8oUfJRd:\19n>.8PQh@rhs""\)\=$2-TLX,_X*@bYM='^P@!6AnU
%&:B>U#(9HP$tls\K<NHaY#0s(F]R8ViQCMVW;jWc6rE;W/(*[%4i7i"!bQD5f[CPlbsRL@LGmi_]'9KrmIAFV,,0mYJl]!_@ti'0
%FW'6Z20;].[4NFPbd&YrqS2tg:=0)^]c:W:jXBBeesQKi;5XrQpdWTo/mo_U4m:]BTG4^t#GP/u$<_9YHK&"?.0mS\hA,3AK-Y1d
%`JIuEOmfLdQ;qB%+UmBRdjFX>(*&NW'qD()K\I"KYrVmmOp^#AVd>KhX`L#]4-700?.$3=2Ji_4@mnV`Ej^uY8YU\"@4\E7+%teb
%Tb\,:mIYPDP-/KIf1:KQ[*gS;>_#Sg-Bk%hV#Zom-h.iq6C/1Wen<mkHsQgnl?"+_8>Y.8<L%L_[U[LdV66Y7gGr?7O5^f[kPU][
%>:#@m?7Ze.PsDW7R4i]n70+DaA<7jQ6k[+:H6]G8.L^$X<K9?<[WeNO9AK$H8#6DUPH;-)WWa;H2,h:X&/6leS=PWgk@g2!ee6]^
%02Dk^gNA3Tb7d=@/0_cYkc06[R3O5#73Dl)I;N9.+aV="BL?E<p3&OB5CF,r3VfU[eUQdbVb>IG!$p@/`U9'!#<=*q:gJ=I3aJ;X
%=gs43mH,gGWQV"m>ZD8SD)tXQ>Ep'2(KUJIB)h._YZ-p":=VQQ'!?3J]LY$'$c5_GG$K0q2S!F:$,aJ]P_p0-*Ot;#lZ/)RKV;#/
%X)7BG@J9RkfO+[C;c^$=V_W!EPet%Ro!HK4]dZ;3KDB29VPCqcbm103UU-LH0m_+THKQ>Z;l>mRS7e1g,5$[F.S1Lc'L-,F3Rm+N
%bKY`JVJhha:sd5kB55_XKX0tCJ`hoU<F6a'7cJ*^D&smqTEt?5c=k#9Wk#iQC^Vh_2g`%b3;Ps%KINU/TnDr=jim`WXiW&_'Aqgu
%b!E7_Q3C;/-g?eflS1'PS=<R[`i7u(P)/FTrVYm6``KNg$W,R28.P12)9>oQmH,.a4jLqraKFMqF3oWp)t3JniQ/J151a3``KJ6H
%VQ_hm2a>#Ce#A]s3Q;@;PRDF",d8W&Fc]n$34g;_032<1p%:[TVG*R\OCEtGMMPD#d%OcTUqMKQd11/sU4g2jhL]>L'M@VBA4VKu
%B0Y[&EbE7?k2=&1=e_K6aoWB[K;]eX0ce7p(6W%p!mq4kd3XTX%YL.$FlOJ-j;I[2T?7QjoE8TnY;iI3ZF3Df"]QV9NYt$A1B-:<
%9Q(1hML1*qj8h>a%gD=md+hG;*.iXB=];tI3:sJN#j0M/oAe2g*P&OEimaE9=L.Wf*E>KnSo[k@ebI0243D2#kXh-SaV'E*lrb+^
%g2g89rdT3g**"q[H51F\ME[?>7u2KRU1*ZOV*T"_U%/oA*5[<g9I<Nk*ibuTlT&id:EWdp,VJ[<#\V/Sh+!:kWdipEU\&J,//!7D
%cai$3#43C3+QqNo;&2lm)opQRi8o=BXFQ-?CXtX$#L%a4-%`n+U/s2^ET]h&O4tQoCUjeUg[Lkp9+cdm4bWgedD-:MBTsfd3fMjr
%1c`Ka:`qcNV@CJ^Pc^J+ArnkHc<A*3La8*`)ZhWj4A'BhTm)n-8_'aRoW1W$(N/,;Fk+9PY(NL,(\VG932;^O$r@T)juQd]1E>N,
%ab&AoL]nBuTJXYLqd6q\-U]E"(h0?%To>KPDuAu/Po=.BHQB$""esIb.`$bk0Oj0JRlMju-X;UG1:<B76+n6n]5cU3m-Ri41<u5g
%ReEa7%JGGq6B_Ki*G@VN4bc<GB/H*r7d^.9i;,V]WmoGAB]CsV%R`:'7BB?2WU:bY@\A?hE"MCkk&8@SZjPrtVA1ReS!4(he9iFc
%UPk>?eG'^(^.16,n.]\\hEHAe"AHM:1JQ3B<<6DB*q9AF[:XON#)GhGU#*,N@[H"`/'pBPbAicO'l:1lYhHYkl-r2[p>1"XG]7Z^
%L=A"Y.rZa+(,V`^2,"W7pq],@^mh7(UC8aP*^`cKg0$C-5#obN:8MtFr0qkS-&#l6m)<!$Z(mlj6pA2F<HQDoXd*Ic"&5P<\S4P?
%aEf!S69DUDqT"45>4X2Lae=hKN<nN[',,qXhmEo1gE\8"bWa>9C:l1nQ4<2g6u=B8SEY<a:c&"1VNL90qR^*u]m=Ub&@P.]%6,1E
%guV(t;!:`Lk[QuR^6"$3Z.3fS\f19hb88I`WH,^u5%Xp-o'0'4i5Wn@b7s?jGn5o5[QC`Eo]FKiP6+ul7^[^8k6prWcgrDghV:r&
%H]hG4PhhG/)]b.H')>Yl6fk`6:_LE+(?.l-TX(ri1<-MnI*RAc=,/Ks<(]7^@=!@Nl#P,[5_i++`RsT.\-;mA"u%>e'E@8ec\[Kj
%LN[PUa\XH+5B&*k\A/o7e#+Vt#N:A7%+!)Fcotg8CBOkUH9?JLk-G9]%9Xbo>qD)YEH"n?(Zr+J'Q;<(+q?A;*P/aaeJ[gWC0hjs
%0AcJ:R-/-TF]cI`jgaVB/g2'cG;5aknepG3CBUmSPgH-A>:-M44S6SalOI;nDBt>d3a^kXjbGC3$UssF8gOs&-YPtIfYDLT"Ssn]
%cHSUfGq3"28RSELj;#^(TQbRY@F%Lq)!Eii0:7eE(E_D@8!N1F$Vbkb?8Q[Xm5#@r-<:mli/iXp2Fc;+8om8ZN2s_hD*<\\A;D*P
%D%N!?NplD`NqXN,Us1.6+b>Bi<05,Td\Q(<1tskmdR(2=F;VeA!l@J^gQM1>\IR=Y)#b]_d@&n<@l($dSpU=T+YI'J\PKt@H8hXk
%NkKk*&t1)&A"X)OH&h%2M39jo9Gq]"`/'DuEp1=uNH<NfC.-\$fAV"GkIUZ*Wo>eQIdNU(#*r31lS5Ar,YUYCGo;gM,Ofs*7$X2"
%jn9(.WV<\"]c9]GDZ-qBp_jZ8_UR)!1Lr7(.f-Y@j,VDs?rp-*FR$b(+-Yd`$?Ja:3]B<\Su""%h7J*HJl?S8r`3h+#dsNKT/*uV
%GX?[79>d0XLDu]T!R$%*T6nE]aanEi*NgY!hF:3^+Io2oE4mk1;`ojEUgJLL6HW$;a>&B8RS`K<Ac1SI69o5f\Z/b0">mSF@2F,S
%E0\iJ<Y3/]'OR>"<88OK*ou+?SsHp8*b&Nkd]L^>ldrqQDEiq1B`&oopREYCf5O'%i)k$@':RQj;,PfuX8dB7a,*;t4Se8ebkYig
%H$_<&T8iT'kT3MWjm1WtaB]R8hs%YGqHud>Wt'Mn+<3:lW)*<i*jl>=.5=Rc=sX[+$$0K\:VmNW\?X#9RWRk:7HhoR??l^=p#0ll
%""_Bt5Z\GR*-fYqaX8bI#JIBPo*Kj7;^_9S[*Kc7g;jI10lON@X,W!,_$au?/fPMir?M]/_a"Kr8O^L&JKDP/fneV&%o3uemfqFu
%mAK@=QKNF46uW(!U^9K]7k2s'GIsIDrR'_R*IKO;P[F4\Gfk%4iZ>e.F2'dbO.N)60'O$b@<+%%=6#qrMj"1aFnt`iXa:B0M>M@'
%TO51-+4#,;\!5]dF8)SW^O0f"#t[g(Cu6Pd&5^(q"^3XA5T7BCh]U(6C#=ecOAPmHH4k6u->8Ye1a$>!LGHnDp>9JrKKRd5kX45L
%kZ3+,k=3?5E)IPa8a7d4UZ8p/rGC+W:r<jO'kff:F^3Vm0/jMj]9VF:;ptm-`-Cb`C'mdYDIA4j_ML'O^k`"JQa)!kkZOj4qo7nY
%j</&f?B]2NZ(Hi(P&5&k,1;AFDZc0ak&ZN6MAkXo/p%4'O[#ac3?AM?$YHTi\;%g]a99cof.F:aLs!CuPX=_+@W/_rr7m=d4cM\l
%V<mmArNW-`OFD88^H_>9H76-8FXfSk+h`%>&EFafa:Mn^`dsGY&YG]M01UBkDbL0j#(o"\_Kshp<$ak(o[ZeF'PVSa2-EDCVe]&G
%\Se[_f*i1oQ&mrq7VeU-<q`J2T-IokfpZ$!O@&UlO>>OpIPMJ7!<^ag^o0cI#Y0_<<8XER;6!I'Z`d(+Wss]7QFC')I\I\s#=!Z:
%%l'?nq,6_gOM%k783F8UY6=M+@DIUJI(?D>Z:F9B#ILUm#3s62<]J"AC>qkDPGg;kYOr.>6iF;0'X;c"mSVdm>;D#0$(<h*$_\8Z
%$\I`?90s34&9VhZ69ca*e>7D-J$:-[$=H5O7C&12d3Dl;XFOlc"F>0f+1!SMT(Zq]\m$X9-Bd:LYSE<rY4.=$?L*53R^"s@[!rce
%VYph\M2VsO6X"=>WAXFABFTee;]8K8#(MRCkafa"Hb$b?SQuc&3\9UKmWa*4Fn\55;Z?S*qSI&9Wi9+VU$.,GDk$uY4$]4)cI6KN
%\d^f(HdNBX:QDJ-oOCCXdI_0V]tGdYAd!E*6>K\fa/0-sE&>*[3T0H2,:"YHVj7^*F:a&GYWpMEM4\b3?t=0,$lA4^c)_j?n;X^J
%6KT5V>#-\42RL;;GG:013?,S"Xu*k9Vt@io";u^-5FFW#q7uWF&l4TWL752lKoZWGjF;p,k<KX,Y`QKqL+_rE%7N<*%[rgE+FQ`L
%]'>Bt8"(La*d"gHYk?XTDu[CDE%L%c"0UH&0r1g"j>E[q@mf4s(]-X7\#?@d`Tck,hQ[]@e.Go(a%JSSM)EeHAMr8<40bE'dm+Pf
%jE9q3VF)X0(.fG!30&!C,]7qO#bL;hh@.60VZZPEqK7Yj'>A(ZL_O>8/-ic.dbkU$XosD%c/K;JjH2J]mc^fW%LWF%bULds"CFQ3
%9"<L@o0=8r0AtlNiob+?4N-:4L=%m/4K4OsCW5?oidn$6QtiqIYhn^]ecP9X26(cHIVaYm:$$"K`l@*ll=u\kHjuOHAo#`tXDcGp
%DHA^nA_F!/UXsfV@=AF%OZ^>Ur.GfbcuV9557R9Ad;$0]p\BZDWg'u<CMsXfhjfZ=X4KPM"YYc!jjCDjn9o#pq7^s&f]LuV6p0#2
%gT+[`*0?DO?^.L>8A7'dp[^-?[?JI1$X4)7W2nmr'Y.=V9*snRT6U8%:qn-:26&l2I8<rS5JMFn"clm!p;OZ+!$-k;#7_[Xh-H:@
%%#<]<a'uqbQhc92j4Y?"`Q`YVa>/ZfA&K&?fZX1>kcrZWO7#DG1R,Jj1$shX]QgeVe>jAXS[lJd`5&(jMEZn3`'`Cf^)W0q\S\_l
%,gFcHL*hbeD:N@@=L3n3VpRY[QZC*aWpRYTS!TeOkuIU5#)=\eG[VT$+B`(;_(!/X0iUR!baTH2?*3`n$k@;eE2XCeeLgJqZX+&0
%hC@]Ud+YYXMAYjDNe;b,0fW,=a8<Fd2_j6EB+$(AA/O/"-3ah?))j90aGIa,9"7m1fNZUH0c51:cBq_A?+=H#A3@gncNsg`g%!hX
%-Y:WYJWN?4HdrOF,+_GGq&R2p%H/HOK1i'G3@Qpel*fjmGHP@%#GY*]a+`#dAQC@boC-s?e9l)*:`ZRU_,o2!pT8@P^#+sIKN"*d
%%+"EAoOH#e7Yh/#hGocFAF2D&NN?.(8Cs:_*57?or7%"r`45u(hLpZogX)fV9seI-j;nRGQMcPpGTO%CG'G8M@[&iK#e$at.;R?$
%DM0J&LmP-E4>QAEoj:"NQ$3H?_8m"RMc]l<C"uIsNp#b5i5#mjFEA6X`9;05OK0*F6e7^dgPB%PN,Yo__B8C*!h3:N^)\W_<nL1Y
%5E77cl"oD[S^W6%57Wd?Zj3f+*+FR\;!;1B.8/6`j4q^Rd#fq<>rd;aZu(5EY]K4tTslD0lX;num&\7,a-!1$DH!3.amHR;EemTP
%5UCYTV+b$MNcu^a'f4jGW[j.)j5r1cHa9q5mnqVUF&'tS\*s*Bf3%]*omD:BDi%]/U^uWiD%8=I4K9<7e[DiP[Hb/jOgbZY-FC33
%[iu$XU$'[]"-r3]2lu)\5en!N0?QIUS.%Uh!f-W/RnO93;K1ioHW=]>J$nU]?j'ZL`J)ld@9/&3rR?-!\YS.[V7U-kf_3"Pi+7-q
%Ns3HPlJ'aC/PR7T'HH20i)$7se[B_/<kT'']N*<5Ts\1:IG[ef0AFOM-RsH,")f4;D9pOB\&TFhJHN#'""1LdiMt5O+.W<oksuU=
%#Y<RWe$titJjjpfclMo65U40rIudb:T,'pQ8.odsGEL=:T7gaJ^;#9Bi^_H'7bPP<K82ol+7+%;($QFLa9IM:+bs#+`(BEr*,n5Z
%GE>_m`eVhrqKZ<`MGPmHrRI"<WC^3V)R5!8Zj;?J7n0n:@('f(>6R_tg;6j3lh9BPa%(k#8+LrUD'.J^DaB^E$!XmH;0!GLlgF#B
%I=I<h$Cm^/X]EjN8">?t8nP&seu5ZnS]:80NA`(beCW"[m#9c1ki?P$\"I6*C?FH$d!abjK,L:hmUL&o9$YaJpGMk\b#+a]mW6$-
%4CWaD]$E`oBNonBq@5oldIIG3?c*BsZW[)>h3?4m@X&.Smj\$.MGI)V!<PAggG7:1i5X&*\dd4d1!Q+hf$sIr7'6pRUQ6GglKH6j
%H`_GHG5V7Alg(,F.>e'O*etN93Y%siC<aO!K;7`g;T^^])=E4n4%MRs."%e'EZR8$plDTc5u/BG()_DPBk-YK\+@WqY5nc(34af%
%i#s8]6UIlXME/7?j6`c@jJ(Nr,>;;\LVA2@Y%_i@ALeF(%7rT2D$MDg1!Gd;E9N-YNZnLI"$3(9=YNI0ec==d7NR1GGJ`-:Yg^BS
%kf[H>\Bn^*MN'&^Cg*;m\lq0rU[ol]+Y+@O8BAslI$B>N2):pLoOYf?LuO?/P@SKP<J4n`k=20'8*HO*>^4:$*"0/pEn-/uRTDI@
%/XF+nYreu8n/a4CE,KdGb?;633k.MAkZC+F%WZU^S0DQ;m)'WD_+[p9fY7*/DA9>ZUW,$!:8`suP%mcpaQ)$R[I9XJQ$P_h29l*1
%(rb'a_oDL11ONu;JOSADe.U#+3C$iY'R)_QJ5]33;@6i!l`jHD.'RO[oPIK2!p`\p7j/k]*i5eu3UM2l'[5ulP^IB6n1mXlpjI"=
%7Vp5fedI;FP+qEmLtlP>e>#mYMQKd-e,T3CO@h0s-Rl^[>2OX76KIWK*$D?=1.WpjTkG.9<=Bi/Zq\t#d>'T:BGdRkl9`j.D9B^M
%1h<InoRL:Gn=1Og",F"i%Kr`\"^j36bX:c[[r+1b'M7pJ*'rIr)Q.]dND_1_4;Fq7Al;]!&oF3XY0i-),+SqK;HL-oE!S+*Tu+4%
%,JP(n'rg!ajeW_[%V:L8X`Zoi%lKBM7XJ>OqP6n;db`OB=b([5-Us4O[>j6?iRP\4.:ktq:ha`__YK*+1*mF%?_77rLRVh00fC!-
%9]YJs7F`G[;il-LCU.ZIf0rl\2TdP<=cYOfHT%pcGJqJ#4R]YgO:.bAZY68NeoWfB*40eXlUJiWJV,j@7M3"^1YHLt3,Yts=ERJ'
%k)`Au,4KY,`V1`Kg.T.E8Mb_d6sjDSpM3NXDJl`T\e)+,W+Y?=aJ(A^e3Q6!VfXHW^4ZSu'R=[IG^pMj`9YLEJnj_"Fh?@$nBKhp
%gXONVGSOFS1Ug;D;Fp*2HSco,i=WQ1nF!QQHSgG!X0d\8PA0PMMTBAVDahd"?8RoC.Q6D)Oht1*Yd>J3gnT,Z`).IT02.AM05)+/
%:sHWS4&-Bi6#N1!=QA>MXtDhoVC.I0UJj<g@7$s2;tK2jSSD73TJ8JbEG0f.3-UK'14*")c(+(07usBa`3^=-'#NTFJ7@Bd)u;7E
%9<&`Ej2r-#T?!YBE,?AJ5]QQ?/Psa31Ks9e6o\;-Q4`4AT+qaF8[5i<WM?"'m6`f]b%X0$m!Q;a/Ps[%mQFbMRe*R^egq6PC$CHV
%n=CPXlKbpXK6HrMJV%_obM+c*W[7mV`Kk/^WiBV>>O1$[M-o$TT2T/kN_s?fRX*^s.\CiC7h7(Ml0R\^Zlg058Z+RPO;]qA4Z_,7
%g4o%NK5-hoa(RUqTW/_Wa:,baU'8(rfjW#^M@<I).AYJ068eZj=qE=\3;4g&l@e@)!p,sH*^q]4?J;s;6c(l$FVIWo*u[eTo\s<B
%1ttbuM]moSWNI?s0XaF_fh(2lC7jWUpRTG.FE9M1N!^1ElpDcX\SXF'OtboLI>Y@M419TgJo4eb-H%N"pF5O,3&[rUK=*Q'F[8%^
%G&A!+E8o`PGg*\Z-7i!=oe^pRTd&)dGQ\_@XX`,sF!+`F-??--=[e1:qRISpZWjY0:8c?S5mj"E2nL@Ur5-t6Kl++H\#rTh8!D`K
%9&8"MR[QQF3$_YC`p&&L<UoX1Ia28TQaq%s`uKGqJ^ZW(iXV!>Ad/cV_VY!50U3&(jKDI<K328V)7g\]0t0(4eB_W3?iZ=3CGCpE
%S)`.^0=c:US*c*LY;Q,mF7*%<])"ndrj,XD(WatLRiNl#\.mKL`fSs%YhrUm:1nRM$d-$CF/*t8'tWk]N/YHaV_W@8:&BJuj#4W3
%ientiG4XjRN/%afg#^ti6gW3Y[],l<LDa(rYYXCXXH(X&;tZ(b$bA^3\djb?]=3X8#GhRLBBbrWff4M"h@A62AQ]7#/XG#aDUmj>
%$`qaSqrC0dY!lLN.16E5?IQW"a;M6lK-._9XA+Q&Kmdu%:('`b1>cF:Q6@Kir3i`RLk(!3f$B@;R?B>4EsmF1R#sSoBI@)XPALbo
%3p:4[N:7gcb,Nf+9aIQSD.\#cUhfWYE#Q+-TY[bo@P"pee=p\01*Qp%0t=;o`E?b%U;;GR@qf`$'LJEM:1Wu3YsKo>5c.d?77+9!
%Yt:5]kn8ldC5&s^!*;VB>bbP^3#`kiHd\!LU2KV8&S,]%Xa!\`6cH8eOQ8u:(NMHXh.NfYOgmqa;!N"#oF/6tZFDGQhb6S7MYK&U
%4Vdk_E,H56XO]LB2(b<&;"#*M0o>X4b?9OW[2!V(eV.fN\soo^#N#&p:YaH#?#j+("&AA</fU;i1aN\JC>\/3A?VqIW-mJH[`jp.
%84dSa6NJ_9:;7a;Gd,IBMcR*Y-]_7D[eHKW;kk$D?t<'h>`e_LU2o0-ZGks2(W2Bj\=RJK5/L>47>K8hoP0Mk5]lnJUlFXZXb_G8
%?5o@9L=P7o(^iL'XLGdF*B9jIX\imTK!6BI@=ODLZSCe?--Bi)be6ndXK:Db&#'hoG]#3+FtQ9f5`gT8POGqeMp$\`0X:FOF#U>K
%AQ%'Kj!Bt3Rsh-*=N$3\--?YK/p$P"=6q@f1Beq9f<l[<:N$-d+RBb%/aY@%H&5g&-;)#,9H01?<'>9l`M2L2>$Sqk/\*E;UIag[
%1RTe<3A]S'%?&DGQTJFXR8se^/a)]$M)nm_LajpHj@WKC?HMI:V`u(;O)XZk^*>(ta_5!c80Bk:=rkX<am??IK-lnlQcXGA^r7O-
%>B?5Q/^uXtL/g'2+BR/=8F1\!@\M)dpS9n9)OGSAo&OF5cH(QXUKCfEAQSM`cCM-AO&tVfB>Ku+8,C299.O_H'XDLsXU!V3A].a]
%_A$7L-O`dV_FD3p>Sr\'d-OS4XG:B?f")EG7,k8Z2Q%nIP(Zek6O9@I-`&WG/1qNg,BVP(#l5ZB="C"AE9#^tKoF*%:B3rSAV>MF
%Lb^jnB)*b_ki(%><Yo@mM!%7J\IW(.'/rEj^`2'n9:4g1n&Z;ZCWE^Fl/LFX)h`>f0'`O\5fF,<;V[6&G/_F3%<ItN0+?JXO(7M"
%9"AI'8[P^@l;Ik_%]VK&lV)4]?#1]C<uKSWYg8W@<s1C.*9S)WmoHLXbSi@]kb?tfM2fci-FstF->p_F-Hsj-,h=oCih[=:o$(\L
%S3;7>M*.8:]obWkm<,fXCk(2BVcUH!h0*?EJY1!Pj?']_ELGEH?cD<acE4[H1\FqH?$F(Rh'BL0a/6K*=DX;)"thK,Q[=9a"APE4
%\tBguH#2LL^9$(,h-]1ZRlK]S%C-b-&sgK$Wb[pt7e&6<VN4U[Fj)f7_L]>&>&<3./rAu+:lDn$dX%RC_jO)@3JbLOjcB.P3VpI3
%QZC)Ve"j(Ge<kj4I_isVT*W<C$,?9\q#qF5Lj::Y!Vpp1\6,8I2eBH%`5Q?5H*7GZjP%.1poK_Df=9LjSCl<3G8I@#,U.XX2>^i]
%("^1mjJZh\p2*Q>GEjm_na$>sM>eQ!RD]7c#B3h"VJ6Kfj+GNkb2'P7LJ)R-_kqN5`8^%;%7>VN^3FJQ=SFXM%#T;cZ#O&j4"Q!Q
%N?[mthTd@UbTGMT_S'<li\K.UM@1RUVH@cD,&#q7c7S%UN0>A9dZE^jH@>)7+,ioRjqU*g)l4JD4*>dGBU2`Wk"pcFLk@%7LQ+ak
%k-;FlS@ZF.;mVA3e+H2c2b4fodjBPikh;o,F(R-J1JUNLqbg?%F(c)bWj)#+D_p!f/[!$'1BoW;c=^cE=k5T)$Ggu,k1irKG/*D%
%i*.bpbGk&&#2WpO,5RjKP-Kl7RjG#\J,T0PSkjBhl.\V/M3TQIM1ZlCee%;&[CE</6\]:mQpScNW:`CX9-tY1i)ITa8/l+GX\6b?
%(A5u'ba<3Xh5tItWb12>QOQgY_Kh:e6uL0%D!H1F_]1Y.]#>s>)7EjV+XDUkHUX+rFDl0!in1"j&%4Ys/s5"5d+B?.A-i;mfP%SU
%)X1#YNM>Yg(NlM@[^h.kDl\4tP%DM4T)a2arR)[P44Hg5bD-:",UZrcGR(bpbn"Ql#,1o%,Z'qRDa9[n8j)ut_(9Ydc'*2+l7b3H
%ld[HUmFOHg`BA=o1:P_OU@0+'U4`A1)o<d!mHTisjp>uJmGJe<X`$^+a01;e812+^far?9fnDU,X^n_.,cl:$,)BQa!Lhc!*L_lL
%i2GHA`=32:.,_f?I?8D64a/O>HI-Zs;+(mW))3`[L_EqZ\8Op*%?ioc\=_pqI#3EB3PTk`G?3>t;TBbnEhk8Y.H4-h_7/IdOP18G
%!ac#1:uuD?ck3mBTEa-WTR>,R\3\3IaQ`%2=t(nIUXT&Zk9'o:&U>(r2,l>H/k?Bo):?B-60)"KKQMC#-knJ4;?M/EdE03Bet,hO
%BsnY&E&sdf90a()E`eMb^rq>j*])E]+<3a^rD2L]`KiRm3L&`]6D6[!\5E_LO?AYL6=f+!fgd/!pa:QB:%9(N+_58>$Sb[7<t56r
%TN'9+`S2)o70d[k.EHj0**'+>T&d'<Of2ZcN@dF>1kJomE?Yr3A!*u%9<0S!E+,"Y_/-S(Gi=5cG&n^"jBI[?<@Qg;L`Ol&@m^l`
%:*0Fo[)2@"Cn`NREBF+?h[(@)o,hE042&(kMaQbbd1K5&j/((tG+Q_C"96nq4].@\-VC7?.HY=moV_sl6[$ii!^4j\oYMETCD352
%n<bsV)SQQlj,%?$CW4p5ims9I0>+_3]t-Tu6^jFI.1T+8J2a9TDOHUjE@S$],u?Wjm#7#BH#>LS"@V^UFN032eH;-m7#Mh54<aI&
%89N^L!c]]]6(Tj%(R;<pbjcJ4@Qn4m%$t-q%l@d.V$6U(GV#@DKFW41.!>i)D'=Bn,^.F7AnXWMJkg#K,H(OZ3tdFi8g&R+eK<J=
%#s$(TA571c-5Jr1f@a4^WE(a,eAYjZde$SG_'AD%FVF-5#=mAcL_iK%_H/qJbP5'4_n!eH`aS9Pl)7$b2fV?<n)/Lb_Z6s,q'$>r
%n]WOBN;5J!$5k0,nr@t-Liuqp@[T:[q%&U&*5OP5IMX:(od#G:D4h\$P(+gg8mudsmX_GP/:FW<n4k\Ek,,O)(@eu*U_&V3B'NPJ
%\<NfO!^6I9**R=F#i(+7UC8<]$[:l%DJT?7M.j"&i#Q5Njq.kg:rTY&FlER[5WHKNs!d@uOA[CP/ZoB#G`'NjK8uMoSBh\&=J3_=
%J2PqtcoXbUl?r;3"X?%L%jkd#h?PRLei2lQ*L5C#JfD/B!fD"?#"@>c.QD"PiNWuZn<$jkX=%t)O$'No.5^7>Oa1-lK;UK>;JOWH
%,F^D6Uo.WliH`7(S=`\S%KaI;!(k40.u6+s]MSqQ<n&8ULce^O*(=jp.e5//g&UecE5\5p<$(Fk)uYcVkT)Ju'RX^>-7QtcXVd8/
%#Wf1uM*>H&cB19_br>'.arUrp"R@GT!\(fmE)OJ:$.)7N,5$)u_u+GSOV2OXZi,kN,%BNEdoV,qFbe3sq@O,ZrA+:PE5[geEN7Y_
%3R?ZPW>Fa)XVn\f"poZZaD$;OX:2]1:#n92\N(M+Gk2!G.!gYAB+jP>!ZhDo7s^9$OE[/>R@HSZ#R*Q?@L7D9JL.n4C8%3B>_\__
%XO.*YQggHIW6$7"cQJB8Sa&a7BU^=6Xqd^YR)DP4F2rkim1<k`F%In"k-(W&l#T`f92S.SY1PmhAZEm:<'bc'j$?DY`h.IUa=fX*
%-bLa>H7jl2!cW4(=Jt=rY+c*0jq_!*F.!+@LV-$EW6+j?k6X-QeP'oM'6,tGCQ8$M87R]4.8G>OMe1Pik.1e=$14_!j0:^UcK=(N
%]GlPL($uc&#-I'0_cJ6:9>]0c:o1Tq.tiI1[79,+Zc_7sM%0j1)59QLNa_1k,;fd9J^@Y-\<!l&,%*i4V!)gL)[#%Pd(;+L*#j]P
%O@D>%iDA;?_J/"_b1(^lmZ`04:WAm.07j*m4"f.s.b>_%7jrOcm>r9,eD;J;Gebn:dV2IB+$tTJ/HZnA-ef&Ngs'=B.@3f<,Q_uC
%_V;.PnW^lD--5-50sW;oR'&Fi40,Cam`pE-g-3E`BQ1aaK_M'a#.7?`:k$'&_q=\do^Cqr2`kk/*']q_^nOFd>"@cBR,C%R:/_F4
%1guMQ4q`bJ$rPlNGO\a&jC5_#,ZHQ,i9'Ugg^aG;&I6:0Vu+[RFD1/d"2\,<o&L%rdn"SD$"VjVK"`$R'EAQt85@o+fVgL&+]q.k
%Sc'"1h\R;Bd*EFRr2f,'c[^Dn0mIY[7uuW,?6MBtJ0>A!\`kuaN2a!3__,lg24@ZuZ(uBZ?ZrTKB[/;bi(Q_@5-5t?9^*tJmlF:2
%,"3's`R'Uqk37!<:rt<uEp%GK.*BgP(tS?JO#tq,004uPS&b'JUCMJUF?L`0W]2jG<CTT]8.Lt/F(eZbP/9[qTNusV!kl&%KS<AY
%3CNqERo2Qd5L2U1m2e5C&O7AFR;ZC</NQ4FiE)(D[WBa4\t[(ENJR<oR0gsYp:+]$F(L[mm`B'9LU,2322Xd%NsHF2,UZ@KB_rI]
%)ctmCc'"3A8f\"0*4TOC4ZgH1g\h@o(Wmj*Q35Gr=i0:I]D+W/;'a^[i`cJ1I@.>VAEUH6q1Qgh2R7O9_9u;Q(OePL?BHjiC"n8!
%Nh#5+i+iQYU,7=l*c\qg)9WXFkRV"E&0<\u=ptqOW,bk"84SX`a&J)uNj&^:n-0gT/JtPJSN$:6;d>3'R>L0!CPIHi^=#:"j'\nk
%Tk)bDXd!kjETQH^&js``%-jH+@4V"9S-O=7#XV.=%-o.BQlbV_.o%=.T.?(YW+:<JeN6"eQEm?Nb7(g\\B0,;^#JKPmrp%"-i*Cr
%)fC_,4+`2CCbTrg%VnBl,\+W[ka]s?M$W'Q/N(`m,jIh$7%=o3=2o]r*Xka-o!;g&MSgEPf>o'eZ%[0/O-)A"[3$$-RGr>3Y)Dj"
%$JP:]KEmIgJHD\F]L0sSFLe2Ydm6(n8@QeE`YLUR]iG;mXP!>&P!j%l0e(6!,f-u&Pq3>K-8r2OcJsqg+3=uNK&]WS?/d]T0Of02
%6ZN&o!Hl,nG,6X:E-'&p/O8&u2:Es$4KWane;^:lAK,JNk,b*ME%)1.Ni1g0\F>kL*0ab11V.Z3fcq5#a2'8MT''%p6>D8a_-3/M
%rc=h87A/0lL41DLH/b4']UorT*H>a-mh@@)/eN%c`h)^&F@P>.&[('E<@bkiWq"(9YnqMA`:GjXLkq_>cI.9&[N(),ALX96kGj>\
%e\I54VnD1fK(mftkq+'!<K,4=&;QUFSI_mYR`MVqK.!bLcjGh<ep]U*^sl0G2=fq(QQ@/*'olU";itmNfMR=;[YVK!k:=1Wf_=jN
%?:5g5^ef'CUc9\5DSA1j!P%ibFJ/7oQ80cF!bUrg7\0Iu*/WPlV`CU)l(ANcMc(f]BcdK:^b^j5GbAPa;m5;s8o>XI:h!?ZpRbK#
%jEjZuGa2mB"c2UL2$!42dDgf)=u/HN7`IdseNj58?k,@aiRJ*Mm,>a#86SN:kFu3k:,l:[+`bA\:3C#a)c*R\c\LX>2*)8kd;n40
%7r.;;A92PZdu-K1OZE8#/fu)!3g'A2k(X"Ta#8OuCrmXD#KK*iTYZl;KkJ5'o#9rXj'!9MY'E/iCMR,<nG%>k.Ej"c\R?*Xm7Bl2
%&HtGZ\)HjBac2?P7>CG99Q0JjTMo$[<T)$PO2fo7Fl]1OVn%bR01Rcc3'-RESGb$r0a%?5fGRH"`s-"tmBXL4n*a,Si)@Mj,M>pe
%?":=>b`OHS<^.e]Vf<l1-]F)qFgPSYaG/l%Tn.94;g,uP7dM]+8@]Ro,XpScLaIKI<Gl4A^K"m%1^[a?"aheJLT30P[k`9rTu(+V
%297QmBNKq[XqF-B7k+-7:4<hS$-"0V[/`cH@ticA>c`Mmq@FgU)oMNB>X@S%bA(R?Wl-3r5p'a(ddR!$n-5k?n\d-P`eRZmRmB'f
%.Y%$V-3S5E.]p0a)>Zo+p"./#,kAk?&%6M40Kf3adEIBf$VF`BA5CAeQBjuP'Oj`%LZQP602@\SDkJNaf4YeS4Wu0(%6nbDMu>bb
%aM<opes=RdYbFK,r!);\c?GT0V=>K;0>)[fn%nf\:Qt6jSphbd>3)\(m^1',s7k[YX&tH72$K-:Z(l7dRY$58b-=B]?IVsk"Luo"
%W@\nVTHDS3jcHeGXZXaC\]W(2Oc?G>7G`<'8=YrFlu8p]\?643n"1C^Q8[Ph:M2*pgA(V?fYVQg1SSANO>fB-&.B6__5+'s@mPMV
%R:!AXd./gRBo]aK4T`6*:tibgZ)9,B2f^o,m-;Xmlh(%ir11t*fK^UMBZuWsg+aF%>+^Yf+?'?A\sTbf(<^>oQ8b7.f]PUk;P%ar
%pOH+tbQ&`4CHu$RpFQIEKBNAP6VTFR%?K7i+"sOc\nUHi-cl--Z.Ef+T;G#tVRPm4Nud>=&*$qDh.mVTkiV`jFu=kn9,^N7'uXBK
%GEj%R6cag@mp/Yf**e\&M)a3i6-"N*G%L:Z[0UH2f8NI^#0Q"X!E3@WaqXFuR1f%gBbCBUTWS`lG?7[Kefd!%I-deG&_N<-HEtRB
%_Y+\ol^.k7+?'ECWnb,L(<[M/I],_B8F>ZMjZs:hql'q?1q*"\.bibb@Y0Ni[FXiWX]IC,YNI+A+lHiTi1;L?_@MKG2*=HRpe($b
%b/7?Y36`_e`fXQ"4.&&cB\ZsF8TG:]ll>r5XnHb+rP(NZ/p*US4u`NK+FZ(iE!4"57u&sD#@[$BE"f7nU#=ioK&PSak=7pXkiS@R
%:f)X[%jm;kFHYKD\n(ZsZ?Xjta,X1Yj$(a:X9bEf`fU\CKEM@G:7?bA6S\@s*J`([L(GYL:ZZXJbL8kH1("'NH,O:SgX%rB3,<cK
%N#P.piOmgQ,WrYMKd$)nUM`oTMq=,aUTT?h`,h"9_,g)HZp%!.%:16&-ls#,[th0G*d&KIgifS_>n)hSHdiQ3PN4mlCTnkk7ucQd
%'+=d/+"$LGs&8`K^]!?qrqOD2qsBGO^J<^jrlZD_l*p]ha$9LJs7P+gs7.iBl!OJ[kMO#OiLg,fB#EO*p\^pBs7F@hrq6<hb9)62
%nur)R?iD\iI'c*4X2"Mcs83u=nh9u,M7=m1~>
%AI9_PrivateDataEnd
